00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 4:18:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                  9  OUTPUT_ADDRESS EQU $7010
00001000                            10  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 11  RETURN_ADDRESS EQU $9000
00001000                            12  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 13  START_ADDRESS EQU $09100
00001000                            14  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 15  END_ADDRESS EQU $7004
00001000                            16  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 17  OPCODE_ADDRESS EQU $7006
00001000                            18  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            19  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            20  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            21  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 22  OFFSET_OPC_ADDRES EQU $7008 
00001000                            23  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 24  SIZE_OPCODE EQU $700A
00001000                            25  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 26  STORE_REGISTER_ADDRESS EQU $700C
00001000                            27  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 28  STACK_ADDRESS EQU $8000
00001000                            29  START:                  ; first instruction of program
00001000                            30      * MOVE.L #$10AF241B, -(SP)
00001000                            31      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            32      * JSR PRINT_HEX
00001000                            33      * ADDQ.L #$08, SP
00001000                            34  
00001000                            35      * JSR PRINT_NEW_LINE
00001000                            36  
00001000                            37      * JSR PRINT_TAB
00001000                            38      * A0
00001000                            39  *     MOVE.L #%0000011100000100, D1
00001000                            40  *     MOVE.L D1, -(SP)
00001000                            41  *     JSR PRINT_REGISTER
00001000                            42  *     ADDQ.L #4, SP
00001000                            43  *     * A1
00001000                            44  *     MOVE.W #%0100, D1
00001000                            45  *     SWAP D1
00001000                            46  *     MOVE.W #$1, D1
00001000                            47  *     MOVE.L D1, -(SP)
00001000                            48  *     JSR PRINT_REGISTER
00001000                            49  *     ADDQ.L #4, SP
00001000                            50  * * A2
00001000                            51  *     MOVE.W #%0011, D1
00001000                            52  *     SWAP D1
00001000                            53  *     MOVE.W #$2, D1
00001000                            54  *     MOVE.L D1, -(SP)
00001000                            55  *     JSR PRINT_REGISTER
00001000                            56  *     ADDQ.L #4, SP
00001000                            57  * * A3
00001000                            58  *     MOVE.W #%0011, D1
00001000                            59  *     SWAP D1
00001000                            60  *     MOVE.W #$3, D1
00001000                            61  *     MOVE.L D1, -(SP)
00001000                            62  *     JSR PRINT_REGISTER
00001000                            63  *     ADDQ.L #4, SP
00001000                            64  * * A4
00001000                            65  *     MOVE.W #%0011, D1
00001000                            66  *     SWAP D1
00001000                            67  *     MOVE.W #$4, D1
00001000                            68  *     MOVE.L D1, -(SP)
00001000                            69  *     JSR PRINT_REGISTER
00001000                            70  *     ADDQ.L #4, SP
00001000                            71  * * A5
00001000                            72  *     MOVE.W #%0011, D1
00001000                            73  *     SWAP D1
00001000                            74  *     MOVE.W #$5, D1
00001000                            75  *     MOVE.L D1, -(SP)
00001000                            76  *     JSR PRINT_REGISTER
00001000                            77  *     ADDQ.L #4, SP
00001000                            78  * * A6
00001000                            79  *     MOVE.W #%0011, D1
00001000                            80  *     SWAP D1
00001000                            81  *     MOVE.W #$6, D1
00001000                            82  *     MOVE.L D1, -(SP)
00001000                            83  *     JSR PRINT_REGISTER
00001000                            84  *     ADDQ.L #4, SP
00001000                            85  * * A7
00001000                            86  *     MOVE.W #%0011, D1
00001000                            87  *     SWAP D1
00001000                            88  *     MOVE.W #$7, D1
00001000                            89  *     MOVE.L D1, -(SP)
00001000                            90  *     JSR PRINT_REGISTER
00001000                            91  *     ADDQ.L #4, SP
00001000                            92  
00001000                            93      * JSR PRINT_COMMA
00001000                            94      * JSR PRINT_DOLLAR_SIGN
00001000                            95      * JSR PRINT_HASH_SIGN
00001000                            96      * MOVE.B #$01, -(SP)
00001000                            97      * JSR PRINT_DATA
00001000                            98      * ADDQ.L #$2,SP
00001000                            99      * MOVE.B #$02, -(SP)
00001000                           100      * JSR PRINT_DATA
00001000                           101      * ADDQ.L #$2, SP
00001000                           102      * MOVE.B #$03, -(SP)
00001000                           103      * JSR PRINT_DATA
00001000                           104      * ADDQ.L #$2,SP
00001000                           105   
00001000  4207                     106      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            107      MOVE.L #START_ADDRESS, A0 
00001008  20BC 00010000            108      MOVE.L #$010000, (A0)
0000100E                           109  LOOP_START:
0000100E  2E7C 00008000            110      MOVE.L #STACK_ADDRESS, SP
00001014  2F39 00009100            111      MOVE.L (START_ADDRESS), -(SP)
0000101A  2F3C 00007006            112      MOVE.L #OPCODE_ADDRESS, -(SP)
00001020  2C7C 00007006            113      MOVE.L #OPCODE_ADDRESS, A6
00001026  4EB9 0000163A            114      JSR FETCH_OPCODES
0000102C  508F                     115      ADDQ.L #8, SP
0000102E  4EB9 000010B4            116      JSR PRINT_TAB
00001034  4EB9 00001188            117      JSR PRINT_PC
0000103A  207C 00007006            118      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     119      MOVE.W (A0), -(SP)
00001042  4EB9 0000164E            120      JSR JUMP_TABLE
00001048                           121  FINISH_OPCODE:
00001048  4280                     122      CLR.L D0
0000104A  23FC 00000000 00009000   123      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                124      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            125      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            126      JSR PRINT_NEW_LINE
00001064  5207                     127      ADDQ.B #1, D7 
00001066  0C07 001D                128      CMPI.B #29, D7 
0000106A  6700 0004                129      BEQ CLR_SCREEN
0000106E  609E                     130      BRA LOOP_START
00001070                           131  
00001070                           132  CLR_SCREEN:
00001070  43F9 00001B3B            133      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                134      MOVE.B #13, D0 
0000107A  4E4F                     135      TRAP #15 
0000107C  4207                     136      CLR.B D7
0000107E  103C 0005                137      MOVE.B #5, D0 
00001082  4E4F                     138      TRAP #15 
00001084  0C01 000D                139      CMPI.B #$0D, D1 
00001088  6784                     140      BEQ LOOP_START
0000108A  6000 0002                141      BRA END_MAIN
0000108E                           142  
0000108E                           143  * Put program code here
0000108E                           144  MAIN:
0000108E                           145  
0000108E                           146  END_MAIN:
0000108E  103C 0009                147      MOVE.B #9, D0
00001092  4E4F                     148      TRAP #15
00001094  103C 000E                149      MOVE.B #14,D0
00001098  4E4F                     150      TRAP #15
0000109A                           151  * get user input 
0000109A                           152  GET_INPUT:
0000109A  43F9 00001ADF            153      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                154      MOVE.B #13, D0
000010A4  4E4F                     155      TRAP #15
000010A6  227C 00002000            156      MOVEA.L #$2000,A1
000010AC  103C 0002                157      MOVE.B #2, D0
000010B0  4E4F                     158      TRAP #15
000010B2                           159  END_GET_INPUT:
000010B2  4E75                     160      RTS   
000010B4                           161  
000010B4                           162  *--------------------------------------------------------------------
000010B4                           163  * PRINT_TAB 
000010B4                           164  PRINT_TAB: 
000010B4  227C 00007010            165      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            166      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                167      MOVE.B #0, (A1)+
000010C4  227C 00007010            168      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           169  END_PRINT_TAB:
000010CA  103C 000E                170      MOVE.B #14, D0
000010CE  4E4F                     171      TRAP #15
000010D0  4E75                     172      RTS
000010D2                           173  *--------------------------------------------------------------------
000010D2                           174  * PRINT_COMMA
000010D2                           175  PRINT_COMMA:
000010D2  227C 00007010            176      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                177      MOVE.W #', ', (A1)+
000010DC  12BC 0000                178      MOVE.B #0, (A1)
000010E0  5589                     179      SUBQ.L #2, A1
000010E2                           180  END_PRINT_COMMA:
000010E2  103C 000E                181      MOVE.B #14, D0
000010E6  4E4F                     182      TRAP #15
000010E8  4E75                     183      RTS
000010EA                           184  *--------------------------------------------------------------------
000010EA                           185  * PRINT_DOLLAR_SIGN
000010EA                           186  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            187      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                188      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           189      MOVE.B #0, 1(A1) 
000010FA                           190  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                191      MOVE.B #14, D0
000010FE  4E4F                     192      TRAP #15
00001100  4E75                     193      RTS
00001102                           194  *--------------------------------------------------------------------
00001102                           195  * PRINT_HASH_SIGN
00001102                           196  PRINT_HASH_SIGN:
00001102  227C 00007010            197      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                198      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           199      MOVE.B #0, 1(A1) 
00001112                           200  END_PRINT_HASH_SIGN:
00001112  103C 000E                201      MOVE.B #14, D0
00001116  4E4F                     202      TRAP #15
00001118  4E75                     203      RTS
0000111A                           204  
0000111A                           205  *--------------------------------------------------------------------
0000111A                           206  * PRINT A NEW LINE 
0000111A                           207  PRINT_NEW_LINE: 
0000111A  227C 00007010            208      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                209      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                210      MOVE.B #LF, (A1)+
00001128  12FC 0000                211      MOVE.B #0, (A1)+
0000112C                           212  END_PRINT_NEW_LINE:
0000112C  227C 00007010            213      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                214      MOVE.B #14, D0
00001136  4E4F                     215      TRAP #15 
00001138  4E75                     216      RTS
0000113A                           217  
0000113A                           218  
0000113A                           219  
0000113A                           220  
0000113A                           221  *--------------------------------------------------------------------
0000113A                           222  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           223  * PARAMETERS: 
0000113A                           224   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           225  *       00 - byte
0000113A                           226  *       01 - word
0000113A                           227  *       10 - long
0000113A                           228  * NOTE:
0000113A                           229  *   A1 USE FOR PRINT
0000113A                           230  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           231  PRINT_DATA:
0000113A  227C 00007010            232      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                233      MOVE.B 4(SP), D1
00001144  0C01 0000                234      CMPI.B #$00, D1
00001148  6700 001A                235      BEQ PRINT_BYTE
0000114C  0C01 0001                236      CMPI.B #$01, D1
00001150  6700 001E                237      BEQ PRINT_WORD
00001154  0C01 0002                238      CMPI.B #$02, D1 
00001158  6700 0022                239      BEQ PRINT_LONG
0000115C                           240  END_PRINT_DATA:
0000115C  103C 000E                241      MOVE.B #14, D0
00001160  4E4F                     242      TRAP #15
00001162  4E75                     243      RTS 
00001164                           244  
00001164                           245  PRINT_BYTE: 
00001164  32BC 2E42                246      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           247      MOVE.B #0, 2(A1)
0000116E  60EC                     248      BRA END_PRINT_DATA
00001170                           249  PRINT_WORD: 
00001170  32BC 2E57                250      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           251      MOVE.B #0, 2(A1)
0000117A  60E0                     252      BRA END_PRINT_DATA
0000117C                           253  PRINT_LONG: 
0000117C  32BC 2E4C                254      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           255      MOVE.B #0, 2(A1)
00001186  60D4                     256      BRA END_PRINT_DATA
00001188                           257  *--------------------------------------------------------------------
00001188                           258  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           259  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           260  * PARAMETERS:
00001188                           261  *   NONE
00001188                           262  * NOTES: 
00001188                           263  * A1 USE TO PRINT 
00001188                           264  * D0 FOR TRAP AND CONVERSION 
00001188                           265  PRINT_PC:
00001188  2039 00009100            266      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     267      MOVE.L D0, -(SP)
00001190  2F3C 00000008            268      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 000014E6            269      JSR PRINT_HEX 
0000119C  508F                     270      ADDQ.L #8, SP 
0000119E  4EB8 10B4                271      JSR PRINT_TAB
000011A2  4EB8 10B4                272      JSR PRINT_TAB 
000011A6  4EB8 10B4                273      JSR PRINT_TAB
000011AA  4E75                     274      RTS 
000011AC                           275  
000011AC                           276  CHECK_SUPPORT_REGISTER:
000011AC  322F 0004                277      MOVE.W 4(SP), D1 
000011B0  3801                     278      MOVE.W D1,D4 
000011B2                           279     ; check to make sure we dont support the register 
000011B2  =00000028                280  DISPLACEMENT_REGISTER EQU %00101000
000011B2  =00000030                281  ADDRESS_WITH_INDEX EQU %00110000
000011B2  =0000003B                282  COUNTER_INDEX EQU %00111011 
000011B2  =0000003A                283  COUNTER_DISPLACEMENT EQU %00111010
000011B2  C83C 0038                284      AND.B #%00111000, D4 
000011B6  0C04 0028                285      CMPI.B #DISPLACEMENT_REGISTER, D4
000011BA  6700 0022                286      BEQ UNSUPPORT_REGISTER
000011BE  0C04 0030                287      CMPI.B #ADDRESS_WITH_INDEX, D4
000011C2  6700 001A                288      BEQ UNSUPPORT_REGISTER 
000011C6  3801                     289      MOVE D1, D4
000011C8  C83C 003F                290      AND.B #%00111111,D4
000011CC  0C04 003B                291      CMPI.B #COUNTER_INDEX, D4
000011D0  6700 000C                292      BEQ UNSUPPORT_REGISTER 
000011D4  0C04 003A                293      CMPI.B #COUNTER_DISPLACEMENT, D4
000011D8  6700 0004                294      BEQ UNSUPPORT_REGISTER
000011DC  4E75                     295      RTS
000011DE                           296  UNSUPPORT_REGISTER:
000011DE  =00000002                297  C_UNSUPPORT_REGISTER EQU $2
000011DE  267C 00009000            298      MOVE.L #RETURN_ADDRESS, A3
000011E4  4EB9 00001A3A            299      JSR PRINT_UNSUPPORTED
000011EA  4EB8 10B4                300      JSR PRINT_TAB 
000011EE  4EB8 1102                301      JSR PRINT_HASH_SIGN 
000011F2  4EB8 10EA                302      JSR PRINT_DOLLAR_SIGN 
000011F6  4281                     303      CLR.L D1 
000011F8  3238 7006                304      MOVE.W (OPCODE_ADDRESS), D1 
000011FC  2F01                     305      MOVE.L D1, -(SP) 
000011FE  2F3C 00000004            306      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001204  4EB9 000014E6            307      JSR PRINT_HEX 
0000120A  508F                     308      ADDQ.L #8, SP 
0000120C  36BC 0002                309      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001210  4E75                     310      RTS 
00001212                           311  
00001212                           312  
00001212                           313  *--------------------------------------------------------------------
00001212                           314  * PRINT_REGISTER
00001212                           315  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001212                           316  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001212                           317  * 2 - (4(sp)) byte value for how many byte for immediate value
00001212                           318  *      0 for a byte value
00001212                           319  *      1 for word value
00001212                           320  *      2 for long value 
00001212                           321  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001212                           322  * NOTE: 
00001212                           323  *   D1 FOR STORE THE PARAMETER
00001212                           324  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001212                           325  PRINT_REGISTER:
00001212  322F 0006                326     MOVE.W 6(SP), D1 
00001216                           327     
00001216  3401                     328     MOVE.W D1,D2
00001218  0C01 003C                329     CMPI.B #%00111100, D1
0000121C  6700 00A2                330     BEQ PRINT_IMMEDIATE
00001220  0C01 0038                331     CMPI.B #%00111000, D1
00001224  6700 0160                332     BEQ PRINT_AB_SHORT
00001228  0C01 0039                333     CMPI.B #%00111001, D1
0000122C  6700 01BA                334     BEQ PRINT_AB_LONG 
00001230                           335  
00001230  1401                     336     MOVE.B D1,D2
00001232  C43C 0038                337     AND.B #%00111000, D2
00001236  0C02 0010                338     CMPI.B #%00010000, D2
0000123A  6700 020E                339     BEQ PRINT_OPEN
0000123E                           340  
0000123E  1401                     341     MOVE.B D1,D2
00001240  C43C 0038                342     AND.B #%00111000, D2
00001244  0C02 0018                343     CMPI.B #%00011000, D2
00001248  6700 0200                344     BEQ PRINT_OPEN
0000124C                           345  
0000124C  1401                     346     MOVE.B D1,D2
0000124E  C43C 0038                347     AND.B #%00111000, D2
00001252  0C02 0020                348     CMPI.B #%00100000, D2
00001256  6700 020C                349     BEQ PRINT_MINUS_OPEN
0000125A                           350  
0000125A                           351  CONTINUE_PRINT_REGISTER:
0000125A  1401                     352     MOVE.B D1,D2
0000125C  C43C 0038                353     AND.B #%00111000, D2
00001260  0C02 0000                354     CMPI.B #%00000000, D2
00001264  6700 024C                355     BEQ PRINT_D
00001268                           356  
00001268  1401                     357     MOVE.B D1,D2
0000126A  C43C 0038                358     AND.B #%00111000, D2
0000126E  0C02 0008                359     CMPI.B #%00001000, D2
00001272  6700 0258                360     BEQ PRINT_A 
00001276                           361  
00001276                           362  CONTINUE_PRINT_RE_NUMBER:
00001276  227C 00007010            363      MOVE.L #OUTPUT_ADDRESS, A1
0000127C  1401                     364      MOVE.B D1,D2
0000127E  C43C 0007                365      AND.B #%00000111, D2
00001282  0602 0030                366      ADD.B #48, D2 
00001286  1282                     367      MOVE.B D2, (A1) 
00001288  137C 0000 0001           368      MOVE.B #$0, 1(A1)
0000128E  103C 000E                369      MOVE.B #14, D0
00001292  4E4F                     370      TRAP #15
00001294                           371  DONE_PRINT_NUMBER:
00001294  1401                     372     MOVE.B D1,D2
00001296  C43C 0038                373     AND.B #%00111000, D2
0000129A  0C02 0010                374     CMPI.B #%00010000, D2
0000129E  6700 01DE                375     BEQ PRINT_CLOSE
000012A2                           376  
000012A2  1401                     377     MOVE.B D1,D2
000012A4  C43C 0038                378     AND.B #%00111000, D2
000012A8  0C02 0018                379     CMPI.B #%00011000, D2
000012AC  6700 01EA                380     BEQ PRINT_CLOSE_PLUS
000012B0                           381  
000012B0  1401                     382     MOVE.B D1,D2
000012B2  C43C 0038                383     AND.B #%00111000, D2
000012B6  0C02 0020                384     CMPI.B #%00100000, D2
000012BA  6700 01C2                385     BEQ PRINT_CLOSE
000012BE                           386  
000012BE                           387  END_PRINT_REGISTER:
000012BE  4E75                     388      RTS
000012C0                           389  
000012C0                           390  PRINT_IMMEDIATE:
000012C0  227C 00007010            391      MOVE.L #OUTPUT_ADDRESS, A1
000012C6  12BC 0023                392      MOVE.B #'#', (A1)
000012CA  137C 0000 0001           393      MOVE.B #$0, 1(A1)
000012D0  103C 000E                394      MOVE.B #14, D0
000012D4  4E4F                     395      TRAP #15
000012D6  4EB8 10EA                396      JSR PRINT_DOLLAR_SIGN
000012DA  3038 7008                397      MOVE.W (OFFSET_OPC_ADDRES),D0
000012DE  342F 0004                398      MOVE.W 4(SP), D2 ; HOW MANY BYTE
000012E2  0C42 0000                399      CMPI #$00, D2
000012E6  6700 0014                400      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
000012EA  0C42 0001                401      CMPI #$01, D2
000012EE  6700 0036                402      BEQ PRINT_IMMEDIATE_WORD
000012F2  0C42 0002                403      CMPI #$02, D2
000012F6  6700 005A                404      BEQ PRINT_IMMEDIATE_LONG
000012FA  60C2                     405      BRA END_PRINT_REGISTER
000012FC                           406  
000012FC                           407  PRINT_IMMEDIATE_BYTE:
000012FC  2479 00009100            408      MOVE.L (START_ADDRESS), A2
00001302  1432 0000                409      MOVE.B (A2, D0), D2 ; 
00001306  48E7 E0C0                410      MOVEM.L D0-D2/A0-A1, -(SP)
0000130A  2F02                     411      MOVE.L D2, -(SP)
0000130C  2F3C 00000002            412      MOVE.L #HEX_TO_ASCII_BYTE, -(SP) 
00001312  4EB9 000014E6            413      JSR PRINT_HEX
00001318  508F                     414       ADDQ.L #$08, SP
0000131A  4CDF 0307                415      MOVEM.L (SP)+, D0-D2/A0-A1
0000131E  5240                     416      ADDQ.W #$1, D0
00001320  31C0 7008                417      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001324  6098                     418      BRA END_PRINT_REGISTER
00001326                           419  PRINT_IMMEDIATE_WORD:
00001326  2479 00009100            420      MOVE.L (START_ADDRESS), A2
0000132C  3432 0000                421      MOVE.W (A2, D0), D2 ; 
00001330  48E7 E0C0                422      MOVEM.L D0-D2/A0-A1, -(SP)
00001334  2F02                     423      MOVE.L D2, -(SP)
00001336  2F3C 00000004            424      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000133C  4EB9 000014E6            425      JSR PRINT_HEX
00001342  508F                     426      ADDQ.L #$08, SP
00001344  4CDF 0307                427      MOVEM.L (SP)+, D0-D2/A0-A1
00001348  5440                     428      ADDQ.W #$2, D0
0000134A  31C0 7008                429      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000134E  6000 FF6E                430      BRA END_PRINT_REGISTER
00001352                           431  PRINT_IMMEDIATE_LONG:
00001352  3038 7008                432      MOVE.W (OFFSET_OPC_ADDRES),D0
00001356  2479 00009100            433      MOVE.L (START_ADDRESS), A2
0000135C  2432 0000                434      MOVE.L (A2, D0), D2 ; 
00001360  48E7 E0C0                435      MOVEM.L D0-D2/A0-A1, -(SP)
00001364  2F02                     436      MOVE.L D2, -(SP)
00001366                           437      ; offset to get immediate value from opcode
00001366  3038 7008                438      MOVE.W (OFFSET_OPC_ADDRES),D0
0000136A  2F3C 00000008            439      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001370  4EB9 000014E6            440      JSR PRINT_HEX
00001376  508F                     441      ADDQ.L #$08, SP
00001378  4CDF 0307                442      MOVEM.L (SP)+, D0-D2/A0-A1
0000137C  5840                     443      ADDQ.W #$4, D0
0000137E  31C0 7008                444      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001382  6000 FF3A                445      BRA END_PRINT_REGISTER
00001386                           446  PRINT_AB_SHORT:
00001386  227C 00007010            447      MOVE.L #OUTPUT_ADDRESS, A1
0000138C  32BC 2824                448      MOVE.W #'($', (A1)
00001390  137C 0000 0002           449      MOVE.B #0, 2(A1)
00001396  103C 000E                450      MOVE.B #14, D0
0000139A  4E4F                     451      TRAP #15
0000139C                           452      ; offset to get immediate value from opcode
0000139C  2479 00009100            453      MOVE.L (START_ADDRESS), A2
000013A2  3038 7008                454      MOVE.W (OFFSET_OPC_ADDRES),D0
000013A6  3432 0000                455      MOVE.W (A2, D0), D2 ; 
000013AA  48E7 E0C0                456      MOVEM.L D0-D2/A0-A1, -(SP)
000013AE  2F02                     457      MOVE.L D2, -(SP)
000013B0  2F3C 00000004            458      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013B6  4EB9 000014E6            459      JSR PRINT_HEX
000013BC  508F                     460      ADDQ.L #$08, SP
000013BE  4CDF 0307                461      MOVEM.L (SP)+, D0-D2/A0-A1
000013C2  5440                     462      ADDQ.W #$2, D0
000013C4  31C0 7008                463      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C8                           464      ; print close parathesis with W
000013C8  227C 00007010            465      MOVE.L #OUTPUT_ADDRESS, A1
000013CE  32BC 292E                466      MOVE.W #').', (A1)
000013D2  137C 0057 0002           467      MOVE.B #'W',2(A1)
000013D8  137C 0000 0003           468      MOVE.B #0, 3(A1)
000013DE  103C 000E                469      MOVE.B #14, D0
000013E2  4E4F                     470      TRAP #15
000013E4  6000 FED8                471      BRA END_PRINT_REGISTER
000013E8                           472  PRINT_AB_LONG:
000013E8                           473      ;print open parathesis
000013E8  227C 00007010            474      MOVE.L #OUTPUT_ADDRESS, A1
000013EE  32BC 2824                475      MOVE.W #'($', (A1)
000013F2  137C 0000 0002           476      MOVE.B #0, 2(A1)
000013F8  103C 000E                477      MOVE.B #14, D0
000013FC  4E4F                     478      TRAP #15
000013FE                           479      ; print value in long
000013FE  2479 00009100            480      MOVE.L (START_ADDRESS), A2
00001404                           481      ; offset to get value from opcode
00001404  3038 7008                482      MOVE.W (OFFSET_OPC_ADDRES),D0
00001408  2432 0000                483      MOVE.L (A2, D0), D2 ; 
0000140C  48E7 E0C0                484      MOVEM.L D0-D2/A0-A1, -(SP)
00001410  2F02                     485      MOVE.L D2, -(SP)
00001412  2F3C 00000008            486      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001418  4EB9 000014E6            487      JSR PRINT_HEX
0000141E  508F                     488      ADDQ.L #$08, SP
00001420  4CDF 0307                489      MOVEM.L (SP)+, D0-D2/A0-A1
00001424  5840                     490      ADDQ.W #$4, D0
00001426  31C0 7008                491      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000142A                           492      ; print close parathesis with W
0000142A  227C 00007010            493      MOVE.L #OUTPUT_ADDRESS, A1
00001430  32BC 292E                494      MOVE.W #').', (A1)
00001434  137C 004C 0002           495      MOVE.B #'L',2(A1)
0000143A  137C 0000 0003           496      MOVE.B #0, 3(A1)
00001440  103C 000E                497      MOVE.B #14, D0
00001444  4E4F                     498      TRAP #15
00001446  6000 FE76                499      BRA END_PRINT_REGISTER
0000144A                           500  
0000144A                           501  PRINT_OPEN:
0000144A  227C 00007010            502      MOVE.L #OUTPUT_ADDRESS, A1
00001450  12BC 0028                503      MOVE.B #'(', (A1)
00001454  137C 0000 0001           504      MOVE.B #$0, 1(A1)
0000145A  103C 000E                505      MOVE.B #14, D0
0000145E  4E4F                     506      TRAP #15
00001460  6000 006A                507      BRA PRINT_A
00001464                           508  PRINT_MINUS_OPEN: 
00001464  227C 00007010            509      MOVE.L #OUTPUT_ADDRESS, A1
0000146A  32BC 2D28                510      MOVE.W #'-(', (A1)
0000146E  137C 0000 0002           511      MOVE.B #$0, 2(A1)
00001474  103C 000E                512      MOVE.B #14, D0
00001478  4E4F                     513      TRAP #15
0000147A  6000 0050                514      BRA PRINT_A
0000147E                           515  
0000147E                           516  PRINT_CLOSE:
0000147E  227C 00007010            517      MOVE.L #OUTPUT_ADDRESS, A1
00001484  12BC 0029                518      MOVE.B #')', (A1)
00001488  137C 0000 0001           519      MOVE.B #$0, 1(A1)
0000148E  103C 000E                520      MOVE.B #14, D0
00001492  4E4F                     521      TRAP #15
00001494  6000 FE28                522      BRA END_PRINT_REGISTER
00001498                           523  PRINT_CLOSE_PLUS:
00001498  227C 00007010            524      MOVE.L #OUTPUT_ADDRESS, A1
0000149E  32BC 292B                525      MOVE.W #')+', (A1)
000014A2  137C 0000 0002           526      MOVE.B #$0, 2(A1)
000014A8  103C 000E                527      MOVE.B #14, D0
000014AC  4E4F                     528      TRAP #15
000014AE  6000 FE0E                529      BRA END_PRINT_REGISTER
000014B2                           530  PRINT_D:
000014B2  227C 00007010            531      MOVE.L #OUTPUT_ADDRESS, A1 
000014B8  12BC 0044                532      MOVE.B #'D', (A1)
000014BC  137C 0000 0001           533      MOVE.B #$0, 1(A1)
000014C2  103C 000E                534      MOVE.B #14, D0
000014C6  4E4F                     535      TRAP #15
000014C8  6000 FDAC                536      BRA CONTINUE_PRINT_RE_NUMBER
000014CC                           537  PRINT_A: 
000014CC  227C 00007010            538      MOVE.L #OUTPUT_ADDRESS, A1 
000014D2  12BC 0041                539      MOVE.B #'A', (A1)
000014D6  137C 0000 0001           540      MOVE.B #$0, 1(A1)
000014DC  103C 000E                541      MOVE.B #14, D0
000014E0  4E4F                     542      TRAP #15
000014E2  6000 FD92                543      BRA CONTINUE_PRINT_RE_NUMBER
000014E6                           544  
000014E6                           545  *-----------------------------------------------------------
000014E6                           546  * PRINT HEX 
000014E6                           547  * PARAMETERS:
000014E6                           548  *   1- (8(SP)): VALUE IN HEX
000014E6                           549  *   2- (4(SP)): HOW MANY BYTES
000014E6                           550  * RETURN NULL
000014E6                           551  *-----------------------------------------------------------
000014E6                           552  PRINT_HEX:
000014E6  6000 0016                553      BRA HEX_TO_ASCII
000014EA                           554  GET_ASCII_FROM_HEX:
000014EA  227C 00007010            555      MOVE.L #OUTPUT_ADDRESS, A1
000014F0  103C 000E                556      MOVE.B #14, D0
000014F4  4E4F                     557      TRAP #15
000014F6  227C 00007010            558      MOVE.L #OUTPUT_ADDRESS, A1
000014FC                           559  END_PRINT_HEX:
000014FC  4E75                     560      RTS
000014FE                           561  *-----------------------------------------------------------
000014FE                           562  * CONVERT HEX TO ASCII 
000014FE                           563  * PARAMATERS:
000014FE                           564  *   1- (8(SP)): VALUE IN HEX
000014FE                           565  *   2- (4(SP)): HOW MANY BYTES
000014FE                           566  * RETURN:
000014FE                           567  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
000014FE                           568  * D0 STORES HEX VALUE
000014FE                           569  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
000014FE                           570  * D1 COUNT LOOP
000014FE                           571  * D2 CONVERT TO ASCII
000014FE                           572  * D3 USE TO CALCULATE SHIFT
000014FE                           573  HEX_TO_ASCII: 
000014FE  202F 0008                574      MOVE.L 8(SP), D0 
00001502  282F 0004                575      MOVE.L 4(SP), D4
00001506  0C44 0004                576      CMPI #HEX_TO_ASCII_WORD, D4 
0000150A  6700 004E                577      BEQ HEX_TO_ASCII_SWAP
0000150E  0C44 0002                578      CMPI #HEX_TO_ASCII_BYTE, D4
00001512  6700 EAEE                579      BEQ HEX_TO_ASCII_BYTE
00001516                           580  HEX2ASCII_DONE_CONVERT:
00001516  4201                     581      CLR.B D1
00001518  227C 00007010            582      MOVE.L #OUTPUT_ADDRESS, A1
0000151E  =0000000F                583  HEX_MASKING EQU $0000000F
0000151E  =00000002                584  HEX_TO_ASCII_BYTE EQU $02
0000151E  =00000004                585  HEX_TO_ASCII_WORD EQU $04
0000151E  =00000008                586  HEX_TO_ASCII_LONG EQU $08
0000151E                           587  
0000151E                           588  HEX_TO_ASCII_LOOP:
0000151E  B204                     589      CMP.B D4, D1
00001520  6700 0032                590      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001524                           591  
00001524  E998                     592      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001526  2600                     593      MOVE.L D0,D3 ; copy the value to mask
00001528  C6BC 0000000F            594      AND.L #HEX_MASKING, D3  ; mask
0000152E                           595  
0000152E  0C03 000A                596      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001532  6D00 000C                597      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001536                           598  
00001536  0C03 0048                599      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000153A  6D00 000E                600      BLT HEX_TO_ASCII_LETTER
0000153E                           601  
0000153E  60DE                     602      BRA HEX_TO_ASCII_LOOP
00001540                           603  HEX_TO_ASCII_NUMBER:
00001540  0603 0030                604      ADD.B #48, D3  ; convert number to letter
00001544  12C3                     605      MOVE.B D3, (A1)+ ; push to return memory
00001546  5201                     606      ADDQ.B #$1, D1 ; add for loop count
00001548  60D4                     607      BRA HEX_TO_ASCII_LOOP ; loop back
0000154A                           608  HEX_TO_ASCII_LETTER:
0000154A  0603 0037                609      ADD.B #55, D3 ; convert A-F in ascii
0000154E  12C3                     610      MOVE.B D3, (A1)+ ; push to return memory
00001550  5201                     611      ADDQ.B #$1, D1 ; add to for loop count
00001552  60CA                     612      BRA HEX_TO_ASCII_LOOP ;loop back
00001554                           613  END_HEX_TO_ASCII:
00001554  12FC 0000                614      MOVE.B #0, (A1)+ ; add null terminated value
00001558  6090                     615      BRA GET_ASCII_FROM_HEX
0000155A                           616  HEX_TO_ASCII_SWAP:
0000155A  4840                     617      SWAP D0
0000155C  60B8                     618      BRA HEX2ASCII_DONE_CONVERT
0000155E                           619     
0000155E                           620  HEX_TO_ASCII_ROR:
0000155E  E098                     621      ROR.L #$08, D0
00001560  60B4                     622      BRA HEX2ASCII_DONE_CONVERT
00001562                           623  
00001562                           624  
00001562                           625  *-----------------------------------------------------------
00001562                           626  * CHECK IF THE VALUE IN HEX IS ODD 
00001562                           627  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
00001562                           628  * RETURN:
00001562                           629  *   0: IF IT IS EVEN
00001562                           630  *   1: IF IT IS ODD
00001562                           631  * NOTE:
00001562                           632  *   A0 IS FOR RETURN ADDRESS
00001562                           633  *   D0 IS FOR HEX VALUE
00001562                           634  CHECK_VALUE_IS_ODD:
00001562  =00000000                635  VALUE_IS_EVEN EQU $0
00001562  =00000001                636  VALUE_IS_ODD EQU $1
00001562  41F9 00009000            637      LEA RETURN_ADDRESS, A0
00001568  202F 0004                638      MOVE.L 4(SP), D0
0000156C  C0BC 0000FFFF            639      AND.L #$0000FFFF, D0
00001572  80FC 0002                640      DIVU.W #2, D0
00001576  4840                     641      SWAP D0      
00001578  0C40 0000                642      CMPI.W #0, D0
0000157C  6700 000C                643      BEQ CHECK_VALUE_IS_ODD_FAILED
00001580  30BC 0001                644      MOVE.W #VALUE_IS_ODD, (A0)
00001584  6000 0002                645      BRA END_CHECK_VALUE_IS_ODD
00001588                           646  END_CHECK_VALUE_IS_ODD:   
00001588  4E75                     647      RTS
0000158A                           648  
0000158A                           649  CHECK_VALUE_IS_ODD_FAILED:
0000158A  30BC 0000                650      MOVE.W #VALUE_IS_EVEN, (A0)
0000158E  60F8                     651      BRA END_CHECK_VALUE_IS_ODD
00001590                           652  *-----------------------------------------------------------
00001590                           653  * CONVERT ASCII TO HEX
00001590                           654  * PARAMETERS:
00001590                           655  *   1. LOCATION OF THE ASCII
00001590                           656  *   2. LENGTH OF THE ASCII
00001590                           657  *   3. MAXIMUM LENGTH (hex/ byte / long)
00001590                           658  * RETURN:
00001590                           659  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
00001590                           660  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
00001590                           661  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
00001590                           662  * NOTE:
00001590                           663  *    D0 FOR LENGTH OF ASCII
00001590                           664  *    D1 FOR LOOPING
00001590                           665  ; CURRENT INDEX
00001590                           666  *    D2 FOR THE VALUE IN ASCII OF THE DATA
00001590                           667  *    D3 FOR CONVERT FINAL RESULT
00001590                           668  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
00001590                           669  *    A0 LOCATION OF THE DATA   
00001590                           670  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
00001590                           671  ASCII_TO_HEX:
00001590  =00000001                672  ASCII_TO_HEX_RETURN_OK EQU $1
00001590  45F9 00009000            673      LEA RETURN_ADDRESS, A2
00001596  4252                     674      CLR.W (A2)
00001598  42AA 0002                675      CLR.L 2(A2)
0000159C  206F 000C                676      MOVE.L 12(SP),A0
000015A0                           677   ; LOCATION OF THE DATA
000015A0  202F 0008                678      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015A4  222F 0004                679      MOVE.L 4(SP), D1  ; MAX LENGTH
000015A8  B280                     680      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015AA  6D00 0076                681      BLT ASCII_TO_HEX_FAILED_0
000015AE  4281                     682      CLR.L D1 ; FOR LOOPING
000015B0                           683  ASCII_TO_HEX_LOOP:
000015B0  B081                     684     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015B2  6700 0068                685     BEQ ASCII_TO_HEX_END_LOOP
000015B6                           686     ; D2 USE FOR STORE DATA 
000015B6  1418                     687      MOVE.B (A0)+, D2
000015B8  0C02 002F                688      CMPI.B #47, D2
000015BC                           689  ASCII_TO_HEX_CHECK_GT_0
000015BC  6E00 0006                690      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
000015C0  6000 0066                691      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
000015C4                           692  ASCII_TO_HEX_CHECK_LT_9:
000015C4  0C02 003A                693      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
000015C8  6D00 001E                694      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
000015CC                           695      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
000015CC  6000 0002                696      BRA ASCII_TO_HEX_CHECK_GT_A
000015D0                           697  ASCII_TO_HEX_CHECK_GT_A:
000015D0  0C02 0040                698      CMPI.B #64, D2
000015D4  6E00 0006                699      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
000015D8  6000 004E                700      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
000015DC                           701  ASCII_TO_HEX_CHECK_LT_F
000015DC  0C02 0047                702      CMPI.B #71, D2
000015E0  6D00 0020                703      BLT ASCII_TO_HEX_CONVERT_LETTER
000015E4  6000 0042                704      BRA ASCII_TO_HEX_FAILED_2
000015E8                           705  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
000015E8                           706  ASCII_TO_HEX_CONVERT_NUMBER:
000015E8  2800                     707       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
000015EA  0402 0030                708       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
000015EE  9881                     709       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
000015F0  5344                     710       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
000015F2  C8FC 0004                711       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
000015F6  E9A2                     712       ASL.L D4, D2 ; SHIFT DATA
000015F8  D5AA 0002                713       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
000015FC  4282                     714       CLR.L D2
000015FE  5241                     715       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001600  60AE                     716       BRA ASCII_TO_HEX_LOOP
00001602                           717  ASCII_TO_HEX_CONVERT_LETTER:
00001602  2800                     718      MOVE.L D0, D4
00001604  0402 0037                719      SUB.B #55, D2
00001608  9881                     720      SUB.L D1,D4
0000160A  5344                     721      SUBQ #1, D4
0000160C  C8FC 0004                722      MULU #4, D4
00001610  E9A2                     723      ASL.L D4,D2
00001612  D5AA 0002                724      ADD.L D2, 2(A2)
00001616  4282                     725      CLR.L D2 
00001618  5241                     726      ADDQ #1, D1
0000161A  6094                     727      BRA ASCII_TO_HEX_LOOP
0000161C                           728  ASCII_TO_HEX_END_LOOP:
0000161C  34BC 0001                729      MOVE.W #1, (A2)
00001620  4E75                     730      RTS
00001622                           731      
00001622                           732  ASCII_TO_HEX_FAILED_0:
00001622  34BC 0002                733      MOVE.W #2, (A2)
00001626  4E75                     734      RTS
00001628                           735  ASCII_TO_HEX_FAILED_2:
00001628  34BC 0002                736      MOVE.W #2, (A2)
0000162C  4E75                     737      RTS 
0000162E                           738  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000162E                           739  * PARAMETERS:
0000162E                           740  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000162E                           741  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000162E                           742  * RETURN:
0000162E                           743  *   NULL
0000162E                           744  * NOTE:
0000162E                           745  *   A0 USE TO POINT TO THE ADDRESS
0000162E                           746  *   d1 USE TO MATH 
0000162E                           747  INCRASE_POINTER_START_ADDRESS: 
0000162E  206F 0008                748      MOVE.L 8(SP), A0
00001632  222F 0004                749      MOVE.L 4(SP), D1
00001636  D390                     750      ADD.L D1, (A0)
00001638  4E75                     751      RTS
0000163A                           752  
0000163A                           753  * FETCH 16 BIT FROM START_ADDRESS
0000163A                           754  * PARAMTERS: 
0000163A                           755  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000163A                           756  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000163A                           757  * RETURN:
0000163A                           758  *   NULL
0000163A                           759  * NOTE:
0000163A                           760  *     A0 USE TO STORE THE OPCODE LOCATION
0000163A                           761  *     A2 USES TO RETURN THE OPCODE
0000163A                           762  FETCH_OPCODES:
0000163A  206F 0008                763      MOVE.L 8(SP), A0 ; LOCATION
0000163E  246F 0004                764      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001642  3050                     765      MOVE.W (A0), A0
00001644  3488                     766      MOVE.W A0,(A2)
00001646  31FC 0002 7008           767      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000164C                           768  END_FETCH_OPCODES:
0000164C  4E75                     769      RTS
0000164E                           770  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000164E                           771  * LETS DECODE
0000164E                           772  * jump table uses to jump to decode subroutine
0000164E                           773  * PARAMATERS:
0000164E                           774  * 1-(4(Sp)) Word - opcode
0000164E                           775  * NOTE: 
0000164E                           776  *   D1 USES TO STORE OPCODE
0000164E                           777  JUMP_TABLE:
0000164E  322F 0004                778      MOVE.W 4(SP), D1
00001652  4EB9 00001696            779      JSR RTS
00001658  4EB9 0000168C            780      JSR NOP
0000165E  4EB9 000016A0            781      JSR JSR
00001664  4EB9 000016EC            782      JSR LEA
0000166A                           783      * JSR ORI
0000166A  4EB9 000018B0            784      JSR NEG
00001670  4EB9 000016A0            785      JSR JSR
00001676  4EB9 0000175A            786      JSR ADDA
0000167C  4EB9 000017DE            787      JSR ADD 
00001682  4EB9 000018F4            788      JSR BRA
00001688                           789  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
00001688                           790  END_JUMP_TABLE:
00001688  4EB8 11DE                791      JSR UNSUPPORT_REGISTER
0000168C                           792  NOP:
0000168C                           793  * constant for NOP 
0000168C  =00004E71                794  C_NOP EQU $4E71
0000168C  B27C 4E71                795      CMP.W #C_NOP, D1
00001690  6700 0322                796      BEQ PRINT_NOP
00001694  4E75                     797      RTS
00001696                           798  
00001696                           799  RTS:
00001696                           800  * constant for RTS 
00001696  =00004E75                801  C_RTS EQU $4E75
00001696  B27C 4E75                802      CMP.W #C_RTS, D1
0000169A  6700 02E8                803      BEQ PRINT_RTS
0000169E  4E75                     804      RTS
000016A0                           805  
000016A0                           806  JSR:
000016A0  =00004E80                807  JSR_OPCODE EQU %0100111010000000
000016A0  3401                     808      MOVE.W D1,D2 
000016A2                           809  * MASKING WITH UNIQUE OPCODE
000016A2  C47C FFC0                810      AND.W #%1111111111000000, D2
000016A6  B47C 4E80                811      CMP.W #JSR_OPCODE, D2
000016AA  6600 003E                812      BNE JSR_END 
000016AE                           813      ; check to make sure we support this register 
000016AE  3401                     814      MOVE.W D1, D2 
000016B0  C43C 003F                815      AND.B #%00111111, D2 
000016B4  3F02                     816      MOVE.W D2, -(SP)
000016B6  4EB8 11AC                817      JSR CHECK_SUPPORT_REGISTER 
000016BA  544F                     818      ADDQ #2, SP 
000016BC                           819      ; check return value
000016BC                           820      *  from print_register to see if it is unsupported register 
000016BC  3439 00009000            821      MOVE.W (RETURN_ADDRESS), D2 
000016C2  0C42 0002                822      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000016C6  6700 0022                823      BEQ JSR_END
000016CA                           824      ; done checking 
000016CA  4EB9 000019FA            825      JSR PRINT_JSR
000016D0                           826  * MASKING TO GET MODE AND REGISTER
000016D0  1401                     827      MOVE.B D1,D2
000016D2  C43C 003F                828      AND.B #%00111111, D2
000016D6  48A7 4000                829      MOVEM.W D1, -(SP)
000016DA  3F02                     830      MOVE.W D2, -(SP)
000016DC  3F3C 0000                831      MOVE.W #$0, -(SP)
000016E0  4EB8 1212                832      JSR PRINT_REGISTER
000016E4  5882                     833      ADDQ.L #4, D2
000016E6  4C9F 0002                834      MOVEM.W (SP)+, D1
000016EA                           835  JSR_END:
000016EA  4E75                     836      RTS
000016EC                           837  
000016EC                           838  LEA:
000016EC  3401                     839      MOVE.W D1,D2 
000016EE  C47C F1C0                840      AND.W  #%1111000111000000, D2
000016F2  0C42 41C0                841      CMPI.W #%0100000111000000, D2
000016F6  6600 0060                842      BNE LEA_END
000016FA                           843  
000016FA                           844      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000016FA  3401                     845      MOVE.W D1, D2 
000016FC  C43C 003F                846      AND.B #%00111111, D2 
00001700  3F02                     847      MOVE.W D2, -(SP)
00001702  4EB8 11AC                848      JSR CHECK_SUPPORT_REGISTER
00001706  544F                     849      ADDQ #2, SP 
00001708                           850      ; check return value
00001708                           851      *  from print_register to see if it is unsupported register 
00001708  3439 00009000            852      MOVE.W (RETURN_ADDRESS), D2 
0000170E  0C42 0002                853      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001712  6700 F934                854      BEQ FINISH_OPCODE
00001716                           855      * END CHECKING
00001716  4EB9 00001A0C            856      JSR PRINT_LEA
0000171C  1401                     857      MOVE.B D1,D2 
0000171E                           858      ; MASK TO GET MODE AND REGISTER
0000171E  C43C 003F                859      AND.B #%0000000000111111, D2
00001722  48A7 4000                860      MOVEM.W D1, -(SP)
00001726  3F02                     861      MOVE.W D2, -(SP)
00001728  3F3C 0000                862      MOVE.W #$0, -(SP)
0000172C  4EB8 1212                863      JSR PRINT_REGISTER
00001730  588F                     864      ADDQ.L #$4, SP
00001732  4C9F 0002                865      MOVEM.W (SP)+, D1
00001736  4EB8 10D2                866      JSR PRINT_COMMA
0000173A                           867      ; MASK TO GET DESTINATION REGISTER
0000173A  3401                     868      MOVE.W D1,D2
0000173C  C47C 0E00                869      AND.W #%0000111000000000, D2
00001740  E04A                     870      LSR.W #$08, D2
00001742  E24A                     871      LSR.W #$01, D2
00001744  843C 0008                872      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
00001748  3F02                     873      MOVE.W D2, -(SP)
0000174A  3F3C 0000                874      MOVE.W #$0, -(SP) 
0000174E  4EB8 1212                875      JSR PRINT_REGISTER
00001752  588F                     876      ADDQ.L #$04, SP
00001754  6000 F8F2                877      BRA FINISH_OPCODE
00001758                           878  LEA_END:
00001758  4E75                     879      RTS
0000175A                           880  
0000175A                           881  ADDA:
0000175A  =0000D0C0                882  C_ADDA EQU       %1101000011000000
0000175A  =0000F0C0                883  ADDA_MASKING EQU %1111000011000000
0000175A  =00000100                884  ADDA_SIZE_MASKING EQU %0000000100000000
0000175A  =00000E00                885  ADDA_AN_MASKING EQU %0000111000000000
0000175A  3401                     886      MOVE.W D1, D2
0000175C  C47C F0C0                887      AND.W #ADDA_MASKING, D2 ; GET PATTERN
00001760  0C42 D0C0                888      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
00001764  6600 0076                889      BNE ADDA_END 
00001768                           890      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001768  3401                     891      MOVE.W D1, D2 
0000176A  C43C 003F                892      AND.B #%00111111, D2 
0000176E  3F02                     893      MOVE.W D2, -(SP)
00001770  4EB8 11AC                894      JSR CHECK_SUPPORT_REGISTER
00001774  544F                     895      ADDQ #2, SP 
00001776                           896      ; check return value
00001776                           897      *  from print_register to see if it is unsupported register 
00001776  3439 00009000            898      MOVE.W (RETURN_ADDRESS), D2 
0000177C  0C42 0002                899      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001780  6700 F8C6                900      BEQ FINISH_OPCODE
00001784  4EB9 00001A1E            901      JSR PRINT_ADDA
0000178A  3401                     902      MOVE.W D1, D2  ; START TO MASK SIZE 
0000178C  C47C 0100                903      AND.W #ADDA_SIZE_MASKING,D2 
00001790  E04A                     904      LSR.W #8, D2 
00001792  3C02                     905      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
00001794  5246                     906      ADDQ #$1, D6
00001796  1F06                     907      MOVE.B D6 , -(SP)
00001798  4EB8 113A                908      JSR PRINT_DATA
0000179C  548F                     909      ADDQ.L #$2, SP 
0000179E  4EB8 10B4                910      JSR PRINT_TAB
000017A2                           911      ; GET MODE AND REGISTER
000017A2  3238 7006                912      MOVE.W (OPCODE_ADDRESS), D1 
000017A6  1401                     913      MOVE.B D1, D2 
000017A8  C43C 003F                914      AND.B #%00111111, D2 
000017AC  3F02                     915      MOVE.W D2, -(SP)
000017AE  3F06                     916      MOVE.W D6, -(SP)
000017B0  4EB8 1212                917      JSR PRINT_REGISTER 
000017B4  588F                     918      ADDQ.L #$04, SP 
000017B6  4EB8 10D2                919      JSR PRINT_COMMA
000017BA  3238 7006                920      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
000017BE  3401                     921      MOVE.W D1, D2
000017C0  C47C 0E00                922      AND.W #ADDA_AN_MASKING, D2
000017C4  E04A                     923      LSR.W #8, D2 
000017C6  E24A                     924      LSR.W #1, D2 
000017C8  843C 0008                925      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
000017CC  3F02                     926      MOVE.W D2, -(SP)
000017CE  3F3C 0000                927      MOVE.W #$0, -(SP)
000017D2  4EB8 1212                928      JSR PRINT_REGISTER 
000017D6  588F                     929      ADDQ.L #$4, SP 
000017D8  6000 F86E                930      BRA FINISH_OPCODE
000017DC                           931  ADDA_END:
000017DC  4E75                     932      RTS
000017DE                           933  
000017DE                           934  ADD: 
000017DE  =0000D000                935  C_ADD EQU %1101000000000000 ; PATTERN
000017DE  =0000F000                936  C_ADD_MASKING EQU %1111000000000000 ; MASKING TO CHECK PATTERN
000017DE  =0000003F                937  C_ADD_EA EQU %00111111 ; EFFECTIVE ADDRESS MASKING
000017DE  =00000E00                938  C_ADD_REGISTER EQU %0000111000000000 ; WHICH REGISTER
000017DE  =000001C0                939  C_ADD_SIZE EQU %0000000111000000  ; SIZE 
000017DE  =00000100                940  C_ADD_DIRECTION EQU %0000000100000000
000017DE  =00000000                941  C_ADD_TO_D EQU      %0000000000000000
000017DE  =00000100                942  C_ADD_FROM_D EQU    %0000000100000000
000017DE  3401                     943      MOVE.W D1, D2 
000017E0                           944      ; CHECK PATTERN 
000017E0  C47C F000                945      AND.W #C_ADD_MASKING, D2 
000017E4  0C42 D000                946      CMPI #C_ADD, D2 
000017E8  6600 00C4                947      BNE ADD_END 
000017EC                           948      ; CHECK SUPPORT REGISTER 
000017EC  3401                     949      MOVE.W D1, D2 
000017EE  C43C 003F                950      AND.B #%00111111, D2 
000017F2  3F02                     951      MOVE.W D2, -(SP)
000017F4  4EB8 11AC                952      JSR CHECK_SUPPORT_REGISTER
000017F8  544F                     953      ADDQ #2, SP 
000017FA                           954      ; check return value
000017FA                           955      *  from print_register to see if it is unsupported register 
000017FA  3439 00009000            956      MOVE.W (RETURN_ADDRESS), D2 
00001800  0C42 0002                957      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001804  6700 F842                958      BEQ FINISH_OPCODE
00001808                           959      
00001808  4EB9 00001A2C            960      JSR PRINT_ADD 
0000180E  3238 7006                961      MOVE.W (OPCODE_ADDRESS), D1 
00001812  3401                     962      MOVE.W D1, D2 
00001814  C47C 01C0                963      AND.W #C_ADD_SIZE, D2 
00001818  EC4A                     964      LSR.W #6, D2
0000181A  1C02                     965      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
0000181C                           966  
0000181C  1F02                     967      MOVE.B D2, -(SP)
0000181E  4EB8 113A                968      JSR PRINT_DATA
00001822  548F                     969      ADDQ.L #$02, SP 
00001824  4EB8 10B4                970      JSR PRINT_TAB 
00001828                           971      ; CHECK DIRECTION
00001828  3238 7006                972      MOVE.W (OPCODE_ADDRESS), D1 
0000182C  3401                     973      MOVE.W D1, D2  
0000182E  C47C 0100                974      AND.W #C_ADD_DIRECTION, D2 
00001832  0C42 0000                975      CMPI.W #C_ADD_TO_D, D2 
00001836  6700 003C                976      BEQ ADD_TO_D ; DN <EA> -> DN
0000183A                           977      ; otherwise from d 
0000183A                           978  ADD_FROM_D:
0000183A  3238 7006                979      MOVE.W (OPCODE_ADDRESS), D1 
0000183E  3401                     980      MOVE.W D1, D2 
00001840  C47C 0E00                981      AND.W #C_ADD_REGISTER, D2 
00001844  E08A                     982      LSR.L #8, D2 
00001846  E28A                     983      LSR.L #1, D2 
00001848  843C 0000                984      OR.B #%00000000, D2
0000184C  3F02                     985      MOVE.W D2, -(SP)
0000184E  3F3C 0000                986      MOVE.W #$0, -(SP)
00001852  4EB8 1212                987      JSR PRINT_REGISTER 
00001856  5882                     988      ADDQ.L #4, D2 
00001858  4EB8 10D2                989      JSR PRINT_COMMA 
0000185C                           990      
0000185C  3238 7006                991      MOVE.W (OPCODE_ADDRESS), D1 
00001860  3401                     992      MOVE.W D1, D2 
00001862  C43C 003F                993      AND.B #C_ADD_EA, D2 
00001866  3F02                     994      MOVE.W D2, -(SP)
00001868  3F06                     995      MOVE.W D6, -(SP)
0000186A  4EB8 1212                996      JSR PRINT_REGISTER
0000186E  588F                     997      ADDQ.L #4, SP 
00001870  6000 F7D6                998      BRA FINISH_OPCODE
00001874                           999      
00001874                          1000  ADD_TO_D:
00001874  3238 7006               1001      MOVE.W (OPCODE_ADDRESS), D1 
00001878  3401                    1002      MOVE.W D1, D2 
0000187A                          1003      ; GET SOURCE REGISTER 
0000187A  C43C 003F               1004      AND.B #C_ADD_EA, D2 
0000187E  3F02                    1005      MOVE.W D2, -(SP)
00001880  3F06                    1006      MOVE.W D6, -(SP)
00001882  4EB8 1212               1007      JSR PRINT_REGISTER
00001886  588F                    1008      ADDQ.L #4, SP 
00001888  4EB8 10D2               1009      JSR PRINT_COMMA 
0000188C                          1010      ; PRINT DATA REGISTER 
0000188C  3238 7006               1011      MOVE.W (OPCODE_ADDRESS), D1 
00001890  3401                    1012      MOVE.W D1, D2 
00001892  C47C 0E00               1013      AND.W #C_ADD_REGISTER, D2 
00001896  E04A                    1014      LSR.W #8, D2 
00001898  E24A                    1015      LSR.W #1, D2 
0000189A                          1016      ; APPEND MODE TO D2 FOR PRINT_REGISTER
0000189A  843C 0000               1017      OR.B #%00000000, D2 
0000189E  3F02                    1018      MOVE.W D2, -(SP)
000018A0  3F3C 0000               1019      MOVE.W #$0, -(SP)
000018A4  4EB8 1212               1020      JSR PRINT_REGISTER
000018A8  588F                    1021      ADDQ.L #4, SP 
000018AA  6000 F79C               1022      BRA FINISH_OPCODE
000018AE                          1023  
000018AE                          1024  ADD_END:
000018AE  4E75                    1025      RTS
000018B0                          1026  
000018B0                          1027  
000018B0                          1028  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
000018B0                          1029  NEG:
000018B0                          1030  * CONSTANT FOR NEG OPCODE
000018B0  =00004400               1031  NEG_OPCODE EQU %0100010000000000
000018B0  =0000FF00               1032  NEG_M      EQU %1111111100000000
000018B0  =0000003F               1033  NEG_REG_M  EQU %0000000000111111
000018B0  =000000C0               1034  NEG_SIZE_M EQU %0000000011000000
000018B0  3401                    1035      MOVE.W D1, D2
000018B2                          1036  * MASKING WITH NEG UNIQUE CODE
000018B2  C47C FF00               1037      AND.W #NEG_M, D2
000018B6  B47C 4400               1038      CMP.W #NEG_OPCODE, D2
000018BA  6600 0032               1039      BNE NEG_END
000018BE  4EB9 00001998           1040      JSR PRINT_NEG
000018C4                          1041      
000018C4  3401                    1042      MOVE.W D1, D2
000018C6                          1043  * MASKING TO GET NEG SIZE
000018C6  C47C 00C0               1044      AND.W #NEG_SIZE_M, D2
000018CA  EC42                    1045      ASR.W #6, D2
000018CC  3C02                    1046      MOVE.W D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
000018CE  1F06                    1047      MOVE.B D6, -(SP)
000018D0  4EB8 113A               1048      JSR PRINT_DATA
000018D4  548F                    1049      ADDQ.L #2, SP
000018D6  4EB8 10B4               1050      JSR PRINT_TAB
000018DA                          1051  
000018DA  3238 7006               1052      MOVE.W (OPCODE_ADDRESS), D1     
000018DE  3401                    1053      MOVE.W D1, D2
000018E0                          1054  * MASKING TO GET MODE AND REGISTER
000018E0  C47C 003F               1055      AND.W #NEG_REG_M, D2
000018E4  3F02                    1056      MOVE.W D2, -(SP)
000018E6  3F06                    1057      MOVE.W D6, -(SP)
000018E8  4EB8 1212               1058      JSR PRINT_REGISTER
000018EC  588F                    1059      ADDQ.L #$04, SP
000018EE                          1060  NEG_END: 
000018EE  4242                    1061      CLR.W D2
000018F0  4246                    1062      CLR.W D6
000018F2  4E75                    1063      RTS
000018F4                          1064  
000018F4                          1065  BRA:
000018F4                          1066  * CONSTANT FOR BRA OPCODE
000018F4  =00006000               1067  BRA_OPCODE EQU %0110000000000000
000018F4  =00006000               1068  BRA_M      EQU %0110000000000000
000018F4  =000000FF               1069  BRA_SIZE_M EQU %0000000011111111
000018F4  3401                    1070      MOVE.W D1, D2
000018F6                          1071  * MASKING WITH BRA UNIQUE CODE
000018F6  C47C 6000               1072      AND.W #BRA_M, D2
000018FA  B47C 6000               1073      CMP.W #BRA_OPCODE, D2
000018FE  6600 0010               1074      BNE BRA_END
00001902  4EB9 000019A6           1075      JSR PRINT_BRA
00001908  3401                    1076      MOVE.W D1, D2
0000190A  3601                    1077      MOVE.W D1, D3
0000190C                          1078  * MASKING TO GET SIZE OF BRA
0000190C  B47C 00FF               1079      CMP.W #BRA_SIZE_M, D2 
00001910                          1080  BRA_END:
00001910  4E75                    1081      RTS
00001912                          1082  
00001912                          1083  * OR:
00001912                          1084  * * CONSTANT FOR OR OPCODE
00001912                          1085  * OR_OPCODE EQU %
00001912                          1086  * OR_M      EQU %
00001912                          1087  * OR_SIZE_M EQU %
00001912                          1088  *     MOVE.W D1, D2
00001912                          1089  * * MASKING WITH OR UNIQUE CODE
00001912                          1090  *     AND.W #OR_M, D2
00001912                          1091  *     CMP.W #OR_OPCODE, D2
00001912                          1092  *     BNE OR_END
00001912                          1093  *     JSR PRINT_OR
00001912                          1094  *     MOVE.W D1, D2
00001912                          1095  *     MOVE.W D1, D3
00001912                          1096  * * MASKING TO GET SIZE OF OR
00001912                          1097  *     CMP.W #OR_SIZE_M, D2 
00001912                          1098  * OR_END:
00001912                          1099  *     RTS
00001912                          1100  
00001912                          1101  ORI:
00001912                          1102  * CONSTANT FOR ORI OPCODE
00001912  =00000000               1103  ORI_OPCODE EQU %0000000000000000
00001912  =00000000               1104  ORI_M      EQU %0000000000000000
00001912  =0000003F               1105  ORI_REG_M  EQU %0000000000111111
00001912  =000000C0               1106  ORI_SIZE_M EQU %0000000011000000
00001912  3401                    1107      MOVE.W D1, D2
00001914                          1108  * MASKING WITH ORI UNIQUE CODE
00001914  C47C 0000               1109      AND.W #ORI_M, D2
00001918  B47C 0000               1110      CMP.W #ORI_OPCODE, D2
0000191C  6600 005A               1111      BNE ORI_END
00001920  4EB9 000019D0           1112      JSR PRINT_ORI
00001926                          1113      
00001926  3238 7006               1114      MOVE.W (OPCODE_ADDRESS), D1
0000192A  3401                    1115      MOVE.W D1, D2
0000192C                          1116  * MASKING TO GET SIZE OF ORI
0000192C  C47C 00C0               1117      AND.W #ORI_SIZE_M, D2 
00001930  EC42                    1118      ASR.W #6, D2
00001932  3C02                    1119      MOVE.W D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001934  1F06                    1120      MOVE.B D6, -(SP)
00001936  4EB8 113A               1121      JSR PRINT_DATA
0000193A  548F                    1122      ADDQ.L #2, SP
0000193C  4EB8 10B4               1123      JSR PRINT_TAB
00001940                          1124  
00001940                          1125   ORI_CONT:   
00001940  3236 4000               1126      MOVE.W (A6, D4.W), D1     
00001944  3401                    1127      MOVE.W D1, D2
00001946  3A01                    1128      MOVE.W D1, D5
00001948                          1129  * MASKING WITH ORI UNIQUE CODE TO CHECK IF IT IS STILL ORI INSTRUCTION
00001948  C47C 0000               1130      AND.W #ORI_M, D2
0000194C  B47C 0000               1131      CMP.W #ORI_OPCODE, D2
00001950  6600 0026               1132      BNE ORI_END
00001954                          1133  * MASKING TO GET MODE AND REGISTER
00001954  3205                    1134      MOVE.W D5, D1
00001956  3405                    1135      MOVE.W D5, D2
00001958  C47C 003F               1136      AND.W #ORI_REG_M, D2
0000195C  3F02                    1137      MOVE.W D2, -(SP)
0000195E  3F06                    1138      MOVE.W D6, -(SP)
00001960  4EB8 1212               1139      JSR PRINT_REGISTER
00001964  588F                    1140      ADDQ.L #$04, SP
00001966  5444                    1141      ADDQ.W #2, D4 * FOR INCREMENTING OFFSET IN THE OPCODE
00001968                          1142  
00001968  5203                    1143      ADDQ.B #1, D3 * FOR PRINTING COMMA ONCE
0000196A  0C43 0001               1144      CMPI #1, D3
0000196E  6F00 0004               1145      BLE PRINT_1_COMMA
00001972  60CC                    1146      BRA ORI_CONT
00001974                          1147  
00001974                          1148  PRINT_1_COMMA:
00001974  4EB8 10D2               1149      JSR PRINT_COMMA
00001978                          1150      
00001978                          1151  *     MOVE.W (OPCODE_ADDRESS)+, D1
00001978                          1152  *     MOVE.W D1, D2
00001978                          1153  * * MASKING TO GET THE DATA TO BE ADDED TO THE REGISTER
00001978                          1154  *     AND.W #ORI_REG_M, D2
00001978                          1155  *     MOVE.W D2, -(SP)
00001978                          1156  *     MOVE.W #0, -(SP)
00001978                          1157  *     JSR PRINT_REGISTER
00001978                          1158  *     ADDQ.L #$04, SP
00001978                          1159  
00001978                          1160  *     MOVE.W D2, -(SP)
00001978                          1161  *     MOVE.W #$0, -(SP)
00001978                          1162  *     JSR PRINT_REGISTER 
00001978                          1163  *     ADDQ.L #$4, SP 
00001978                          1164  ORI_END:
00001978  4242                    1165      CLR.W D2
0000197A  4243                    1166      CLR.W D3
0000197C  4244                    1167      CLR.W D4
0000197E  4245                    1168      CLR.W D5
00001980  4246                    1169      CLR.W D6
00001982  4E75                    1170      RTS
00001984                          1171  
00001984                          1172  * ROR:
00001984                          1173  * * CONSTANT FOR ROR OPCODE
00001984                          1174  * ROR_OPCODE EQU %
00001984                          1175  * ROR_M      EQU %
00001984                          1176  * ROR_SIZE_M EQU %
00001984                          1177  *     CLR.W D2
00001984                          1178  *     MOVE.W D1, D2
00001984                          1179  * * MASKING WITH ROR UNIQUE CODE
00001984                          1180  *     AND.W #ROR_M, D2
00001984                          1181  *     CMP.W #ROR_OPCODE, D2
00001984                          1182  *     BNE ROR_END
00001984                          1183  *     JSR PRINT_ROR
00001984                          1184  *     MOVE.W D1, D2
00001984                          1185  *     MOVE.W D1, D3
00001984                          1186  * * MASKING TO GET SIZE OF ROR
00001984                          1187  *     CMP.W #ROR_SIZE_M, D2 
00001984                          1188  * ROR_END:
00001984                          1189  *     RTS
00001984                          1190  
00001984                          1191  * ROL:
00001984                          1192  * * CONSTANT FROR ROL OPCODE
00001984                          1193  * ROL_OPCODE EQU %
00001984                          1194  * ROL_M      EQU %
00001984                          1195  * ROL_SIZE_M EQU %
00001984                          1196  *     CLR.W D2
00001984                          1197  *     MOVE.W D1, D2
00001984                          1198  * * MASKING WITH ROL UNIQUE CODE
00001984                          1199  *     AND.W #ROL_M, D2
00001984                          1200  *     CMP.W #ROL_OPCODE, D2
00001984                          1201  *     BNE ROL_END
00001984                          1202  *     JSR PRINT_ROL
00001984                          1203  *     MOVE.W D1, D2
00001984                          1204  *     MOVE.W D1, D3
00001984                          1205  * * MASKING TO GET SIZE OF ROL
00001984                          1206  *     CMP.W #ROL_SIZE_M, D2 
00001984                          1207  * ROL_END:
00001984                          1208  *     RTS
00001984                          1209  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001984                          1210  
00001984                          1211  
00001984                          1212  PRINT_RTS:
00001984  43F9 00001A48           1213      LEA P_RTS, A1
0000198A  103C 000E               1214      MOVE.B #14, D0
0000198E  4E4F                    1215      TRAP #15
00001990  4EB8 10B4               1216      JSR PRINT_TAB
00001994  6000 F6B2               1217      BRA FINISH_OPCODE
00001998                          1218  PRINT_NEG:
00001998  43F9 00001A88           1219      LEA P_NEG, A1
0000199E  103C 000E               1220      MOVE.B #14, D0
000019A2  4E4F                    1221      TRAP #15
000019A4  4E75                    1222      RTS 
000019A6                          1223  PRINT_BRA:
000019A6  43F9 00001AC6           1224      LEA P_BRA, A1
000019AC  103C 000E               1225      MOVE.B #14, D0
000019B0  4E4F                    1226      TRAP #15
000019B2  4E75                    1227      RTS 
000019B4                          1228  PRINT_NOP:
000019B4  43F9 00001A4C           1229      LEA P_NOP, A1
000019BA  103C 000E               1230      MOVE.B #14, D0
000019BE  4E4F                    1231      TRAP #15
000019C0  4E75                    1232      RTS 
000019C2                          1233  PRINT_OR:
000019C2  43F9 00001A81           1234      LEA P_OR, A1
000019C8  103C 000E               1235      MOVE.B #14, D0
000019CC  4E4F                    1236      TRAP #15
000019CE  4E75                    1237      RTS 
000019D0                          1238  PRINT_ORI:
000019D0  43F9 00001A84           1239      LEA P_ORI, A1
000019D6  103C 000E               1240      MOVE.B #14, D0
000019DA  4E4F                    1241      TRAP #15
000019DC  4E75                    1242      RTS
000019DE                          1243  PRINT_ROL:
000019DE  43F9 00001AA0           1244      LEA P_ROL, A1
000019E4  103C 000E               1245      MOVE.B #14, D0
000019E8  4E4F                    1246      TRAP #15
000019EA  4E75                    1247      RTS 
000019EC                          1248  PRINT_ROR:
000019EC  43F9 00001AA4           1249      LEA P_ROR, A1
000019F2  103C 000E               1250      MOVE.B #14, D0
000019F6  4E4F                    1251      TRAP #15
000019F8  4E75                    1252      RTS 
000019FA                          1253  PRINT_JSR:
000019FA  43F9 00001ACA           1254      LEA P_JSR, A1
00001A00  103C 000E               1255      MOVE.B #14, D0
00001A04  4E4F                    1256      TRAP #15
00001A06  4EB8 10B4               1257      JSR PRINT_TAB
00001A0A  4E75                    1258      RTS 
00001A0C                          1259  PRINT_LEA:
00001A0C  43F9 00001A7D           1260      LEA P_LEA, A1
00001A12  103C 000E               1261      MOVE.B #14, D0
00001A16  4E4F                    1262      TRAP #15
00001A18  4EB8 10B4               1263      JSR PRINT_TAB
00001A1C  4E75                    1264      RTS 
00001A1E                          1265  PRINT_ADDA: 
00001A1E  43F9 00001A65           1266      LEA P_ADDA, A1 
00001A24  103C 000E               1267      MOVE.B #14, D0
00001A28  4E4F                    1268      TRAP #15 
00001A2A  4E75                    1269      RTS
00001A2C                          1270  PRINT_ADD:
00001A2C  43F9 00001A61           1271      LEA P_ADD, A1 
00001A32  103C 000E               1272      MOVE.B #14, D0 
00001A36  4E4F                    1273      TRAP #15
00001A38  4E75                    1274      RTS
00001A3A                          1275  PRINT_UNSUPPORTED: 
00001A3A  43F9 00001ACE           1276      LEA P_DATA, A1 
00001A40  103C 000E               1277      MOVE.B #14, D0 
00001A44  4E4F                    1278      TRAP #15 
00001A46  4E75                    1279      RTS 
00001A48                          1280  
00001A48                          1281  
00001A48                          1282  
00001A48                          1283  
00001A48                          1284  
00001A48                          1285  
00001A48                          1286  
00001A48                          1287  
00001A48                          1288  
00001A48= 52 54 53 00             1289  P_RTS DC.B 'RTS',0
00001A4C= 4E 4F 50 00             1290  P_NOP DC.B 'NOP',0
00001A50= 4D 4F 56 45 00          1291  P_MOVE DC.B 'MOVE',0
00001A55= 4D 4F 56 45 41 00       1292  P_MOVEA DC.B 'MOVEA', 0
00001A5B= 4D 4F 56 45 4D 00       1293  P_MOVEM DC.B 'MOVEM', 0
00001A61= 41 44 44 00             1294  P_ADD DC.B 'ADD', 0
00001A65= 41 44 44 41 00          1295  P_ADDA DC.B 'ADDA',0
00001A6A= 53 55 42 00             1296  P_SUB DC.B 'SUB', 0
00001A6E= 53 55 42 51 00          1297  P_SUBQ DC.B 'SUBQ',0
00001A73= 4D 55 4C 53 00          1298  P_MULS DC.B 'MULS',0
00001A78= 44 49 56 53 00          1299  P_DIVS DC.B 'DIVS',0
00001A7D= 4C 45 41 00             1300  P_LEA DC.B 'LEA',0
00001A81= 4F 52 00                1301  P_OR DC.B 'OR',0
00001A84= 4F 52 49 00             1302  P_ORI DC.B 'ORI', 0
00001A88= 4E 45 47 00             1303  P_NEG DC.B 'NEG', 0
00001A8C= 45 4F 52 00             1304  P_EOR DC.B 'EOR', 0
00001A90= 4C 53 52 00             1305  P_LSR DC.B 'LSR',0
00001A94= 4C 53 4C 00             1306  P_LSL DC.B 'LSL', 0
00001A98= 41 53 52 00             1307  P_ASR DC.B 'ASR', 0
00001A9C= 41 53 4C 00             1308  P_ASL DC.B 'ASL',0 
00001AA0= 52 4F 4C 00             1309  P_ROL DC.B 'ROL', 0
00001AA4= 52 4F 52 00             1310  P_ROR DC.B 'ROR', 0
00001AA8= 42 43 4C 52 00          1311  P_BCLR DC.B 'BCLR',0
00001AAD= 43 4D 50 00             1312  P_CMP DC.B 'CMP', 0
00001AB1= 43 4D 50 49 00          1313  P_CMPI DC.B 'CMPI', 0
00001AB6= 42 43 53 00             1314  P_BCS DC.B 'BCS', 0
00001ABA= 42 47 45 00             1315  P_BGE DC.B 'BGE', 0
00001ABE= 42 4C 54 00             1316  P_BLT DC.B 'BLT',0
00001AC2= 42 56 43 00             1317  P_BVC DC.B 'BVC', 0
00001AC6= 42 52 41 00             1318  P_BRA DC.B 'BRA',0
00001ACA= 4A 53 52 00             1319  P_JSR DC.B 'JSR',0
00001ACE= 44 41 54 41 00          1320  P_DATA DC.B 'DATA',0
00001AD3                          1321  * P_RTS DC.B 'RTS',0
00001AD3                          1322  
00001AD3                          1323  
00001AD3  =00000004               1324  WORD_LENGTH EQU $04
00001AD3  =00000008               1325  LONG_LENGTH EQU $08
00001AD3= 31 30 30 32 30 30 ...   1326  TEST_VAL DC.B '10020009'
00001ADB  =0000000A               1327  LF EQU $0A
00001ADB  =0000000D               1328  CR EQU $0D
00001ADB  =00000009               1329  HT  EQU  $09 
00001ADB= 20 0D 0A 00             1330  NEW_LINE DC.B ' ',CR,LF,0
00001ADF                          1331  SIMHALT             ; halt simulator
00001ADF                          1332  * Put variables and constants here
00001ADF                          1333  
00001ADF                          1334  
00001ADF                          1335  
00001ADF                          1336  
00001ADF                          1337  
00001ADF                          1338  
00001ADF= 50 6C 65 61 73 65 ...   1339  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001B0E= 50 6C 65 61 73 65 ...   1340  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
00001B3B= 50 72 65 73 73 20 ...   1341  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00001B55                          1342      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 17DE
ADDA                175A
ADDA_AN_MASKING     E00
ADDA_END            17DC
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             18AE
ADD_FROM_D          183A
ADD_TO_D            1874
ASCII_TO_HEX        1590
ASCII_TO_HEX_CHECK_GT_0  15BC
ASCII_TO_HEX_CHECK_GT_A  15D0
ASCII_TO_HEX_CHECK_LT_9  15C4
ASCII_TO_HEX_CHECK_LT_F  15DC
ASCII_TO_HEX_CONVERT_LETTER  1602
ASCII_TO_HEX_CONVERT_NUMBER  15E8
ASCII_TO_HEX_END_LOOP  161C
ASCII_TO_HEX_FAILED_0  1622
ASCII_TO_HEX_FAILED_2  1628
ASCII_TO_HEX_LOOP   15B0
ASCII_TO_HEX_RETURN_OK  1
BRA                 18F4
BRA_END             1910
BRA_M               6000
BRA_OPCODE          6000
BRA_SIZE_M          FF
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  1562
CHECK_VALUE_IS_ODD_FAILED  158A
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  125A
CONTINUE_PRINT_RE_NUMBER  1276
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          1C0
C_ADD_TO_D          0
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_PRINT_NUMBER   1294
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  1588
END_FETCH_OPCODES   164C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1554
END_JUMP_TABLE      1688
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       14FC
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12BE
END_PRINT_TAB       10CA
FETCH_OPCODES       163A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  14EA
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1516
HEX_MASKING         F
HEX_TO_ASCII        14FE
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  154A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   151E
HEX_TO_ASCII_NUMBER  1540
HEX_TO_ASCII_ROR    155E
HEX_TO_ASCII_SWAP   155A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  162E
JSR                 16A0
JSR_END             16EA
JSR_OPCODE          4E80
JUMP_TABLE          164E
LEA                 16EC
LEA_END             1758
LF                  A
LONG_LENGTH         8
LOOP_START          100E
MAIN                108E
NEG                 18B0
NEG_END             18EE
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1ADB
NOP                 168C
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
ORI                 1912
ORI_CONT            1940
ORI_END             1978
ORI_M               0
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OUTPUT_ADDRESS      7010
PRINT_1_COMMA       1974
PRINT_A             14CC
PRINT_AB_LONG       13E8
PRINT_AB_SHORT      1386
PRINT_ADD           1A2C
PRINT_ADDA          1A1E
PRINT_BRA           19A6
PRINT_BYTE          1164
PRINT_CLOSE         147E
PRINT_CLOSE_PLUS    1498
PRINT_COMMA         10D2
PRINT_D             14B2
PRINT_DATA          113A
PRINT_DOLLAR_SIGN   10EA
PRINT_HASH_SIGN     1102
PRINT_HEX           14E6
PRINT_IMMEDIATE     12C0
PRINT_IMMEDIATE_BYTE  12FC
PRINT_IMMEDIATE_LONG  1352
PRINT_IMMEDIATE_WORD  1326
PRINT_JSR           19FA
PRINT_LEA           1A0C
PRINT_LONG          117C
PRINT_MINUS_OPEN    1464
PRINT_NEG           1998
PRINT_NEW_LINE      111A
PRINT_NOP           19B4
PRINT_OPEN          144A
PRINT_OR            19C2
PRINT_ORI           19D0
PRINT_PC            1188
PRINT_REGISTER      1212
PRINT_ROL           19DE
PRINT_ROR           19EC
PRINT_RTS           1984
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1A3A
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  1B3B
PROMT_INPUT_END     1B0E
PROMT_INPUT_START   1ADF
P_ADD               1A61
P_ADDA              1A65
P_ASL               1A9C
P_ASR               1A98
P_BCLR              1AA8
P_BCS               1AB6
P_BGE               1ABA
P_BLT               1ABE
P_BRA               1AC6
P_BVC               1AC2
P_CMP               1AAD
P_CMPI              1AB1
P_DATA              1ACE
P_DIVS              1A78
P_EOR               1A8C
P_JSR               1ACA
P_LEA               1A7D
P_LSL               1A94
P_LSR               1A90
P_MOVE              1A50
P_MOVEA             1A55
P_MOVEM             1A5B
P_MULS              1A73
P_NEG               1A88
P_NOP               1A4C
P_OR                1A81
P_ORI               1A84
P_ROL               1AA0
P_ROR               1AA4
P_RTS               1A48
P_SUB               1A6A
P_SUBQ              1A6E
RETURN_ADDRESS      9000
RTS                 1696
SIMHALT             1ADF
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
TEST_VAL            1AD3
UNSUPPORT_REGISTER  11DE
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
