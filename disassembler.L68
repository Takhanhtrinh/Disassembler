00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 11:44:41 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : HEX DUMP Disassembler
00000000                             3  * Written by : Trinh Ta and Leo Le
00000000                             4  * Date       : 11/20/2018
00000000                             5  * Description: This is the final project of CSS 422
00000000                             6  *              This disassembler will take in the starting address
00000000                             7  *              and ending address of the user, then will start 
00000000                             8  *              disassemble the data within that specific section
00000000                             9  *              into assembly code and output back to the user.
00000000                            10  *              Each page will have a limit of offset in the 
00000000                            11  *              memory, so to move forward, press ENTER to get
00000000                            12  *              the next data page.
00000000                            13  *              The program will go on until it reaches the end
00000000                            14  *              of the ending address provided.
00000000                            15  *-----------------------------------------------------------
00001000                            16      ORG    $1000
00001000                            17  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                 18  OUTPUT_ADDRESS EQU $7010
00001000                            19  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 20  RETURN_ADDRESS EQU $9000
00001000                            21  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 22  START_ADDRESS EQU $09100
00001000                            23  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 24  END_ADDRESS EQU $7004
00001000                            25  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 26  OPCODE_ADDRESS EQU $7006
00001000                            27  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            28  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            29  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            30  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 31  OFFSET_OPC_ADDRES EQU $7008 
00001000                            32  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 33  SIZE_OPCODE EQU $700A
00001000                            34  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 35  STORE_REGISTER_ADDRESS EQU $700C
00001000                            36  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 37  STACK_ADDRESS EQU $8000
00001000                            38  START:                  ; first instruction of program
00001000                            39      * MOVE.L #$10AF241B, -(SP)
00001000                            40      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            41      * JSR PRINT_HEX
00001000                            42      * ADDQ.L #$08, SP
00001000                            43  
00001000                            44      * JSR PRINT_NEW_LINE
00001000                            45  
00001000                            46      * JSR PRINT_TAB
00001000                            47      * A0
00001000                            48  *     MOVE.L #%0000011100000100, D1
00001000                            49  *     MOVE.L D1, -(SP)
00001000                            50  *     JSR PRINT_REGISTER
00001000                            51  *     ADDQ.L #4, SP
00001000                            52  *     * A1
00001000                            53  *     MOVE.W #%0100, D1
00001000                            54  *     SWAP D1
00001000                            55  *     MOVE.W #$1, D1
00001000                            56  *     MOVE.L D1, -(SP)
00001000                            57  *     JSR PRINT_REGISTER
00001000                            58  *     ADDQ.L #4, SP
00001000                            59  * * A2
00001000                            60  *     MOVE.W #%0011, D1
00001000                            61  *     SWAP D1
00001000                            62  *     MOVE.W #$2, D1
00001000                            63  *     MOVE.L D1, -(SP)
00001000                            64  *     JSR PRINT_REGISTER
00001000                            65  *     ADDQ.L #4, SP
00001000                            66  * * A3
00001000                            67  *     MOVE.W #%0011, D1
00001000                            68  *     SWAP D1
00001000                            69  *     MOVE.W #$3, D1
00001000                            70  *     MOVE.L D1, -(SP)
00001000                            71  *     JSR PRINT_REGISTER
00001000                            72  *     ADDQ.L #4, SP
00001000                            73  * * A4
00001000                            74  *     MOVE.W #%0011, D1
00001000                            75  *     SWAP D1
00001000                            76  *     MOVE.W #$4, D1
00001000                            77  *     MOVE.L D1, -(SP)
00001000                            78  *     JSR PRINT_REGISTER
00001000                            79  *     ADDQ.L #4, SP
00001000                            80  * * A5
00001000                            81  *     MOVE.W #%0011, D1
00001000                            82  *     SWAP D1
00001000                            83  *     MOVE.W #$5, D1
00001000                            84  *     MOVE.L D1, -(SP)
00001000                            85  *     JSR PRINT_REGISTER
00001000                            86  *     ADDQ.L #4, SP
00001000                            87  * * A6
00001000                            88  *     MOVE.W #%0011, D1
00001000                            89  *     SWAP D1
00001000                            90  *     MOVE.W #$6, D1
00001000                            91  *     MOVE.L D1, -(SP)
00001000                            92  *     JSR PRINT_REGISTER
00001000                            93  *     ADDQ.L #4, SP
00001000                            94  * * A7
00001000                            95  *     MOVE.W #%0011, D1
00001000                            96  *     SWAP D1
00001000                            97  *     MOVE.W #$7, D1
00001000                            98  *     MOVE.L D1, -(SP)
00001000                            99  *     JSR PRINT_REGISTER
00001000                           100  *     ADDQ.L #4, SP
00001000                           101  
00001000                           102      * JSR PRINT_COMMA
00001000                           103      * JSR PRINT_DOLLAR_SIGN
00001000                           104      * JSR PRINT_HASH_SIGN
00001000                           105      * MOVE.B #$01, -(SP)
00001000                           106      * JSR PRINT_DATA
00001000                           107      * ADDQ.L #$2,SP
00001000                           108      * MOVE.B #$02, -(SP)
00001000                           109      * JSR PRINT_DATA
00001000                           110      * ADDQ.L #$2, SP
00001000                           111      * MOVE.B #$03, -(SP)
00001000                           112      * JSR PRINT_DATA
00001000                           113      * ADDQ.L #$2,SP
00001000                           114   
00001000  4207                     115      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            116      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            117      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            118      MOVE.L #$010000, (A0)
00001014                           119  LOOP_START:
00001014  2E7C 00008000            120      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            121      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            122      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000167A            123      JSR FETCH_OPCODES
0000102C  508F                     124      ADDQ.L #8, SP
0000102E  4EB9 000010B4            125      JSR PRINT_TAB
00001034  4EB9 00001188            126      JSR PRINT_PC
0000103A  207C 00007006            127      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     128      MOVE.W (A0), -(SP)
00001042  4EB9 0000168E            129      JSR JUMP_TABLE
00001048                           130  FINISH_OPCODE:
00001048  4280                     131      CLR.L D0
0000104A  23FC 00000000 00009000   132      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                133      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            134      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            135      JSR PRINT_NEW_LINE
00001064  5207                     136      ADDQ.B #1, D7 
00001066  0C07 001D                137      CMPI.B #29, D7 
0000106A  6700 0004                138      BEQ CLR_SCREEN
0000106E  60A4                     139      BRA LOOP_START
00001070                           140  
00001070                           141  CLR_SCREEN:
00001070  43F9 0000202B            142      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                143      MOVE.B #13, D0 
0000107A  4E4F                     144      TRAP #15 
0000107C  4207                     145      CLR.B D7
0000107E  103C 0005                146      MOVE.B #5, D0 
00001082  4E4F                     147      TRAP #15 
00001084  0C01 000D                148      CMPI.B #$0D, D1 
00001088  678A                     149      BEQ LOOP_START
0000108A  6000 0002                150      BRA END_MAIN
0000108E                           151  
0000108E                           152  * Put program code here
0000108E                           153  MAIN:
0000108E                           154  
0000108E                           155  END_MAIN:
0000108E  103C 0009                156      MOVE.B #9, D0
00001092  4E4F                     157      TRAP #15
00001094  103C 000E                158      MOVE.B #14,D0
00001098  4E4F                     159      TRAP #15
0000109A                           160  * get user input 
0000109A                           161  GET_INPUT:
0000109A  43F9 00001FCF            162      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                163      MOVE.B #13, D0
000010A4  4E4F                     164      TRAP #15
000010A6  227C 00002000            165      MOVEA.L #$2000,A1
000010AC  103C 0002                166      MOVE.B #2, D0
000010B0  4E4F                     167      TRAP #15
000010B2                           168  END_GET_INPUT:
000010B2  4E75                     169      RTS   
000010B4                           170  
000010B4                           171  *--------------------------------------------------------------------
000010B4                           172  * PRINT_TAB 
000010B4                           173  PRINT_TAB: 
000010B4  227C 00007010            174      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            175      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                176      MOVE.B #0, (A1)+
000010C4  227C 00007010            177      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           178  END_PRINT_TAB:
000010CA  103C 000E                179      MOVE.B #14, D0
000010CE  4E4F                     180      TRAP #15
000010D0  4E75                     181      RTS
000010D2                           182  *--------------------------------------------------------------------
000010D2                           183  * PRINT_COMMA
000010D2                           184  PRINT_COMMA:
000010D2  227C 00007010            185      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                186      MOVE.W #', ', (A1)+
000010DC  12BC 0000                187      MOVE.B #0, (A1)
000010E0  5589                     188      SUBQ.L #2, A1
000010E2                           189  END_PRINT_COMMA:
000010E2  103C 000E                190      MOVE.B #14, D0
000010E6  4E4F                     191      TRAP #15
000010E8  4E75                     192      RTS
000010EA                           193  *--------------------------------------------------------------------
000010EA                           194  * PRINT_DOLLAR_SIGN
000010EA                           195  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            196      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                197      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           198      MOVE.B #0, 1(A1) 
000010FA                           199  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                200      MOVE.B #14, D0
000010FE  4E4F                     201      TRAP #15
00001100  4E75                     202      RTS
00001102                           203  *--------------------------------------------------------------------
00001102                           204  * PRINT_HASH_SIGN
00001102                           205  PRINT_HASH_SIGN:
00001102  227C 00007010            206      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                207      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           208      MOVE.B #0, 1(A1) 
00001112                           209  END_PRINT_HASH_SIGN:
00001112  103C 000E                210      MOVE.B #14, D0
00001116  4E4F                     211      TRAP #15
00001118  4E75                     212      RTS
0000111A                           213  
0000111A                           214  *--------------------------------------------------------------------
0000111A                           215  * PRINT A NEW LINE 
0000111A                           216  PRINT_NEW_LINE: 
0000111A  227C 00007010            217      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                218      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                219      MOVE.B #LF, (A1)+
00001128  12FC 0000                220      MOVE.B #0, (A1)+
0000112C                           221  END_PRINT_NEW_LINE:
0000112C  227C 00007010            222      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                223      MOVE.B #14, D0
00001136  4E4F                     224      TRAP #15 
00001138  4E75                     225      RTS
0000113A                           226  
0000113A                           227  
0000113A                           228  
0000113A                           229  
0000113A                           230  *--------------------------------------------------------------------
0000113A                           231  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           232  * PARAMETERS: 
0000113A                           233   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           234  *       00 - byte
0000113A                           235  *       01 - word
0000113A                           236  *       10 - long
0000113A                           237  * NOTE:
0000113A                           238  *   A1 USE FOR PRINT
0000113A                           239  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           240  PRINT_DATA:
0000113A  227C 00007010            241      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                242      MOVE.B 4(SP), D1
00001144  0C01 0000                243      CMPI.B #$00, D1
00001148  6700 001A                244      BEQ PRINT_BYTE
0000114C  0C01 0001                245      CMPI.B #$01, D1
00001150  6700 001E                246      BEQ PRINT_WORD
00001154  0C01 0002                247      CMPI.B #$02, D1 
00001158  6700 0022                248      BEQ PRINT_LONG
0000115C                           249  END_PRINT_DATA:
0000115C  103C 000E                250      MOVE.B #14, D0
00001160  4E4F                     251      TRAP #15
00001162  4E75                     252      RTS 
00001164                           253  
00001164                           254  PRINT_BYTE: 
00001164  32BC 2E42                255      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           256      MOVE.B #0, 2(A1)
0000116E  60EC                     257      BRA END_PRINT_DATA
00001170                           258  PRINT_WORD: 
00001170  32BC 2E57                259      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           260      MOVE.B #0, 2(A1)
0000117A  60E0                     261      BRA END_PRINT_DATA
0000117C                           262  PRINT_LONG: 
0000117C  32BC 2E4C                263      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           264      MOVE.B #0, 2(A1)
00001186  60D4                     265      BRA END_PRINT_DATA
00001188                           266  *--------------------------------------------------------------------
00001188                           267  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           268  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           269  * PARAMETERS:
00001188                           270  *   NONE
00001188                           271  * NOTES: 
00001188                           272  * A1 USE TO PRINT 
00001188                           273  * D0 FOR TRAP AND CONVERSION 
00001188                           274  PRINT_PC:
00001188  2039 00009100            275      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     276      MOVE.L D0, -(SP)
00001190  2F3C 00000008            277      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 00001526            278      JSR PRINT_HEX 
0000119C  508F                     279      ADDQ.L #8, SP 
0000119E  4EB8 10B4                280      JSR PRINT_TAB
000011A2  4EB8 10B4                281      JSR PRINT_TAB 
000011A6  4EB8 10B4                282      JSR PRINT_TAB
000011AA  4E75                     283      RTS 
000011AC                           284  
000011AC                           285  CHECK_SUPPORT_REGISTER:
000011AC  33FC 0000 00009000       286      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011B4  322F 0004                287      MOVE.W 4(SP), D1 
000011B8  3801                     288      MOVE.W D1,D4 
000011BA                           289     ; check to make sure we dont support the register 
000011BA  =00000028                290  DISPLACEMENT_REGISTER EQU %00101000
000011BA  =00000030                291  ADDRESS_WITH_INDEX EQU %00110000
000011BA  =0000003B                292  COUNTER_INDEX EQU %00111011 
000011BA  =0000003A                293  COUNTER_DISPLACEMENT EQU %00111010
000011BA  C83C 0038                294      AND.B #%00111000, D4 
000011BE  0C04 0028                295      CMPI.B #DISPLACEMENT_REGISTER, D4
000011C2  6700 0056                296      BEQ UNSUPPORT_REGISTER
000011C6  0C04 0030                297      CMPI.B #ADDRESS_WITH_INDEX, D4
000011CA  6700 004E                298      BEQ UNSUPPORT_REGISTER 
000011CE  3801                     299      MOVE D1, D4
000011D0  C83C 003F                300      AND.B #%00111111,D4
000011D4  0C04 003B                301      CMPI.B #COUNTER_INDEX, D4
000011D8  6700 0040                302      BEQ UNSUPPORT_REGISTER 
000011DC  0C04 003A                303      CMPI.B #COUNTER_DISPLACEMENT, D4
000011E0  6700 0038                304      BEQ UNSUPPORT_REGISTER
000011E4  4E75                     305      RTS
000011E6                           306  
000011E6                           307  UNSUPPORT_OPCODE: 
000011E6  267C 00009000            308      MOVE.L #RETURN_ADDRESS, A3
000011EC  4EB9 00001F2A            309      JSR PRINT_UNSUPPORTED
000011F2  4EB8 10B4                310      JSR PRINT_TAB 
000011F6  4EB8 1102                311      JSR PRINT_HASH_SIGN 
000011FA  4EB8 10EA                312      JSR PRINT_DOLLAR_SIGN 
000011FE  4281                     313      CLR.L D1 
00001200  3238 7006                314      MOVE.W (OPCODE_ADDRESS), D1 
00001204  2F01                     315      MOVE.L D1, -(SP) 
00001206  2F3C 00000004            316      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000120C  4EB9 00001526            317      JSR PRINT_HEX 
00001212  508F                     318      ADDQ.L #8, SP 
00001214  36BC 0002                319      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001218  4E75                     320      RTS 
0000121A                           321  UNSUPPORT_REGISTER:
0000121A  =00000002                322  C_UNSUPPORT_REGISTER EQU $2
0000121A  267C 00009000            323      MOVE.L #RETURN_ADDRESS, A3
00001220  4EB9 00001F2A            324      JSR PRINT_UNSUPPORTED
00001226  4EB8 10B4                325      JSR PRINT_TAB 
0000122A  4EB8 1102                326      JSR PRINT_HASH_SIGN 
0000122E  4EB8 10EA                327      JSR PRINT_DOLLAR_SIGN 
00001232  4281                     328      CLR.L D1 
00001234  3238 7006                329      MOVE.W (OPCODE_ADDRESS), D1 
00001238  2F01                     330      MOVE.L D1, -(SP) 
0000123A  2F3C 00000004            331      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001240  4EB9 00001526            332      JSR PRINT_HEX 
00001246  508F                     333      ADDQ.L #8, SP 
00001248  36BC 0002                334      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000124C  5478 7008                335      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001250  4E75                     336      RTS 
00001252                           337  
00001252                           338  
00001252                           339  *--------------------------------------------------------------------
00001252                           340  * PRINT_REGISTER
00001252                           341  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001252                           342  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001252                           343  * 2 - (4(sp)) byte value for how many byte for immediate value
00001252                           344  *      0 for a byte value
00001252                           345  *      1 for word value
00001252                           346  *      2 for long value 
00001252                           347  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001252                           348  * NOTE: 
00001252                           349  *   D1 FOR STORE THE PARAMETER
00001252                           350  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001252                           351  PRINT_REGISTER:
00001252  322F 0006                352     MOVE.W 6(SP), D1 
00001256                           353     
00001256  3401                     354     MOVE.W D1,D2
00001258  0C01 003C                355     CMPI.B #%00111100, D1
0000125C  6700 00A2                356     BEQ PRINT_IMMEDIATE
00001260  0C01 0038                357     CMPI.B #%00111000, D1
00001264  6700 0160                358     BEQ PRINT_AB_SHORT
00001268  0C01 0039                359     CMPI.B #%00111001, D1
0000126C  6700 01BA                360     BEQ PRINT_AB_LONG 
00001270                           361  
00001270  1401                     362     MOVE.B D1,D2
00001272  C43C 0038                363     AND.B #%00111000, D2
00001276  0C02 0010                364     CMPI.B #%00010000, D2
0000127A  6700 020E                365     BEQ PRINT_OPEN
0000127E                           366  
0000127E  1401                     367     MOVE.B D1,D2
00001280  C43C 0038                368     AND.B #%00111000, D2
00001284  0C02 0018                369     CMPI.B #%00011000, D2
00001288  6700 0200                370     BEQ PRINT_OPEN
0000128C                           371  
0000128C  1401                     372     MOVE.B D1,D2
0000128E  C43C 0038                373     AND.B #%00111000, D2
00001292  0C02 0020                374     CMPI.B #%00100000, D2
00001296  6700 020C                375     BEQ PRINT_MINUS_OPEN
0000129A                           376  
0000129A                           377  CONTINUE_PRINT_REGISTER:
0000129A  1401                     378     MOVE.B D1,D2
0000129C  C43C 0038                379     AND.B #%00111000, D2
000012A0  0C02 0000                380     CMPI.B #%00000000, D2
000012A4  6700 024C                381     BEQ PRINT_D
000012A8                           382  
000012A8  1401                     383     MOVE.B D1,D2
000012AA  C43C 0038                384     AND.B #%00111000, D2
000012AE  0C02 0008                385     CMPI.B #%00001000, D2
000012B2  6700 0258                386     BEQ PRINT_A 
000012B6                           387  
000012B6                           388  CONTINUE_PRINT_RE_NUMBER:
000012B6  227C 00007010            389      MOVE.L #OUTPUT_ADDRESS, A1
000012BC  1401                     390      MOVE.B D1,D2
000012BE  C43C 0007                391      AND.B #%00000111, D2
000012C2  0602 0030                392      ADD.B #48, D2 
000012C6  1282                     393      MOVE.B D2, (A1) 
000012C8  137C 0000 0001           394      MOVE.B #$0, 1(A1)
000012CE  103C 000E                395      MOVE.B #14, D0
000012D2  4E4F                     396      TRAP #15
000012D4                           397  DONE_PRINT_NUMBER:
000012D4  1401                     398     MOVE.B D1,D2
000012D6  C43C 0038                399     AND.B #%00111000, D2
000012DA  0C02 0010                400     CMPI.B #%00010000, D2
000012DE  6700 01DE                401     BEQ PRINT_CLOSE
000012E2                           402  
000012E2  1401                     403     MOVE.B D1,D2
000012E4  C43C 0038                404     AND.B #%00111000, D2
000012E8  0C02 0018                405     CMPI.B #%00011000, D2
000012EC  6700 01EA                406     BEQ PRINT_CLOSE_PLUS
000012F0                           407  
000012F0  1401                     408     MOVE.B D1,D2
000012F2  C43C 0038                409     AND.B #%00111000, D2
000012F6  0C02 0020                410     CMPI.B #%00100000, D2
000012FA  6700 01C2                411     BEQ PRINT_CLOSE
000012FE                           412  
000012FE                           413  END_PRINT_REGISTER:
000012FE  4E75                     414      RTS
00001300                           415  
00001300                           416  PRINT_IMMEDIATE:
00001300  227C 00007010            417      MOVE.L #OUTPUT_ADDRESS, A1
00001306  12BC 0023                418      MOVE.B #'#', (A1)
0000130A  137C 0000 0001           419      MOVE.B #$0, 1(A1)
00001310  103C 000E                420      MOVE.B #14, D0
00001314  4E4F                     421      TRAP #15
00001316  4EB8 10EA                422      JSR PRINT_DOLLAR_SIGN
0000131A  3038 7008                423      MOVE.W (OFFSET_OPC_ADDRES),D0
0000131E  342F 0004                424      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001322  0C02 0000                425      CMPI.B #$00, D2
00001326  6700 0014                426      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
0000132A  0C02 0001                427      CMPI.B #$01, D2
0000132E  6700 0036                428      BEQ PRINT_IMMEDIATE_WORD
00001332  0C02 0002                429      CMPI.B #$02, D2
00001336  6700 005A                430      BEQ PRINT_IMMEDIATE_LONG
0000133A  60C2                     431      BRA END_PRINT_REGISTER
0000133C                           432  
0000133C                           433  PRINT_IMMEDIATE_BYTE:
0000133C  2479 00009100            434      MOVE.L (START_ADDRESS), A2
00001342  3432 0000                435      MOVE.W (A2, D0), D2 ; 
00001346  48E7 E0C0                436      MOVEM.L D0-D2/A0-A1, -(SP)
0000134A  2F02                     437      MOVE.L D2, -(SP)
0000134C  2F3C 00000004            438      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001352  4EB9 00001526            439      JSR PRINT_HEX
00001358  508F                     440       ADDQ.L #$08, SP
0000135A  4CDF 0307                441      MOVEM.L (SP)+, D0-D2/A0-A1
0000135E  5440                     442      ADDQ.W #$2, D0
00001360  31C0 7008                443      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001364  6098                     444      BRA END_PRINT_REGISTER
00001366                           445  PRINT_IMMEDIATE_WORD:
00001366  2479 00009100            446      MOVE.L (START_ADDRESS), A2
0000136C  3432 0000                447      MOVE.W (A2, D0), D2 ; 
00001370  48E7 E0C0                448      MOVEM.L D0-D2/A0-A1, -(SP)
00001374  2F02                     449      MOVE.L D2, -(SP)
00001376  2F3C 00000004            450      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000137C  4EB9 00001526            451      JSR PRINT_HEX
00001382  508F                     452      ADDQ.L #$08, SP
00001384  4CDF 0307                453      MOVEM.L (SP)+, D0-D2/A0-A1
00001388  5440                     454      ADDQ.W #$2, D0
0000138A  31C0 7008                455      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000138E  6000 FF6E                456      BRA END_PRINT_REGISTER
00001392                           457  PRINT_IMMEDIATE_LONG:
00001392  3038 7008                458      MOVE.W (OFFSET_OPC_ADDRES),D0
00001396  2479 00009100            459      MOVE.L (START_ADDRESS), A2
0000139C  2432 0000                460      MOVE.L (A2, D0), D2 ; 
000013A0  48E7 E0C0                461      MOVEM.L D0-D2/A0-A1, -(SP)
000013A4  2F02                     462      MOVE.L D2, -(SP)
000013A6                           463      ; offset to get immediate value from opcode
000013A6  3038 7008                464      MOVE.W (OFFSET_OPC_ADDRES),D0
000013AA  2F3C 00000008            465      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013B0  4EB9 00001526            466      JSR PRINT_HEX
000013B6  508F                     467      ADDQ.L #$08, SP
000013B8  4CDF 0307                468      MOVEM.L (SP)+, D0-D2/A0-A1
000013BC  5840                     469      ADDQ.W #$4, D0
000013BE  31C0 7008                470      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C2  6000 FF3A                471      BRA END_PRINT_REGISTER
000013C6                           472  PRINT_AB_SHORT:
000013C6  227C 00007010            473      MOVE.L #OUTPUT_ADDRESS, A1
000013CC  32BC 2824                474      MOVE.W #'($', (A1)
000013D0  137C 0000 0002           475      MOVE.B #0, 2(A1)
000013D6  103C 000E                476      MOVE.B #14, D0
000013DA  4E4F                     477      TRAP #15
000013DC                           478      ; offset to get immediate value from opcode
000013DC  2479 00009100            479      MOVE.L (START_ADDRESS), A2
000013E2  3038 7008                480      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E6  3432 0000                481      MOVE.W (A2, D0), D2 ; 
000013EA  48E7 E0C0                482      MOVEM.L D0-D2/A0-A1, -(SP)
000013EE  2F02                     483      MOVE.L D2, -(SP)
000013F0  2F3C 00000004            484      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F6  4EB9 00001526            485      JSR PRINT_HEX
000013FC  508F                     486      ADDQ.L #$08, SP
000013FE  4CDF 0307                487      MOVEM.L (SP)+, D0-D2/A0-A1
00001402  5440                     488      ADDQ.W #$2, D0
00001404  31C0 7008                489      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001408                           490      ; print close parathesis with W
00001408  227C 00007010            491      MOVE.L #OUTPUT_ADDRESS, A1
0000140E  32BC 292E                492      MOVE.W #').', (A1)
00001412  137C 0057 0002           493      MOVE.B #'W',2(A1)
00001418  137C 0000 0003           494      MOVE.B #0, 3(A1)
0000141E  103C 000E                495      MOVE.B #14, D0
00001422  4E4F                     496      TRAP #15
00001424  6000 FED8                497      BRA END_PRINT_REGISTER
00001428                           498  PRINT_AB_LONG:
00001428                           499      ;print open parathesis
00001428  227C 00007010            500      MOVE.L #OUTPUT_ADDRESS, A1
0000142E  32BC 2824                501      MOVE.W #'($', (A1)
00001432  137C 0000 0002           502      MOVE.B #0, 2(A1)
00001438  103C 000E                503      MOVE.B #14, D0
0000143C  4E4F                     504      TRAP #15
0000143E                           505      ; print value in long
0000143E  2479 00009100            506      MOVE.L (START_ADDRESS), A2
00001444                           507      ; offset to get value from opcode
00001444  3038 7008                508      MOVE.W (OFFSET_OPC_ADDRES),D0
00001448  2432 0000                509      MOVE.L (A2, D0), D2 ; 
0000144C  48E7 E0C0                510      MOVEM.L D0-D2/A0-A1, -(SP)
00001450  2F02                     511      MOVE.L D2, -(SP)
00001452  2F3C 00000008            512      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001458  4EB9 00001526            513      JSR PRINT_HEX
0000145E  508F                     514      ADDQ.L #$08, SP
00001460  4CDF 0307                515      MOVEM.L (SP)+, D0-D2/A0-A1
00001464  5840                     516      ADDQ.W #$4, D0
00001466  31C0 7008                517      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000146A                           518      ; print close parathesis with W
0000146A  227C 00007010            519      MOVE.L #OUTPUT_ADDRESS, A1
00001470  32BC 292E                520      MOVE.W #').', (A1)
00001474  137C 004C 0002           521      MOVE.B #'L',2(A1)
0000147A  137C 0000 0003           522      MOVE.B #0, 3(A1)
00001480  103C 000E                523      MOVE.B #14, D0
00001484  4E4F                     524      TRAP #15
00001486  6000 FE76                525      BRA END_PRINT_REGISTER
0000148A                           526  
0000148A                           527  PRINT_OPEN:
0000148A  227C 00007010            528      MOVE.L #OUTPUT_ADDRESS, A1
00001490  12BC 0028                529      MOVE.B #'(', (A1)
00001494  137C 0000 0001           530      MOVE.B #$0, 1(A1)
0000149A  103C 000E                531      MOVE.B #14, D0
0000149E  4E4F                     532      TRAP #15
000014A0  6000 006A                533      BRA PRINT_A
000014A4                           534  PRINT_MINUS_OPEN: 
000014A4  227C 00007010            535      MOVE.L #OUTPUT_ADDRESS, A1
000014AA  32BC 2D28                536      MOVE.W #'-(', (A1)
000014AE  137C 0000 0002           537      MOVE.B #$0, 2(A1)
000014B4  103C 000E                538      MOVE.B #14, D0
000014B8  4E4F                     539      TRAP #15
000014BA  6000 0050                540      BRA PRINT_A
000014BE                           541  
000014BE                           542  PRINT_CLOSE:
000014BE  227C 00007010            543      MOVE.L #OUTPUT_ADDRESS, A1
000014C4  12BC 0029                544      MOVE.B #')', (A1)
000014C8  137C 0000 0001           545      MOVE.B #$0, 1(A1)
000014CE  103C 000E                546      MOVE.B #14, D0
000014D2  4E4F                     547      TRAP #15
000014D4  6000 FE28                548      BRA END_PRINT_REGISTER
000014D8                           549  PRINT_CLOSE_PLUS:
000014D8  227C 00007010            550      MOVE.L #OUTPUT_ADDRESS, A1
000014DE  32BC 292B                551      MOVE.W #')+', (A1)
000014E2  137C 0000 0002           552      MOVE.B #$0, 2(A1)
000014E8  103C 000E                553      MOVE.B #14, D0
000014EC  4E4F                     554      TRAP #15
000014EE  6000 FE0E                555      BRA END_PRINT_REGISTER
000014F2                           556  PRINT_D:
000014F2  227C 00007010            557      MOVE.L #OUTPUT_ADDRESS, A1 
000014F8  12BC 0044                558      MOVE.B #'D', (A1)
000014FC  137C 0000 0001           559      MOVE.B #$0, 1(A1)
00001502  103C 000E                560      MOVE.B #14, D0
00001506  4E4F                     561      TRAP #15
00001508  6000 FDAC                562      BRA CONTINUE_PRINT_RE_NUMBER
0000150C                           563  PRINT_A: 
0000150C  227C 00007010            564      MOVE.L #OUTPUT_ADDRESS, A1 
00001512  12BC 0041                565      MOVE.B #'A', (A1)
00001516  137C 0000 0001           566      MOVE.B #$0, 1(A1)
0000151C  103C 000E                567      MOVE.B #14, D0
00001520  4E4F                     568      TRAP #15
00001522  6000 FD92                569      BRA CONTINUE_PRINT_RE_NUMBER
00001526                           570  
00001526                           571  *-----------------------------------------------------------
00001526                           572  * PRINT HEX 
00001526                           573  * PARAMETERS:
00001526                           574  *   1- (8(SP)): VALUE IN HEX
00001526                           575  *   2- (4(SP)): HOW MANY BYTES
00001526                           576  * RETURN NULL
00001526                           577  *-----------------------------------------------------------
00001526                           578  PRINT_HEX:
00001526  6000 0016                579      BRA HEX_TO_ASCII
0000152A                           580  GET_ASCII_FROM_HEX:
0000152A  227C 00007010            581      MOVE.L #OUTPUT_ADDRESS, A1
00001530  103C 000E                582      MOVE.B #14, D0
00001534  4E4F                     583      TRAP #15
00001536  227C 00007010            584      MOVE.L #OUTPUT_ADDRESS, A1
0000153C                           585  END_PRINT_HEX:
0000153C  4E75                     586      RTS
0000153E                           587  *-----------------------------------------------------------
0000153E                           588  * CONVERT HEX TO ASCII 
0000153E                           589  * PARAMATERS:
0000153E                           590  *   1- (8(SP)): VALUE IN HEX
0000153E                           591  *   2- (4(SP)): HOW MANY BYTES
0000153E                           592  * RETURN:
0000153E                           593  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
0000153E                           594  * D0 STORES HEX VALUE
0000153E                           595  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
0000153E                           596  * D1 COUNT LOOP
0000153E                           597  * D2 CONVERT TO ASCII
0000153E                           598  * D3 USE TO CALCULATE SHIFT
0000153E                           599  HEX_TO_ASCII: 
0000153E  202F 0008                600      MOVE.L 8(SP), D0 
00001542  282F 0004                601      MOVE.L 4(SP), D4
00001546  0C44 0004                602      CMPI #HEX_TO_ASCII_WORD, D4 
0000154A  6700 004E                603      BEQ HEX_TO_ASCII_SWAP
0000154E  0C44 0002                604      CMPI #HEX_TO_ASCII_BYTE, D4
00001552  6700 EAAE                605      BEQ HEX_TO_ASCII_BYTE
00001556                           606  HEX2ASCII_DONE_CONVERT:
00001556  4201                     607      CLR.B D1
00001558  227C 00007010            608      MOVE.L #OUTPUT_ADDRESS, A1
0000155E  =0000000F                609  HEX_MASKING EQU $0000000F
0000155E  =00000002                610  HEX_TO_ASCII_BYTE EQU $02
0000155E  =00000004                611  HEX_TO_ASCII_WORD EQU $04
0000155E  =00000008                612  HEX_TO_ASCII_LONG EQU $08
0000155E                           613  
0000155E                           614  HEX_TO_ASCII_LOOP:
0000155E  B204                     615      CMP.B D4, D1
00001560  6700 0032                616      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001564                           617  
00001564  E998                     618      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001566  2600                     619      MOVE.L D0,D3 ; copy the value to mask
00001568  C6BC 0000000F            620      AND.L #HEX_MASKING, D3  ; mask
0000156E                           621  
0000156E  0C03 000A                622      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001572  6D00 000C                623      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001576                           624  
00001576  0C03 0048                625      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000157A  6D00 000E                626      BLT HEX_TO_ASCII_LETTER
0000157E                           627  
0000157E  60DE                     628      BRA HEX_TO_ASCII_LOOP
00001580                           629  HEX_TO_ASCII_NUMBER:
00001580  0603 0030                630      ADD.B #48, D3  ; convert number to letter
00001584  12C3                     631      MOVE.B D3, (A1)+ ; push to return memory
00001586  5201                     632      ADDQ.B #$1, D1 ; add for loop count
00001588  60D4                     633      BRA HEX_TO_ASCII_LOOP ; loop back
0000158A                           634  HEX_TO_ASCII_LETTER:
0000158A  0603 0037                635      ADD.B #55, D3 ; convert A-F in ascii
0000158E  12C3                     636      MOVE.B D3, (A1)+ ; push to return memory
00001590  5201                     637      ADDQ.B #$1, D1 ; add to for loop count
00001592  60CA                     638      BRA HEX_TO_ASCII_LOOP ;loop back
00001594                           639  END_HEX_TO_ASCII:
00001594  12FC 0000                640      MOVE.B #0, (A1)+ ; add null terminated value
00001598  6090                     641      BRA GET_ASCII_FROM_HEX
0000159A                           642  HEX_TO_ASCII_SWAP:
0000159A  4840                     643      SWAP D0
0000159C  60B8                     644      BRA HEX2ASCII_DONE_CONVERT
0000159E                           645     
0000159E                           646  HEX_TO_ASCII_ROR:
0000159E  E098                     647      ROR.L #$08, D0
000015A0  60B4                     648      BRA HEX2ASCII_DONE_CONVERT
000015A2                           649  
000015A2                           650  
000015A2                           651  *-----------------------------------------------------------
000015A2                           652  * CHECK IF THE VALUE IN HEX IS ODD 
000015A2                           653  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
000015A2                           654  * RETURN:
000015A2                           655  *   0: IF IT IS EVEN
000015A2                           656  *   1: IF IT IS ODD
000015A2                           657  * NOTE:
000015A2                           658  *   A0 IS FOR RETURN ADDRESS
000015A2                           659  *   D0 IS FOR HEX VALUE
000015A2                           660  CHECK_VALUE_IS_ODD:
000015A2  =00000000                661  VALUE_IS_EVEN EQU $0
000015A2  =00000001                662  VALUE_IS_ODD EQU $1
000015A2  41F9 00009000            663      LEA RETURN_ADDRESS, A0
000015A8  202F 0004                664      MOVE.L 4(SP), D0
000015AC  C0BC 0000FFFF            665      AND.L #$0000FFFF, D0
000015B2  80FC 0002                666      DIVU.W #2, D0
000015B6  4840                     667      SWAP D0      
000015B8  0C40 0000                668      CMPI.W #0, D0
000015BC  6700 000C                669      BEQ CHECK_VALUE_IS_ODD_FAILED
000015C0  30BC 0001                670      MOVE.W #VALUE_IS_ODD, (A0)
000015C4  6000 0002                671      BRA END_CHECK_VALUE_IS_ODD
000015C8                           672  END_CHECK_VALUE_IS_ODD:   
000015C8  4E75                     673      RTS
000015CA                           674  
000015CA                           675  CHECK_VALUE_IS_ODD_FAILED:
000015CA  30BC 0000                676      MOVE.W #VALUE_IS_EVEN, (A0)
000015CE  60F8                     677      BRA END_CHECK_VALUE_IS_ODD
000015D0                           678  *-----------------------------------------------------------
000015D0                           679  * CONVERT ASCII TO HEX
000015D0                           680  * PARAMETERS:
000015D0                           681  *   1. LOCATION OF THE ASCII
000015D0                           682  *   2. LENGTH OF THE ASCII
000015D0                           683  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015D0                           684  * RETURN:
000015D0                           685  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015D0                           686  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015D0                           687  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015D0                           688  * NOTE:
000015D0                           689  *    D0 FOR LENGTH OF ASCII
000015D0                           690  *    D1 FOR LOOPING
000015D0                           691  ; CURRENT INDEX
000015D0                           692  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015D0                           693  *    D3 FOR CONVERT FINAL RESULT
000015D0                           694  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015D0                           695  *    A0 LOCATION OF THE DATA   
000015D0                           696  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015D0                           697  ASCII_TO_HEX:
000015D0  =00000001                698  ASCII_TO_HEX_RETURN_OK EQU $1
000015D0  45F9 00009000            699      LEA RETURN_ADDRESS, A2
000015D6  4252                     700      CLR.W (A2)
000015D8  42AA 0002                701      CLR.L 2(A2)
000015DC  206F 000C                702      MOVE.L 12(SP),A0
000015E0                           703   ; LOCATION OF THE DATA
000015E0  202F 0008                704      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015E4  222F 0004                705      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E8  B280                     706      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015EA  6D00 0076                707      BLT ASCII_TO_HEX_FAILED_0
000015EE  4281                     708      CLR.L D1 ; FOR LOOPING
000015F0                           709  ASCII_TO_HEX_LOOP:
000015F0  B081                     710     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015F2  6700 0068                711     BEQ ASCII_TO_HEX_END_LOOP
000015F6                           712     ; D2 USE FOR STORE DATA 
000015F6  1418                     713      MOVE.B (A0)+, D2
000015F8  0C02 002F                714      CMPI.B #47, D2
000015FC                           715  ASCII_TO_HEX_CHECK_GT_0
000015FC  6E00 0006                716      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
00001600  6000 0066                717      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
00001604                           718  ASCII_TO_HEX_CHECK_LT_9:
00001604  0C02 003A                719      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001608  6D00 001E                720      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
0000160C                           721      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
0000160C  6000 0002                722      BRA ASCII_TO_HEX_CHECK_GT_A
00001610                           723  ASCII_TO_HEX_CHECK_GT_A:
00001610  0C02 0040                724      CMPI.B #64, D2
00001614  6E00 0006                725      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001618  6000 004E                726      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
0000161C                           727  ASCII_TO_HEX_CHECK_LT_F
0000161C  0C02 0047                728      CMPI.B #71, D2
00001620  6D00 0020                729      BLT ASCII_TO_HEX_CONVERT_LETTER
00001624  6000 0042                730      BRA ASCII_TO_HEX_FAILED_2
00001628                           731  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001628                           732  ASCII_TO_HEX_CONVERT_NUMBER:
00001628  2800                     733       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
0000162A  0402 0030                734       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
0000162E  9881                     735       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
00001630  5344                     736       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
00001632  C8FC 0004                737       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001636  E9A2                     738       ASL.L D4, D2 ; SHIFT DATA
00001638  D5AA 0002                739       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
0000163C  4282                     740       CLR.L D2
0000163E  5241                     741       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001640  60AE                     742       BRA ASCII_TO_HEX_LOOP
00001642                           743  ASCII_TO_HEX_CONVERT_LETTER:
00001642  2800                     744      MOVE.L D0, D4
00001644  0402 0037                745      SUB.B #55, D2
00001648  9881                     746      SUB.L D1,D4
0000164A  5344                     747      SUBQ #1, D4
0000164C  C8FC 0004                748      MULU #4, D4
00001650  E9A2                     749      ASL.L D4,D2
00001652  D5AA 0002                750      ADD.L D2, 2(A2)
00001656  4282                     751      CLR.L D2 
00001658  5241                     752      ADDQ #1, D1
0000165A  6094                     753      BRA ASCII_TO_HEX_LOOP
0000165C                           754  ASCII_TO_HEX_END_LOOP:
0000165C  34BC 0001                755      MOVE.W #1, (A2)
00001660  4E75                     756      RTS
00001662                           757      
00001662                           758  ASCII_TO_HEX_FAILED_0:
00001662  34BC 0002                759      MOVE.W #2, (A2)
00001666  4E75                     760      RTS
00001668                           761  ASCII_TO_HEX_FAILED_2:
00001668  34BC 0002                762      MOVE.W #2, (A2)
0000166C  4E75                     763      RTS 
0000166E                           764  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000166E                           765  * PARAMETERS:
0000166E                           766  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000166E                           767  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000166E                           768  * RETURN:
0000166E                           769  *   NULL
0000166E                           770  * NOTE:
0000166E                           771  *   A0 USE TO POINT TO THE ADDRESS
0000166E                           772  *   d1 USE TO MATH 
0000166E                           773  INCRASE_POINTER_START_ADDRESS: 
0000166E  206F 0008                774      MOVE.L 8(SP), A0
00001672  222F 0004                775      MOVE.L 4(SP), D1
00001676  D390                     776      ADD.L D1, (A0)
00001678  4E75                     777      RTS
0000167A                           778  
0000167A                           779  * FETCH 16 BIT FROM START_ADDRESS
0000167A                           780  * PARAMTERS: 
0000167A                           781  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000167A                           782  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000167A                           783  * RETURN:
0000167A                           784  *   NULL
0000167A                           785  * NOTE:
0000167A                           786  *     A0 USE TO STORE THE OPCODE LOCATION
0000167A                           787  *     A2 USES TO RETURN THE OPCODE
0000167A                           788  FETCH_OPCODES:
0000167A  206F 0008                789      MOVE.L 8(SP), A0 ; LOCATION
0000167E  246F 0004                790      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001682  3050                     791      MOVE.W (A0), A0
00001684  3488                     792      MOVE.W A0,(A2)
00001686  31FC 0002 7008           793      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000168C                           794  END_FETCH_OPCODES:
0000168C  4E75                     795      RTS
0000168E                           796  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000168E                           797  * LETS DECODE
0000168E                           798  * jump table uses to jump to decode subroutine
0000168E                           799  * PARAMATERS:
0000168E                           800  * 1-(4(Sp)) Word - opcode
0000168E                           801  * NOTE: 
0000168E                           802  *   D1 USES TO STORE OPCODE
0000168E                           803  JUMP_TABLE:
0000168E  322F 0004                804      MOVE.W 4(SP), D1
00001692  4EB9 00001C0A            805      JSR ORI
00001698  4EB9 00001920            806      JSR MOVEA 
0000169E  4EB9 000019D6            807      JSR MOVE
000016A4  4EB9 00001A9A            808      JSR NEG
000016AA  4EB9 000016FC            809      JSR NOP
000016B0  4EB9 00001706            810      JSR RTS
000016B6  4EB9 00001710            811      JSR JSR
000016BC  4EB9 00001A9A            812      JSR MOVEM 
000016C2  4EB9 0000175C            813      JSR LEA
000016C8  4EB9 00001DB0            814      JSR DIVS
000016CE  4EB9 00001B3C            815      JSR OR
000016D4  4EB9 00001CE2            816      JSR SUB
000016DA  4EB9 00001C60            817      JSR EOR
000016E0  4EB9 00001710            818      JSR JSR
000016E6  4EB9 0000184E            819      JSR ADD 
000016EC  4EB9 000017CA            820      JSR ADDA
000016F2  4EB9 00001AFE            821      JSR BRA
000016F8                           822  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016F8                           823  END_JUMP_TABLE:
000016F8  4EB8 11E6                824      JSR UNSUPPORT_OPCODE
000016FC                           825  
000016FC                           826  NOP:
000016FC                           827  * constant for NOP 
000016FC  =00004E71                828  C_NOP EQU $4E71
000016FC  B27C 4E71                829      CMP.W #C_NOP, D1
00001700  6700 075A                830      BEQ PRINT_NOP
00001704  4E75                     831      RTS
00001706                           832  
00001706                           833  RTS:
00001706                           834  * constant for RTS 
00001706  =00004E75                835  C_RTS EQU $4E75
00001706  B27C 4E75                836      CMP.W #C_RTS, D1
0000170A  6700 0720                837      BEQ PRINT_RTS
0000170E  4E75                     838      RTS
00001710                           839  
00001710                           840  JSR:
00001710  =00004E80                841  JSR_OPCODE EQU %0100111010000000
00001710  3401                     842      MOVE.W D1,D2 
00001712                           843  * MASKING WITH UNIQUE OPCODE
00001712  C47C FFC0                844      AND.W #%1111111111000000, D2
00001716  B47C 4E80                845      CMP.W #JSR_OPCODE, D2
0000171A  6600 003E                846      BNE JSR_END 
0000171E                           847      ; check to make sure we support this register 
0000171E  3401                     848      MOVE.W D1, D2 
00001720  C43C 003F                849      AND.B #%00111111, D2 
00001724  3F02                     850      MOVE.W D2, -(SP)
00001726  4EB8 11AC                851      JSR CHECK_SUPPORT_REGISTER 
0000172A  544F                     852      ADDQ #2, SP 
0000172C                           853      ; check return value
0000172C                           854      *  from print_register to see if it is unsupported register 
0000172C  3439 00009000            855      MOVE.W (RETURN_ADDRESS), D2 
00001732  0C42 0002                856      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001736  6700 0022                857      BEQ JSR_END
0000173A                           858      ; done checking 
0000173A  4EB9 00001EB2            859      JSR PRINT_JSR
00001740                           860  * MASKING TO GET MODE AND REGISTER
00001740  1401                     861      MOVE.B D1,D2
00001742  C43C 003F                862      AND.B #%00111111, D2
00001746  48A7 4000                863      MOVEM.W D1, -(SP)
0000174A  3F02                     864      MOVE.W D2, -(SP)
0000174C  3F3C 0000                865      MOVE.W #$0, -(SP)
00001750  4EB8 1252                866      JSR PRINT_REGISTER
00001754  5882                     867      ADDQ.L #4, D2
00001756  4C9F 0002                868      MOVEM.W (SP)+, D1
0000175A                           869  JSR_END:
0000175A  4E75                     870      RTS
0000175C                           871  
0000175C                           872  LEA:
0000175C  3401                     873      MOVE.W D1,D2 
0000175E  C47C F1C0                874      AND.W  #%1111000111000000, D2
00001762  0C42 41C0                875      CMPI.W #%0100000111000000, D2
00001766  6600 0060                876      BNE LEA_END
0000176A                           877  
0000176A                           878      ; CHECK TO MAKE SURE WE SUPPORT THE EA
0000176A  3401                     879      MOVE.W D1, D2 
0000176C  C43C 003F                880      AND.B #%00111111, D2 
00001770  3F02                     881      MOVE.W D2, -(SP)
00001772  4EB8 11AC                882      JSR CHECK_SUPPORT_REGISTER
00001776  544F                     883      ADDQ #2, SP 
00001778                           884      ; check return value
00001778                           885      *  from print_register to see if it is unsupported register 
00001778  3439 00009000            886      MOVE.W (RETURN_ADDRESS), D2 
0000177E  0C42 0002                887      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001782  6700 F8C4                888      BEQ FINISH_OPCODE
00001786                           889      * END CHECKING
00001786  4EB9 00001EC4            890      JSR PRINT_LEA
0000178C  1401                     891      MOVE.B D1,D2 
0000178E                           892      ; MASK TO GET MODE AND REGISTER
0000178E  C43C 003F                893      AND.B #%0000000000111111, D2
00001792  48A7 4000                894      MOVEM.W D1, -(SP)
00001796  3F02                     895      MOVE.W D2, -(SP)
00001798  3F3C 0000                896      MOVE.W #$0, -(SP)
0000179C  4EB8 1252                897      JSR PRINT_REGISTER
000017A0  588F                     898      ADDQ.L #$4, SP
000017A2  4C9F 0002                899      MOVEM.W (SP)+, D1
000017A6  4EB8 10D2                900      JSR PRINT_COMMA
000017AA                           901      ; MASK TO GET DESTINATION REGISTER
000017AA  3401                     902      MOVE.W D1,D2
000017AC  C47C 0E00                903      AND.W #%0000111000000000, D2
000017B0  E04A                     904      LSR.W #$08, D2
000017B2  E24A                     905      LSR.W #$01, D2
000017B4  843C 0008                906      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017B8  3F02                     907      MOVE.W D2, -(SP)
000017BA  3F3C 0000                908      MOVE.W #$0, -(SP) 
000017BE  4EB8 1252                909      JSR PRINT_REGISTER
000017C2  588F                     910      ADDQ.L #$04, SP
000017C4  6000 F882                911      BRA FINISH_OPCODE
000017C8                           912  LEA_END:
000017C8  4E75                     913      RTS
000017CA                           914  
000017CA                           915  ADDA:
000017CA  =0000D0C0                916  C_ADDA EQU       %1101000011000000
000017CA  =0000F0C0                917  ADDA_MASKING EQU %1111000011000000
000017CA  =00000100                918  ADDA_SIZE_MASKING EQU %0000000100000000
000017CA  =00000E00                919  ADDA_AN_MASKING EQU %0000111000000000
000017CA  3401                     920      MOVE.W D1, D2
000017CC  C47C F0C0                921      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017D0  0C42 D0C0                922      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017D4  6600 0076                923      BNE ADDA_END 
000017D8                           924      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017D8  3401                     925      MOVE.W D1, D2 
000017DA  C43C 003F                926      AND.B #%00111111, D2 
000017DE  3F02                     927      MOVE.W D2, -(SP)
000017E0  4EB8 11AC                928      JSR CHECK_SUPPORT_REGISTER
000017E4  544F                     929      ADDQ #2, SP 
000017E6                           930      ; check return value
000017E6                           931      *  from print_register to see if it is unsupported register 
000017E6  3439 00009000            932      MOVE.W (RETURN_ADDRESS), D2 
000017EC  0C42 0002                933      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017F0  6700 F856                934      BEQ FINISH_OPCODE
000017F4  4EB9 00001ED6            935      JSR PRINT_ADDA
000017FA  3401                     936      MOVE.W D1, D2  ; START TO MASK SIZE 
000017FC  C47C 0100                937      AND.W #ADDA_SIZE_MASKING,D2 
00001800  E04A                     938      LSR.W #8, D2 
00001802  3C02                     939      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
00001804  5246                     940      ADDQ #$1, D6
00001806  1F06                     941      MOVE.B D6 , -(SP)
00001808  4EB8 113A                942      JSR PRINT_DATA
0000180C  548F                     943      ADDQ.L #$2, SP 
0000180E  4EB8 10B4                944      JSR PRINT_TAB
00001812                           945      ; GET MODE AND REGISTER
00001812  3238 7006                946      MOVE.W (OPCODE_ADDRESS), D1 
00001816  1401                     947      MOVE.B D1, D2 
00001818  C43C 003F                948      AND.B #%00111111, D2 
0000181C  3F02                     949      MOVE.W D2, -(SP)
0000181E  3F06                     950      MOVE.W D6, -(SP)
00001820  4EB8 1252                951      JSR PRINT_REGISTER 
00001824  588F                     952      ADDQ.L #$04, SP 
00001826  4EB8 10D2                953      JSR PRINT_COMMA
0000182A  3238 7006                954      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
0000182E  3401                     955      MOVE.W D1, D2
00001830  C47C 0E00                956      AND.W #ADDA_AN_MASKING, D2
00001834  E04A                     957      LSR.W #8, D2 
00001836  E24A                     958      LSR.W #1, D2 
00001838  843C 0008                959      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
0000183C  3F02                     960      MOVE.W D2, -(SP)
0000183E  3F3C 0000                961      MOVE.W #$0, -(SP)
00001842  4EB8 1252                962      JSR PRINT_REGISTER 
00001846  588F                     963      ADDQ.L #$4, SP 
00001848  6000 F7FE                964      BRA FINISH_OPCODE
0000184C                           965  ADDA_END:
0000184C  4E75                     966      RTS
0000184E                           967  
0000184E                           968  ADD: 
0000184E  =0000D000                969  C_ADD EQU           %1101000000000000 ; PATTERN
0000184E  =0000F000                970  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
0000184E  =0000003F                971  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
0000184E  =00000E00                972  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
0000184E  =000000C0                973  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
0000184E  =00000100                974  C_ADD_DIRECTION EQU %0000000100000000
0000184E  =00000000                975  C_ADD_TO_D EQU      %0000000000000000
0000184E  =00000100                976  C_ADD_FROM_D EQU    %0000000100000000
0000184E  3401                     977      MOVE.W D1, D2 
00001850                           978      ; CHECK PATTERN 
00001850  C47C F000                979      AND.W #C_ADD_MASKING, D2 
00001854  0C42 D000                980      CMPI.W #C_ADD, D2 
00001858  6600 00C4                981      BNE ADD_END 
0000185C                           982      ; CHECK SUPPORT REGISTER 
0000185C  3401                     983      MOVE.W D1, D2 
0000185E  C43C 003F                984      AND.B #%00111111, D2 
00001862  3F02                     985      MOVE.W D2, -(SP)
00001864  4EB8 11AC                986      JSR CHECK_SUPPORT_REGISTER
00001868  544F                     987      ADDQ #2, SP 
0000186A                           988      ; check return value
0000186A                           989      *  from print_register to see if it is unsupported register 
0000186A  3439 00009000            990      MOVE.W (RETURN_ADDRESS), D2 
00001870  0C42 0002                991      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001874  6700 F7D2                992      BEQ FINISH_OPCODE
00001878                           993      
00001878  4EB9 00001EE4            994      JSR PRINT_ADD 
0000187E  3238 7006                995      MOVE.W (OPCODE_ADDRESS), D1 
00001882  3401                     996      MOVE.W D1, D2 
00001884  C47C 00C0                997      AND.W #C_ADD_SIZE, D2 
00001888  EC4A                     998      LSR.W #6, D2
0000188A  1C02                     999      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
0000188C                          1000  
0000188C  1F02                    1001      MOVE.B D2, -(SP)
0000188E  4EB8 113A               1002      JSR PRINT_DATA
00001892  548F                    1003      ADDQ.L #$02, SP 
00001894  4EB8 10B4               1004      JSR PRINT_TAB 
00001898                          1005      ; CHECK DIRECTION
00001898  3238 7006               1006      MOVE.W (OPCODE_ADDRESS), D1 
0000189C  3401                    1007      MOVE.W D1, D2  
0000189E  C47C 0100               1008      AND.W #C_ADD_DIRECTION, D2 
000018A2  0C42 0000               1009      CMPI.W #C_ADD_TO_D, D2 
000018A6  6700 003C               1010      BEQ ADD_TO_D ; DN <EA> -> DN
000018AA                          1011      ; otherwise from d 
000018AA                          1012  ADD_FROM_D:
000018AA  3238 7006               1013      MOVE.W (OPCODE_ADDRESS), D1 
000018AE  3401                    1014      MOVE.W D1, D2 
000018B0  C47C 0E00               1015      AND.W #C_ADD_REGISTER, D2 
000018B4  E08A                    1016      LSR.L #8, D2 
000018B6  E28A                    1017      LSR.L #1, D2 
000018B8  843C 0000               1018      OR.B #%00000000, D2
000018BC  3F02                    1019      MOVE.W D2, -(SP)
000018BE  3F3C 0000               1020      MOVE.W #$0, -(SP)
000018C2  4EB8 1252               1021      JSR PRINT_REGISTER 
000018C6  5882                    1022      ADDQ.L #4, D2 
000018C8  4EB8 10D2               1023      JSR PRINT_COMMA 
000018CC                          1024      
000018CC  3238 7006               1025      MOVE.W (OPCODE_ADDRESS), D1 
000018D0  3401                    1026      MOVE.W D1, D2 
000018D2  C43C 003F               1027      AND.B #C_ADD_EA, D2 
000018D6  3F02                    1028      MOVE.W D2, -(SP)
000018D8  3F06                    1029      MOVE.W D6, -(SP)
000018DA  4EB8 1252               1030      JSR PRINT_REGISTER
000018DE  588F                    1031      ADDQ.L #4, SP 
000018E0  6000 F766               1032      BRA FINISH_OPCODE
000018E4                          1033      
000018E4                          1034  ADD_TO_D:
000018E4  3238 7006               1035      MOVE.W (OPCODE_ADDRESS), D1 
000018E8  3401                    1036      MOVE.W D1, D2 
000018EA                          1037      ; GET SOURCE REGISTER 
000018EA  C43C 003F               1038      AND.B #C_ADD_EA, D2 
000018EE  3F02                    1039      MOVE.W D2, -(SP)
000018F0  3F06                    1040      MOVE.W D6, -(SP)
000018F2  4EB8 1252               1041      JSR PRINT_REGISTER
000018F6  588F                    1042      ADDQ.L #4, SP 
000018F8  4EB8 10D2               1043      JSR PRINT_COMMA 
000018FC                          1044      ; PRINT DATA REGISTER 
000018FC  3238 7006               1045      MOVE.W (OPCODE_ADDRESS), D1 
00001900  3401                    1046      MOVE.W D1, D2 
00001902  C47C 0E00               1047      AND.W #C_ADD_REGISTER, D2 
00001906  E04A                    1048      LSR.W #8, D2 
00001908  E24A                    1049      LSR.W #1, D2 
0000190A                          1050      ; APPEND MODE TO D2 FOR PRINT_REGISTER
0000190A  843C 0000               1051      OR.B #%00000000, D2 
0000190E  3F02                    1052      MOVE.W D2, -(SP)
00001910  3F3C 0000               1053      MOVE.W #$0, -(SP)
00001914  4EB8 1252               1054      JSR PRINT_REGISTER
00001918  588F                    1055      ADDQ.L #4, SP 
0000191A  6000 F72C               1056      BRA FINISH_OPCODE
0000191E                          1057  ADD_END:
0000191E  4E75                    1058      RTS
00001920                          1059  
00001920                          1060  MOVEA: 
00001920  =00001040               1061  C_MOVEA_PATTERN1 EQU  %0001000001000000
00001920  =00003040               1062  C_MOVEA_PATTERN2 EQU  %0011000001000000
00001920  =00002040               1063  C_MOVEA_PATTERN3 EQU  %0010000001000000
00001920  =0000F1C0               1064  C_MOVEA_P_MASKING EQU %1111000111000000
00001920  =00003000               1065  C_MOVEA_SIZE      EQU %0011000000000000
00001920  =00000E00               1066  C_MOVEA_AN        EQU %0000111000000000
00001920  =0000003F               1067  C_MOVEA_REGISTER  EQU %00111111
00001920  3401                    1068      MOVE.W D1, D2 
00001922  0242 F1C0               1069      ANDI.W #C_MOVEA_P_MASKING, D2 
00001926  0C42 1040               1070      CMPI.W #C_MOVEA_PATTERN1, D2 
0000192A  6700 0014               1071      BEQ MOVEA_REGISTER_OK
0000192E  0C42 3040               1072      CMPI.W #C_MOVEA_PATTERN2, D2 
00001932  6700 000C               1073      BEQ MOVEA_REGISTER_OK
00001936  0C42 2040               1074      CMPI.W #C_MOVEA_PATTERN3, D2 
0000193A  6700 0004               1075      BEQ MOVEA_REGISTER_OK
0000193E  4E75                    1076      RTS
00001940                          1077  MOVEA_REGISTER_OK:
00001940                          1078      ; CHECK SUPPORT THE REGISTER 
00001940  3401                    1079      MOVE.W D1, D2 
00001942  C43C 003F               1080      AND.B #C_MOVEA_REGISTER, D2 
00001946  3F02                    1081      MOVE.W D2, -(SP) 
00001948  4EB8 11AC               1082      JSR CHECK_SUPPORT_REGISTER
0000194C  548F                    1083      ADDQ.L #2, SP 
0000194E  3439 00009000           1084      MOVE.W (RETURN_ADDRESS), D2 
00001954  0C42 0002               1085      CMPI.W #C_UNSUPPORT_REGISTER, D2 
00001958  6700 F6EE               1086      BEQ FINISH_OPCODE
0000195C                          1087      ; DONE CHECKING, NOW DECODE 
0000195C  4EB9 00001F0E           1088      JSR PRINT_MOVEA 
00001962                          1089      ; GET SIZE 
00001962  3401                    1090      MOVE.W D1, D2 
00001964  C47C 3000               1091      AND.W #C_MOVEA_SIZE, D2 
00001968                          1092      ; SHIFT TO LSB 
00001968  E04A                    1093      LSR.W #8, D2 
0000196A  E84A                    1094      LSR.W #4, D2 
0000196C  0C02 0001               1095      CMPI.B #%00000001, D2
00001970  6700 000E               1096      BEQ CONVERT_OPMODE_SIZE_B
00001974  0C02 0003               1097      CMPI.B #%00000011, D2 
00001978  6700 000C               1098      BEQ CONVERT_OPMODE_SIZE_W
0000197C  6000 000E               1099      BRA MOVEA_DONE_CONVERT
00001980                          1100  CONVERT_OPMODE_SIZE_B:
00001980  5302                    1101      SUBQ.B #1, D2 
00001982  6000 0008               1102      BRA MOVEA_DONE_CONVERT
00001986                          1103  CONVERT_OPMODE_SIZE_W: 
00001986  5502                    1104      SUBQ.B #2, D2 
00001988  6000 0002               1105      BRA MOVEA_DONE_CONVERT
0000198C                          1106  
0000198C                          1107  MOVEA_DONE_CONVERT:
0000198C  3C02                    1108      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
0000198E  1F06                    1109      MOVE.B D6, -(SP)
00001990  4EB8 113A               1110      JSR PRINT_DATA 
00001994  548F                    1111      ADDQ.L #2, SP 
00001996  4EB8 10B4               1112      JSR PRINT_TAB
0000199A                          1113      ; GET SOURCE REGISTER 
0000199A  3238 7006               1114      MOVE.W (OPCODE_ADDRESS), D1 
0000199E  3401                    1115      MOVE.W D1, D2 
000019A0  C43C 003F               1116      AND.B #C_MOVEA_REGISTER,D2 
000019A4  3F02                    1117      MOVE.W D2, -(SP)
000019A6  3F06                    1118      MOVE.W D6, -(SP)
000019A8  4EB8 1252               1119      JSR PRINT_REGISTER
000019AC  588F                    1120      ADDQ.L #4, SP 
000019AE  4EB8 10D2               1121      JSR PRINT_COMMA
000019B2                          1122  
000019B2  3238 7006               1123      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019B6  3401                    1124      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019B8  C47C 0E00               1125      AND.W #C_MOVEA_AN, D2 
000019BC  E04A                    1126      LSR.W #8, D2 
000019BE  E24A                    1127      LSR.W #1, D2 
000019C0                          1128      ; ADD MODE FOR PRINT_REGISTER 
000019C0  0002 0008               1129      ORI.B #%00001000, D2 
000019C4  3F02                    1130      MOVE.W D2, -(SP)
000019C6  3F3C 0000               1131      MOVE.W #0, -(SP)
000019CA  4EB8 1252               1132      JSR PRINT_REGISTER ; PRINT AN 
000019CE  588F                    1133      ADDQ.L #4, SP 
000019D0  6000 F676               1134      BRA FINISH_OPCODE   
000019D4                          1135  
000019D4                          1136  MOVEA_END: 
000019D4  4E75                    1137      RTS 
000019D6                          1138  
000019D6                          1139  MOVE: 
000019D6  =00001000               1140  C_MOVE_PATTERN EQU   %0001000000000000
000019D6  =00003000               1141  C_MOVE_PATTERN1 EQU  %0011000000000000
000019D6  =00002000               1142  C_MOVE_PATTERN2 EQU  %0010000000000000
000019D6  =0000F000               1143  C_MOVE_MASKING EQU   %1111000000000000
000019D6  =00003000               1144  C_MOVE_SIZE EQU      %0011000000000000
000019D6  =00000E00               1145  C_MOVE_DES_XN EQU    %0000111000000000
000019D6  =000001C0               1146  C_MOVE_DES_MOD EQU   %0000000111000000
000019D6  =0000003F               1147  C_MOVE_SRC_RE EQU    %00111111 
000019D6  3401                    1148      MOVE.W D1, D2 
000019D8  C47C F000               1149      AND.W #C_MOVE_MASKING, D2 
000019DC  0C42 1000               1150      CMPI.W #C_MOVE_PATTERN, D2 
000019E0  6700 0014               1151      BEQ MOVE_MATCH_PATTERN 
000019E4  0C42 3000               1152      CMPI.W #C_MOVE_PATTERN1, D2 
000019E8  6700 000C               1153      BEQ MOVE_MATCH_PATTERN 
000019EC  0C42 2000               1154      CMPI.W #C_MOVE_PATTERN2, D2 
000019F0  6700 0004               1155      BEQ MOVE_MATCH_PATTERN
000019F4                          1156  MOVE_END:
000019F4  4E75                    1157      RTS
000019F6                          1158  MOVE_MATCH_PATTERN: 
000019F6  3401                    1159      MOVE.W D1, D2 
000019F8                          1160      ; CHECK IF WE SUPPORT THE REGISTER 
000019F8                          1161      ; SOURCE REGISTER 
000019F8  C43C 003F               1162      AND.B #C_MOVE_SRC_RE, D2
000019FC  3A42                    1163      MOVE.W D2, A5 ; COPY FOR LATER USE
000019FE  3F02                    1164      MOVE.W D2, -(SP)
00001A00  4EB8 11AC               1165      JSR CHECK_SUPPORT_REGISTER 
00001A04  548F                    1166      ADDQ.L #2, SP 
00001A06  0C79 0002 00009000      1167      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A0E  6700 F638               1168      BEQ FINISH_OPCODE
00001A12                          1169      ; DES REGISTER 
00001A12                          1170      ;GET XN 
00001A12  3238 7006               1171      MOVE.W (OPCODE_ADDRESS), D1 
00001A16  3401                    1172      MOVE.W D1,D2 
00001A18  C47C 0E00               1173      AND.W #C_MOVE_DES_XN, D2 
00001A1C  EC4A                    1174      LSR.W #6, D2 
00001A1E  C27C 01C0               1175      AND.W #C_MOVE_DES_MOD, D1 
00001A22  8441                    1176      OR.W D1, D2 
00001A24  E64A                    1177      LSR.W #3, D2 
00001A26  3842                    1178      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A28  3F02                    1179      MOVE.W D2, -(SP)
00001A2A  4EB8 11AC               1180      JSR CHECK_SUPPORT_REGISTER
00001A2E  548F                    1181      ADDQ.L #2, SP 
00001A30  0C79 11AC 00009000      1182      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A38  6700 F60E               1183      BEQ FINISH_OPCODE
00001A3C                          1184      ; EVERYTHING IS OK 
00001A3C                          1185      
00001A3C  4EB9 00001F1C           1186      JSR PRINT_MOVE
00001A42  3238 7006               1187      MOVE.W (OPCODE_ADDRESS), D1 
00001A46  3401                    1188      MOVE.W D1, D2 
00001A48  C47C 3000               1189      AND.W #C_MOVE_SIZE, D2 
00001A4C  E04A                    1190      LSR.W #8, D2 
00001A4E  E80A                    1191      LSR.B #4, D2 
00001A50  0C02 0001               1192      CMPI.B #1, D2 
00001A54  6700 000E               1193      BEQ MOVE_OPMODE_BYTE
00001A58  0C02 0003               1194      CMPI.B #3, D2 
00001A5C  6700 000C               1195      BEQ MOVE_OPMODE_WORD
00001A60  6000 000E               1196      BRA MOVE_DONE_CONVERT
00001A64                          1197  MOVE_OPMODE_BYTE:
00001A64  5302                    1198      SUBQ.B #1, D2
00001A66  6000 0008               1199      BRA MOVE_DONE_CONVERT
00001A6A                          1200  MOVE_OPMODE_WORD:
00001A6A  5502                    1201      SUBQ.B #2, D2 
00001A6C  6000 0002               1202      BRA MOVE_DONE_CONVERT
00001A70                          1203  MOVE_DONE_CONVERT:
00001A70  3C02                    1204      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A72  1F06                    1205      MOVE.B D6, -(SP) 
00001A74  4EB8 113A               1206      JSR PRINT_DATA 
00001A78  548F                    1207      ADDQ.L #2, SP
00001A7A  4EB8 10B4               1208      JSR PRINT_TAB 
00001A7E                          1209      ; PRINT SOURCE
00001A7E  3F0D                    1210      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A80  3F06                    1211      MOVE.W D6, -(SP) ; SIZE 
00001A82  4EB8 1252               1212      JSR PRINT_REGISTER
00001A86  588F                    1213      ADDQ.L #4, SP 
00001A88                          1214      ; PRINT DES 
00001A88  4EB8 10D2               1215      JSR PRINT_COMMA 
00001A8C  3F0C                    1216      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A8E  3F06                    1217      MOVE.W D6, -(SP) ; SIZE 
00001A90  4EB8 1252               1218      JSR PRINT_REGISTER 
00001A94  588F                    1219      ADDQ.L #4, SP 
00001A96  6000 F5B0               1220      BRA FINISH_OPCODE 
00001A9A                          1221  
00001A9A                          1222  MOVEM: 
00001A9A  =00004880               1223  C_MOVEM_PATTERN EQU %0100100010000000
00001A9A  =0000FB80               1224  C_MOVEM_MASKING EQU %1111101110000000
00001A9A  =00000400               1225  C_MOVEM_DIR EQU     %0000010000000000
00001A9A  =00000040               1226  C_MOVEM_SIZE EQU    %0000000001000000
00001A9A                          1227  * C_MOVEM_REGISTER EQU
00001A9A                          1228  
00001A9A                          1229  
00001A9A                          1230  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A9A                          1231  NEG:
00001A9A                          1232  * CONSTANT FOR NEG OPCODE
00001A9A  =00004400               1233  NEG_OPCODE EQU %0100010000000000
00001A9A  =0000FF00               1234  NEG_M      EQU %1111111100000000
00001A9A  =0000003F               1235  NEG_REG_M  EQU %0000000000111111
00001A9A  =000000C0               1236  NEG_SIZE_M EQU %0000000011000000
00001A9A  3401                    1237      MOVE.W D1, D2
00001A9C                          1238  * MASKING WITH NEG UNIQUE CODE
00001A9C  C47C FF00               1239      AND.W #NEG_M, D2
00001AA0  B47C 4400               1240      CMP.W #NEG_OPCODE, D2
00001AA4  6600 0056               1241      BNE NEG_END
00001AA8                          1242  
00001AA8                          1243  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001AA8  3401                    1244      MOVE.W D1, D2 
00001AAA  C43C 003F               1245      AND.B #NEG_REG_M, D2 
00001AAE  3F02                    1246      MOVE.W D2, -(SP)
00001AB0  4EB8 11AC               1247      JSR CHECK_SUPPORT_REGISTER
00001AB4  544F                    1248      ADDQ #2, SP 
00001AB6                          1249  * from print_register to see if it is unsupported register 
00001AB6  3439 00009000           1250      MOVE.W (RETURN_ADDRESS), D2 
00001ABC  0C42 0002               1251      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001AC0  6700 F586               1252      BEQ FINISH_OPCODE
00001AC4                          1253  
00001AC4  4EB9 00001E40           1254      JSR PRINT_NEG
00001ACA  3238 7006               1255      MOVE.W (OPCODE_ADDRESS), D1 
00001ACE  3401                    1256      MOVE.W D1, D2
00001AD0                          1257  * MASKING TO GET NEG SIZE
00001AD0  C47C 00C0               1258      AND.W #NEG_SIZE_M, D2
00001AD4  EC42                    1259      ASR.W #6, D2
00001AD6  1C02                    1260      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001AD8  1F06                    1261      MOVE.B D6, -(SP)
00001ADA  4EB8 113A               1262      JSR PRINT_DATA
00001ADE  548F                    1263      ADDQ.L #2, SP
00001AE0  4EB8 10B4               1264      JSR PRINT_TAB
00001AE4                          1265  
00001AE4  3238 7006               1266      MOVE.W (OPCODE_ADDRESS), D1     
00001AE8  3401                    1267      MOVE.W D1, D2
00001AEA                          1268  * MASKING TO GET MODE AND REGISTER
00001AEA  C47C 003F               1269      AND.W #NEG_REG_M, D2
00001AEE  3F02                    1270      MOVE.W D2, -(SP)
00001AF0  3F06                    1271      MOVE.W D6, -(SP)
00001AF2  4EB8 1252               1272      JSR PRINT_REGISTER
00001AF6  588F                    1273      ADDQ.L #$04, SP
00001AF8  6000 F54E               1274      BRA FINISH_OPCODE
00001AFC                          1275  NEG_END: 
00001AFC  4E75                    1276      RTS
00001AFE                          1277  
00001AFE                          1278  BRA:
00001AFE                          1279  * CONSTANT FOR BRA OPCODE
00001AFE  =00006000               1280  BRA_OPCODE EQU %0110000000000000
00001AFE  =0000FF00               1281  BRA_M      EQU %1111111100000000
00001AFE  =000000FF               1282  BRA_DISP_M EQU %0000000011111111
00001AFE  3401                    1283      MOVE.W D1, D2
00001B00                          1284  * MASKING WITH BRA UNIQUE CODE
00001B00  C47C FF00               1285      AND.W #BRA_M, D2
00001B04  B47C 6000               1286      CMP.W #BRA_OPCODE, D2
00001B08  6600 0030               1287      BNE BRA_END
00001B0C                          1288  
00001B0C                          1289  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B0C  3401                    1290      MOVE.W D1, D2 
00001B0E  C43C 00FF               1291      AND.B #BRA_DISP_M, D2 
00001B12  3F02                    1292      MOVE.W D2, -(SP)
00001B14  4EB8 11AC               1293      JSR CHECK_SUPPORT_REGISTER
00001B18  544F                    1294      ADDQ #2, SP 
00001B1A                          1295  * from print_register to see if it is unsupported register 
00001B1A  3439 00009000           1296      MOVE.W (RETURN_ADDRESS), D2 
00001B20  0C42 0002               1297      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B24                          1298  
00001B24  4EB9 00001E4E           1299      JSR PRINT_BRA
00001B2A  3238 7006               1300      MOVE.W (OPCODE_ADDRESS), D1 
00001B2E  3401                    1301      MOVE.W D1, D2
00001B30                          1302  * MASKING TO GET DISPLACEMENT OF BRA
00001B30  C47C 00FF               1303      AND.W #BRA_DISP_M, D2
00001B34  3F02                    1304      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B36  6000 F510               1305      BRA FINISH_OPCODE
00001B3A                          1306  BRA_END:
00001B3A  4E75                    1307      RTS
00001B3C                          1308  
00001B3C                          1309  OR:
00001B3C                          1310  * CONSTANT FOR OR OPCODE
00001B3C  =00008000               1311  OR_OPCODE EQU %1000000000000000
00001B3C  =0000F000               1312  OR_M      EQU %1111000000000000
00001B3C  =00000E00               1313  OR_DREG_M EQU %0000111000000000
00001B3C  =000000C0               1314  OR_SIZE_M EQU %0000000011000000
00001B3C  =0000003F               1315  OR_REG_M  EQU %0000000000111111
00001B3C  =00000100               1316  OR_DIREC  EQU %0000000100000000
00001B3C                          1317  
00001B3C  3401                    1318      MOVE.W D1, D2
00001B3E                          1319  * MASKING WITH OR UNIQUE CODE
00001B3E  C47C F000               1320      AND.W #OR_M, D2
00001B42  0C42 8000               1321      CMPI.W #OR_OPCODE, D2
00001B46  6600 00C0               1322      BNE OR_END
00001B4A                          1323  
00001B4A                          1324  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B4A  3401                    1325      MOVE.W D1, D2 
00001B4C  C43C 003F               1326      AND.B #OR_REG_M, D2 
00001B50  3F02                    1327      MOVE.W D2, -(SP)
00001B52  4EB8 11AC               1328      JSR CHECK_SUPPORT_REGISTER
00001B56  544F                    1329      ADDQ #2, SP 
00001B58                          1330  * from print_register to see if it is unsupported register 
00001B58  3439 00009000           1331      MOVE.W (RETURN_ADDRESS), D2 
00001B5E  0C42 0002               1332      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B62                          1333  
00001B62  4EB9 00001E6C           1334      JSR PRINT_OR
00001B68  3238 7006               1335      MOVE.W (OPCODE_ADDRESS), D1
00001B6C  3401                    1336      MOVE.W D1, D2
00001B6E                          1337  * MASKING TO GET SIZE OF OR
00001B6E  C47C 00C0               1338      AND.W #OR_SIZE_M, D2
00001B72  EC42                    1339      ASR.W #6, D2
00001B74  1C02                    1340      MOVE.B D2, D6
00001B76  1F02                    1341      MOVE.B D2, -(SP)
00001B78  4EB8 113A               1342      JSR PRINT_DATA
00001B7C  548F                    1343      ADDQ.L #$02, SP 
00001B7E  4EB8 10B4               1344      JSR PRINT_TAB
00001B82                          1345  * MASKING TO GET DIRECTION OF THIS OR
00001B82  3238 7006               1346      MOVE.W (OPCODE_ADDRESS), D1 
00001B86  3401                    1347      MOVE.W D1, D2  
00001B88  C47C 0100               1348      AND.W #OR_DIREC, D2 
00001B8C  0C42 0100               1349      CMPI.W #OR_DIREC, D2 
00001B90  6600 003C               1350      BNE OR_TO_D  * DN V <EA> -> DN
00001B94                          1351  
00001B94                          1352  OR_TO_EA:  * DN V <EA> -> <EA>
00001B94  3238 7006               1353      MOVE.W (OPCODE_ADDRESS), D1 
00001B98  3401                    1354      MOVE.W D1, D2 
00001B9A  C47C 0E00               1355      AND.W #OR_DREG_M, D2 
00001B9E  E08A                    1356      LSR.L #8, D2 
00001BA0  E28A                    1357      LSR.L #1, D2 
00001BA2  843C 0000               1358      OR.B #%00000000, D2
00001BA6  3F02                    1359      MOVE.W D2, -(SP)
00001BA8  3F3C 0000               1360      MOVE.W #$0, -(SP)
00001BAC  4EB8 1252               1361      JSR PRINT_REGISTER 
00001BB0  5882                    1362      ADDQ.L #4, D2 
00001BB2  4EB8 10D2               1363      JSR PRINT_COMMA 
00001BB6                          1364      
00001BB6  3238 7006               1365      MOVE.W (OPCODE_ADDRESS), D1 
00001BBA  3401                    1366      MOVE.W D1, D2 
00001BBC  C43C 003F               1367      AND.B #OR_REG_M, D2 
00001BC0  3F02                    1368      MOVE.W D2, -(SP)
00001BC2  3F06                    1369      MOVE.W D6, -(SP)
00001BC4  4EB8 1252               1370      JSR PRINT_REGISTER
00001BC8  588F                    1371      ADDQ.L #4, SP 
00001BCA  6000 F47C               1372      BRA FINISH_OPCODE
00001BCE                          1373  
00001BCE                          1374  OR_TO_D:   * <EA> V DN -> DN
00001BCE  3238 7006               1375      MOVE.W (OPCODE_ADDRESS), D1 
00001BD2  3401                    1376      MOVE.W D1, D2 
00001BD4                          1377  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BD4  C43C 003F               1378      AND.B #OR_REG_M, D2 
00001BD8  3F02                    1379      MOVE.W D2, -(SP)
00001BDA  3F06                    1380      MOVE.W D6, -(SP)
00001BDC  4EB8 1252               1381      JSR PRINT_REGISTER
00001BE0  588F                    1382      ADDQ.L #4, SP 
00001BE2  4EB8 10D2               1383      JSR PRINT_COMMA 
00001BE6                          1384  * MASKING TO GET THE DATA REGISTER 
00001BE6  3238 7006               1385      MOVE.W (OPCODE_ADDRESS), D1 
00001BEA  3401                    1386      MOVE.W D1, D2 
00001BEC  C47C 0E00               1387      AND.W #OR_DREG_M, D2 
00001BF0  E04A                    1388      LSR.W #8, D2 
00001BF2  E24A                    1389      LSR.W #1, D2 
00001BF4                          1390      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BF4  843C 0000               1391      OR.B #%00000000, D2 
00001BF8  3F02                    1392      MOVE.W D2, -(SP)
00001BFA  3F3C 0000               1393      MOVE.W #$0, -(SP)
00001BFE  4EB8 1252               1394      JSR PRINT_REGISTER
00001C02  588F                    1395      ADDQ.L #4, SP 
00001C04  6000 F442               1396      BRA FINISH_OPCODE
00001C08                          1397  OR_END:
00001C08  4E75                    1398      RTS
00001C0A                          1399  
00001C0A                          1400  ORI:
00001C0A                          1401  * CONSTANT FOR ORI OPCODE
00001C0A  =00000000               1402  ORI_OPCODE EQU %0000000000000000
00001C0A  =0000FF00               1403  ORI_M      EQU %1111111100000000
00001C0A  =0000003F               1404  ORI_REG_M  EQU %0000000000111111
00001C0A  =000000C0               1405  ORI_SIZE_M EQU %0000000011000000
00001C0A  3401                    1406      MOVE.W D1, D2
00001C0C                          1407  * MASKING WITH ORI UNIQUE CODE
00001C0C  C47C FF00               1408      AND.W #ORI_M, D2
00001C10  B47C 0000               1409      CMP.W #ORI_OPCODE, D2
00001C14  6600 0048               1410      BNE ORI_END
00001C18                          1411  
00001C18                          1412  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C18  3401                    1413      MOVE.W D1, D2 
00001C1A  C43C 003F               1414      AND.B #ORI_REG_M, D2 
00001C1E  3F02                    1415      MOVE.W D2, -(SP)
00001C20  4EB8 11AC               1416      JSR CHECK_SUPPORT_REGISTER
00001C24  544F                    1417      ADDQ #2, SP 
00001C26                          1418  * from print_register to see if it is unsupported register 
00001C26  3439 00009000           1419      MOVE.W (RETURN_ADDRESS), D2 
00001C2C  0C42 0002               1420      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C30  6700 F416               1421      BEQ FINISH_OPCODE
00001C34                          1422  
00001C34  4EB9 00001E7A           1423      JSR PRINT_ORI
00001C3A  3238 7006               1424      MOVE.W (OPCODE_ADDRESS), D1
00001C3E  3401                    1425      MOVE.W D1, D2
00001C40                          1426  * MASKING TO GET SIZE OF ORI
00001C40  C47C 00C0               1427      AND.W #ORI_SIZE_M, D2 
00001C44  EC42                    1428      ASR.W #6, D2
00001C46  1C02                    1429      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C48  1F06                    1430      MOVE.B D6, -(SP)
00001C4A  4EB8 113A               1431      JSR PRINT_DATA
00001C4E  548F                    1432      ADDQ.L #$02, SP
00001C50  4EB8 10B4               1433      JSR PRINT_TAB
00001C54                          1434   
00001C54  3238 7006               1435      MOVE.W (OPCODE_ADDRESS), D1     
00001C58  3401                    1436      MOVE.W D1, D2
00001C5A                          1437      *------------------------------------
00001C5A                          1438      * AND.W #ORI_REG_M, D2 
00001C5A                          1439      * LSR.L #8, D2 
00001C5A                          1440      * LSR.L #1, D2 
00001C5A                          1441      * OR.B #%00000000, D2
00001C5A                          1442      * MOVE.W D2, -(SP)
00001C5A                          1443      * MOVE.W #$0, -(SP)
00001C5A                          1444      * JSR PRINT_REGISTER 
00001C5A                          1445      * ADDQ.L #4, D2 
00001C5A                          1446      * JSR PRINT_COMMA 
00001C5A                          1447      
00001C5A                          1448      * AND.B #ORI_REG_M, D2 
00001C5A                          1449      * MOVE.W D2, -(SP)
00001C5A                          1450      * MOVE.W D6, -(SP)
00001C5A                          1451      * JSR PRINT_REGISTER
00001C5A                          1452      * ADDQ.L #4, SP 
00001C5A                          1453      *------------------------------------
00001C5A  6000 F3EC               1454      BRA FINISH_OPCODE
00001C5E                          1455  ORI_END:
00001C5E  4E75                    1456      RTS
00001C60                          1457  
00001C60                          1458  EOR:
00001C60                          1459  * CONSTANT FEOR EOR OPCODE
00001C60  =0000B000               1460  EOR_OPCODE EQU %1011000000000000
00001C60  =0000F000               1461  EOR_M      EQU %1111000000000000
00001C60  =00000E00               1462  EOR_DREG_M EQU %0000111000000000
00001C60  =000000C0               1463  EOR_SIZE_M EQU %0000000011000000
00001C60  =0000003F               1464  EOR_REG_M  EQU %0000000000111111
00001C60  =00000100               1465  EOR_DIREC  EQU %0000000100000000
00001C60                          1466  
00001C60  3401                    1467      MOVE.W D1, D2
00001C62                          1468  * MASKING WITH EOR UNIQUE CODE
00001C62  C47C F000               1469      AND.W #EOR_M, D2
00001C66  B47C B000               1470      CMP.W #EOR_OPCODE, D2
00001C6A  6600 0074               1471      BNE EOR_END
00001C6E                          1472  
00001C6E                          1473  * CHECK TO MAKE SURE WE SUPPEORT THE EA
00001C6E  3401                    1474      MOVE.W D1, D2 
00001C70  C43C 003F               1475      AND.B #EOR_REG_M, D2 
00001C74  3F02                    1476      MOVE.W D2, -(SP)
00001C76  4EB8 11AC               1477      JSR CHECK_SUPPORT_REGISTER
00001C7A  544F                    1478      ADDQ #2, SP 
00001C7C                          1479  * from print_register to see if it is unsuppEorted register 
00001C7C  3439 00009000           1480      MOVE.W (RETURN_ADDRESS), D2 
00001C82  0C42 0002               1481      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C86                          1482  
00001C86  4EB9 00001E88           1483      JSR PRINT_EOR
00001C8C  3238 7006               1484      MOVE.W (OPCODE_ADDRESS), D1
00001C90  3401                    1485      MOVE.W D1, D2
00001C92                          1486  * MASKING TO GET SIZE OF EOR
00001C92  C47C 00C0               1487      AND.W #EOR_SIZE_M, D2
00001C96  EC42                    1488      ASR.W #6, D2
00001C98  1C02                    1489      MOVE.B D2, D6
00001C9A  1F02                    1490      MOVE.B D2, -(SP)
00001C9C  4EB8 113A               1491      JSR PRINT_DATA
00001CA0  548F                    1492      ADDQ.L #$02, SP 
00001CA2  4EB8 10B4               1493      JSR PRINT_TAB
00001CA6                          1494  
00001CA6                          1495  * <EA> EOR DN -> <EA>
00001CA6  3238 7006               1496      MOVE.W (OPCODE_ADDRESS), D1 
00001CAA  3401                    1497      MOVE.W D1, D2 
00001CAC  C47C 0E00               1498      AND.W #EOR_DREG_M, D2 
00001CB0  E08A                    1499      LSR.L #8, D2 
00001CB2  E28A                    1500      LSR.L #1, D2 
00001CB4  843C 0000               1501      OR.B #%00000000, D2
00001CB8  3F02                    1502      MOVE.W D2, -(SP)
00001CBA  3F3C 0000               1503      MOVE.W #$0, -(SP)
00001CBE  4EB8 1252               1504      JSR PRINT_REGISTER 
00001CC2  5882                    1505      ADDQ.L #4, D2 
00001CC4  4EB8 10D2               1506      JSR PRINT_COMMA 
00001CC8                          1507      
00001CC8  3238 7006               1508      MOVE.W (OPCODE_ADDRESS), D1 
00001CCC  3401                    1509      MOVE.W D1, D2 
00001CCE  C43C 003F               1510      AND.B #EOR_REG_M, D2 
00001CD2  3F02                    1511      MOVE.W D2, -(SP)
00001CD4  3F06                    1512      MOVE.W D6, -(SP)
00001CD6  4EB8 1252               1513      JSR PRINT_REGISTER
00001CDA  588F                    1514      ADDQ.L #4, SP 
00001CDC  6000 F36A               1515      BRA FINISH_OPCODE
00001CE0                          1516  
00001CE0                          1517  EOR_END:
00001CE0  4E75                    1518      RTS
00001CE2                          1519  
00001CE2                          1520  SUB:
00001CE2                          1521  * CONSTANT FOR SUB OPCODE
00001CE2  =00009000               1522  SUB_OPCODE EQU %1001000000000000
00001CE2  =0000F000               1523  SUB_M      EQU %1111000000000000
00001CE2  =00000E00               1524  SUB_DREG_M EQU %0000111000000000
00001CE2  =000000C0               1525  SUB_SIZE_M EQU %0000000011000000
00001CE2  =0000003F               1526  SUB_REG_M  EQU %0000000000111111
00001CE2  =00000100               1527  SUB_DIREC  EQU %0000000100000000
00001CE2                          1528  
00001CE2  3401                    1529      MOVE.W D1, D2
00001CE4                          1530  * MASKING WITH SUB UNIQUE CODE
00001CE4  C47C F000               1531      AND.W #SUB_M, D2
00001CE8  0C42 9000               1532      CMPI.W #SUB_OPCODE, D2
00001CEC  6600 00C0               1533      BNE SUB_END
00001CF0                          1534  
00001CF0                          1535  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001CF0  3401                    1536      MOVE.W D1, D2 
00001CF2  C43C 003F               1537      AND.B #SUB_REG_M, D2 
00001CF6  3F02                    1538      MOVE.W D2, -(SP)
00001CF8  4EB8 11AC               1539      JSR CHECK_SUPPORT_REGISTER
00001CFC  544F                    1540      ADDQ #2, SP 
00001CFE                          1541  * from print_register to see if it is unsupported register 
00001CFE  3439 00009000           1542      MOVE.W (RETURN_ADDRESS), D2 
00001D04  0C42 0002               1543      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001D08                          1544  
00001D08  4EB9 00001EF2           1545      JSR PRINT_SUB
00001D0E  3238 7006               1546      MOVE.W (OPCODE_ADDRESS), D1
00001D12  3401                    1547      MOVE.W D1, D2
00001D14                          1548  * MASKING TO GET SIZE OF SUB
00001D14  C47C 00C0               1549      AND.W #SUB_SIZE_M, D2
00001D18  EC42                    1550      ASR.W #6, D2
00001D1A  1C02                    1551      MOVE.B D2, D6
00001D1C  1F02                    1552      MOVE.B D2, -(SP)
00001D1E  4EB8 113A               1553      JSR PRINT_DATA
00001D22  548F                    1554      ADDQ.L #$02, SP 
00001D24  4EB8 10B4               1555      JSR PRINT_TAB
00001D28                          1556  * MASKING TO GET DIRECTION OF THIS SUB
00001D28  3238 7006               1557      MOVE.W (OPCODE_ADDRESS), D1 
00001D2C  3401                    1558      MOVE.W D1, D2  
00001D2E  C47C 0100               1559      AND.W #SUB_DIREC, D2 
00001D32  0C42 0100               1560      CMPI.W #SUB_DIREC, D2 
00001D36  6600 003C               1561      BNE SUB_TO_D  * DN - <EA> -> DN
00001D3A                          1562  
00001D3A                          1563  SUB_TO_EA:  * <EA> - DN -> <EA>
00001D3A  3238 7006               1564      MOVE.W (OPCODE_ADDRESS), D1 
00001D3E  3401                    1565      MOVE.W D1, D2 
00001D40  C47C 0E00               1566      AND.W #SUB_DREG_M, D2 
00001D44  E08A                    1567      LSR.L #8, D2 
00001D46  E28A                    1568      LSR.L #1, D2 
00001D48  843C 0000               1569      OR.B #%00000000, D2
00001D4C  3F02                    1570      MOVE.W D2, -(SP)
00001D4E  3F3C 0000               1571      MOVE.W #$0, -(SP)
00001D52  4EB8 1252               1572      JSR PRINT_REGISTER 
00001D56  5882                    1573      ADDQ.L #4, D2 
00001D58  4EB8 10D2               1574      JSR PRINT_COMMA 
00001D5C                          1575      
00001D5C  3238 7006               1576      MOVE.W (OPCODE_ADDRESS), D1 
00001D60  3401                    1577      MOVE.W D1, D2 
00001D62  C43C 003F               1578      AND.B #SUB_REG_M, D2 
00001D66  3F02                    1579      MOVE.W D2, -(SP)
00001D68  3F06                    1580      MOVE.W D6, -(SP)
00001D6A  4EB8 1252               1581      JSR PRINT_REGISTER
00001D6E  588F                    1582      ADDQ.L #4, SP 
00001D70  6000 F2D6               1583      BRA FINISH_OPCODE
00001D74                          1584  
00001D74                          1585  SUB_TO_D:   * DN - <EA> -> DN
00001D74  3238 7006               1586      MOVE.W (OPCODE_ADDRESS), D1 
00001D78  3401                    1587      MOVE.W D1, D2 
00001D7A                          1588  * MASKING TO GET THE EFFECTIVE ADDRESS
00001D7A  C43C 003F               1589      AND.B #SUB_REG_M, D2 
00001D7E  3F02                    1590      MOVE.W D2, -(SP)
00001D80  3F06                    1591      MOVE.W D6, -(SP)
00001D82  4EB8 1252               1592      JSR PRINT_REGISTER
00001D86  588F                    1593      ADDQ.L #4, SP 
00001D88  4EB8 10D2               1594      JSR PRINT_COMMA 
00001D8C                          1595  * MASKING TO GET THE DATA REGISTER 
00001D8C  3238 7006               1596      MOVE.W (OPCODE_ADDRESS), D1 
00001D90  3401                    1597      MOVE.W D1, D2 
00001D92  C47C 0E00               1598      AND.W #SUB_DREG_M, D2 
00001D96  E04A                    1599      LSR.W #8, D2 
00001D98  E24A                    1600      LSR.W #1, D2 
00001D9A                          1601  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001D9A  843C 0000               1602      OR.B #%00000000, D2 
00001D9E  3F02                    1603      MOVE.W D2, -(SP)
00001DA0  3F3C 0000               1604      MOVE.W #$0, -(SP)
00001DA4  4EB8 1252               1605      JSR PRINT_REGISTER
00001DA8  588F                    1606      ADDQ.L #4, SP 
00001DAA  6000 F29C               1607      BRA FINISH_OPCODE
00001DAE                          1608  SUB_END:
00001DAE  4E75                    1609      RTS
00001DB0                          1610  
00001DB0                          1611  DIVS:
00001DB0                          1612  * CONSTANT FOR DIVS OPCODE
00001DB0  =000081C0               1613  DIVS_OPCODE EQU %1000000111000000
00001DB0  =0000F1C0               1614  DIVS_M      EQU %1111000111000000
00001DB0  =00000E00               1615  DIVS_DREG_M EQU %0000111000000000
00001DB0  =0000003F               1616  DIVS_REG_M  EQU %0000000000111111
00001DB0                          1617  
00001DB0  3401                    1618      MOVE.W D1, D2
00001DB2                          1619  * MASKING WITH DIVS UNIQUE CODE
00001DB2  C47C F1C0               1620      AND.W #DIVS_M, D2
00001DB6  0C42 81C0               1621      CMPI.W #DIVS_OPCODE, D2
00001DBA  6600 006E               1622      BNE DIVS_END
00001DBE                          1623  
00001DBE                          1624  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001DBE  3401                    1625      MOVE.W D1, D2 
00001DC0  C43C 003F               1626      AND.B #DIVS_REG_M, D2 
00001DC4  3F02                    1627      MOVE.W D2, -(SP)
00001DC6  4EB8 11AC               1628      JSR CHECK_SUPPORT_REGISTER
00001DCA  544F                    1629      ADDQ #2, SP 
00001DCC                          1630  * from print_register to see if it is unsupported register 
00001DCC  3439 00009000           1631      MOVE.W (RETURN_ADDRESS), D2 
00001DD2  0C42 0002               1632      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001DD6                          1633  
00001DD6  4EB9 00001F00           1634      JSR PRINT_DIVS
00001DDC  3238 7006               1635      MOVE.W (OPCODE_ADDRESS), D1
00001DE0                          1636  * GET SIZE OF DIVS
00001DE0  1C3C 0001               1637      MOVE.B #$01, D6
00001DE4  1F06                    1638      MOVE.B D6, -(SP)
00001DE6  4EB8 113A               1639      JSR PRINT_DATA
00001DEA  548F                    1640      ADDQ.L #$02, SP 
00001DEC  4EB8 10B4               1641      JSR PRINT_TAB
00001DF0                          1642  
00001DF0                          1643  * DN - <EA> -> DN
00001DF0  3238 7006               1644      MOVE.W (OPCODE_ADDRESS), D1 
00001DF4  3401                    1645      MOVE.W D1, D2 
00001DF6                          1646  * MASKING TO GET THE EFFECTIVE ADDRESS
00001DF6  C43C 003F               1647      AND.B #DIVS_REG_M, D2 
00001DFA  3F02                    1648      MOVE.W D2, -(SP)
00001DFC  3F06                    1649      MOVE.W D6, -(SP)
00001DFE  4EB8 1252               1650      JSR PRINT_REGISTER
00001E02  588F                    1651      ADDQ.L #4, SP 
00001E04  4EB8 10D2               1652      JSR PRINT_COMMA 
00001E08                          1653  * MASKING TO GET THE DATA REGISTER 
00001E08  3238 7006               1654      MOVE.W (OPCODE_ADDRESS), D1 
00001E0C  3401                    1655      MOVE.W D1, D2 
00001E0E  C47C 0E00               1656      AND.W #DIVS_DREG_M, D2 
00001E12  E04A                    1657      LSR.W #8, D2 
00001E14  E24A                    1658      LSR.W #1, D2 
00001E16                          1659  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001E16  843C 0000               1660      OR.B #%00000000, D2 
00001E1A  3F02                    1661      MOVE.W D2, -(SP)
00001E1C  3F3C 0000               1662      MOVE.W #$0, -(SP)
00001E20  4EB8 1252               1663      JSR PRINT_REGISTER
00001E24  588F                    1664      ADDQ.L #4, SP 
00001E26  6000 F220               1665      BRA FINISH_OPCODE
00001E2A                          1666  DIVS_END:
00001E2A  4E75                    1667      RTS    
00001E2C                          1668  
00001E2C                          1669  * ROR:
00001E2C                          1670  * * CONSTANT FOR ROR OPCODE
00001E2C                          1671  * ROR_OPCODE EQU %
00001E2C                          1672  * ROR_M      EQU %
00001E2C                          1673  * ROR_SIZE_M EQU %
00001E2C                          1674  *     CLR.W D2
00001E2C                          1675  *     MOVE.W D1, D2
00001E2C                          1676  * * MASKING WITH ROR UNIQUE CODE
00001E2C                          1677  *     AND.W #ROR_M, D2
00001E2C                          1678  *     CMP.W #ROR_OPCODE, D2
00001E2C                          1679  *     BNE ROR_END
00001E2C                          1680  *     JSR PRINT_ROR
00001E2C                          1681  *     MOVE.W D1, D2
00001E2C                          1682  *     MOVE.W D1, D3
00001E2C                          1683  * * MASKING TO GET SIZE OF ROR
00001E2C                          1684  *     CMP.W #ROR_SIZE_M, D2 
00001E2C                          1685  * ROR_END:
00001E2C                          1686  *     RTS
00001E2C                          1687  
00001E2C                          1688  * ROL:
00001E2C                          1689  * * CONSTANT FROR ROL OPCODE
00001E2C                          1690  * ROL_OPCODE EQU %
00001E2C                          1691  * ROL_M      EQU %
00001E2C                          1692  * ROL_SIZE_M EQU %
00001E2C                          1693  *     CLR.W D2
00001E2C                          1694  *     MOVE.W D1, D2
00001E2C                          1695  * * MASKING WITH ROL UNIQUE CODE
00001E2C                          1696  *     AND.W #ROL_M, D2
00001E2C                          1697  *     CMP.W #ROL_OPCODE, D2
00001E2C                          1698  *     BNE ROL_END
00001E2C                          1699  *     JSR PRINT_ROL
00001E2C                          1700  *     MOVE.W D1, D2
00001E2C                          1701  *     MOVE.W D1, D3
00001E2C                          1702  * * MASKING TO GET SIZE OF ROL
00001E2C                          1703  *     CMP.W #ROL_SIZE_M, D2 
00001E2C                          1704  * ROL_END:
00001E2C                          1705  *     RTS
00001E2C                          1706  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001E2C                          1707  
00001E2C                          1708  
00001E2C                          1709  PRINT_RTS:
00001E2C  43F9 00001F38           1710      LEA P_RTS, A1
00001E32  103C 000E               1711      MOVE.B #14, D0
00001E36  4E4F                    1712      TRAP #15
00001E38  4EB8 10B4               1713      JSR PRINT_TAB
00001E3C  6000 F20A               1714      BRA FINISH_OPCODE
00001E40                          1715  PRINT_NEG:
00001E40  43F9 00001F78           1716      LEA P_NEG, A1
00001E46  103C 000E               1717      MOVE.B #14, D0
00001E4A  4E4F                    1718      TRAP #15
00001E4C  4E75                    1719      RTS 
00001E4E                          1720  PRINT_BRA:
00001E4E  43F9 00001FB6           1721      LEA P_BRA, A1
00001E54  103C 000E               1722      MOVE.B #14, D0
00001E58  4E4F                    1723      TRAP #15
00001E5A  4E75                    1724      RTS 
00001E5C                          1725  PRINT_NOP:
00001E5C  43F9 00001F3C           1726      LEA P_NOP, A1
00001E62  103C 000E               1727      MOVE.B #14, D0
00001E66  4E4F                    1728      TRAP #15
00001E68  6000 F1DE               1729      BRA FINISH_OPCODE
00001E6C                          1730  PRINT_OR:
00001E6C  43F9 00001F71           1731      LEA P_OR, A1
00001E72  103C 000E               1732      MOVE.B #14, D0
00001E76  4E4F                    1733      TRAP #15
00001E78  4E75                    1734      RTS 
00001E7A                          1735  PRINT_ORI:
00001E7A  43F9 00001F74           1736      LEA P_ORI, A1
00001E80  103C 000E               1737      MOVE.B #14, D0
00001E84  4E4F                    1738      TRAP #15
00001E86  4E75                    1739      RTS
00001E88                          1740  PRINT_EOR:
00001E88  43F9 00001F7C           1741      LEA P_EOR, A1
00001E8E  103C 000E               1742      MOVE.B #14, D0
00001E92  4E4F                    1743      TRAP #15
00001E94  4E75                    1744      RTS 
00001E96                          1745  PRINT_ROL:
00001E96  43F9 00001F90           1746      LEA P_ROL, A1
00001E9C  103C 000E               1747      MOVE.B #14, D0
00001EA0  4E4F                    1748      TRAP #15
00001EA2  4E75                    1749      RTS 
00001EA4                          1750  PRINT_ROR:
00001EA4  43F9 00001F94           1751      LEA P_ROR, A1
00001EAA  103C 000E               1752      MOVE.B #14, D0
00001EAE  4E4F                    1753      TRAP #15
00001EB0  4E75                    1754      RTS 
00001EB2                          1755  PRINT_JSR:
00001EB2  43F9 00001FBA           1756      LEA P_JSR, A1
00001EB8  103C 000E               1757      MOVE.B #14, D0
00001EBC  4E4F                    1758      TRAP #15
00001EBE  4EB8 10B4               1759      JSR PRINT_TAB
00001EC2  4E75                    1760      RTS 
00001EC4                          1761  PRINT_LEA:
00001EC4  43F9 00001F6D           1762      LEA P_LEA, A1
00001ECA  103C 000E               1763      MOVE.B #14, D0
00001ECE  4E4F                    1764      TRAP #15
00001ED0  4EB8 10B4               1765      JSR PRINT_TAB
00001ED4  4E75                    1766      RTS 
00001ED6                          1767  PRINT_ADDA: 
00001ED6  43F9 00001F55           1768      LEA P_ADDA, A1 
00001EDC  103C 000E               1769      MOVE.B #14, D0
00001EE0  4E4F                    1770      TRAP #15 
00001EE2  4E75                    1771      RTS
00001EE4                          1772  PRINT_ADD:
00001EE4  43F9 00001F51           1773      LEA P_ADD, A1 
00001EEA  103C 000E               1774      MOVE.B #14, D0 
00001EEE  4E4F                    1775      TRAP #15
00001EF0  4E75                    1776      RTS
00001EF2                          1777  PRINT_SUB:
00001EF2  43F9 00001F5A           1778      LEA P_SUB, A1 
00001EF8  103C 000E               1779      MOVE.B #14, D0 
00001EFC  4E4F                    1780      TRAP #15
00001EFE  4E75                    1781      RTS
00001F00                          1782  PRINT_DIVS:
00001F00  43F9 00001F68           1783      LEA P_DIVS, A1 
00001F06  103C 000E               1784      MOVE.B #14, D0 
00001F0A  4E4F                    1785      TRAP #15
00001F0C  4E75                    1786      RTS
00001F0E                          1787  PRINT_MOVEA: 
00001F0E  43F9 00001F45           1788      LEA P_MOVEA, A1 
00001F14  103C 000E               1789      MOVE.B #14, D0 
00001F18  4E4F                    1790      TRAP #15 
00001F1A  4E75                    1791      RTS 
00001F1C                          1792  PRINT_MOVE: 
00001F1C  43F9 00001F40           1793      LEA P_MOVE, A1 
00001F22  103C 000E               1794      MOVE.B #14, D0 
00001F26  4E4F                    1795      TRAP #15 
00001F28  4E75                    1796      RTS 
00001F2A                          1797  PRINT_UNSUPPORTED: 
00001F2A  43F9 00001FBE           1798      LEA P_DATA, A1 
00001F30  103C 000E               1799      MOVE.B #14, D0 
00001F34  4E4F                    1800      TRAP #15 
00001F36  4E75                    1801      RTS 
00001F38                          1802  
00001F38                          1803  
00001F38                          1804  
00001F38                          1805  
00001F38                          1806  
00001F38                          1807  
00001F38                          1808  
00001F38                          1809  
00001F38                          1810  
00001F38= 52 54 53 00             1811  P_RTS DC.B 'RTS',0          *-----------------DONE-----------------*
00001F3C= 4E 4F 50 00             1812  P_NOP DC.B 'NOP',0          *-----------------DONE-----------------*
00001F40= 4D 4F 56 45 00          1813  P_MOVE DC.B 'MOVE',0        *-----------------DONE-----------------*
00001F45= 4D 4F 56 45 41 00       1814  P_MOVEA DC.B 'MOVEA', 0     *-----------------DONE-----------------*
00001F4B= 4D 4F 56 45 4D 00       1815  P_MOVEM DC.B 'MOVEM', 0
00001F51= 41 44 44 00             1816  P_ADD DC.B 'ADD', 0         *-----------------DONE-----------------*
00001F55= 41 44 44 41 00          1817  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
00001F5A= 53 55 42 00             1818  P_SUB DC.B 'SUB', 0
00001F5E= 53 55 42 51 00          1819  P_SUBQ DC.B 'SUBQ',0
00001F63= 4D 55 4C 53 00          1820  P_MULS DC.B 'MULS',0
00001F68= 44 49 56 53 00          1821  P_DIVS DC.B 'DIVS',0
00001F6D= 4C 45 41 00             1822  P_LEA DC.B 'LEA',0          *-----------------DONE-----------------*
00001F71= 4F 52 00                1823  P_OR DC.B 'OR',0            *-----------------DONE-----------------*
00001F74= 4F 52 49 00             1824  P_ORI DC.B 'ORI', 0         *------------IN PROGRESS---------------*
00001F78= 4E 45 47 00             1825  P_NEG DC.B 'NEG', 0         *-----------------DONE-----------------*
00001F7C= 45 4F 52 00             1826  P_EOR DC.B 'EOR', 0         *-----------------DONE-----------------*
00001F80= 4C 53 52 00             1827  P_LSR DC.B 'LSR',0
00001F84= 4C 53 4C 00             1828  P_LSL DC.B 'LSL', 0
00001F88= 41 53 52 00             1829  P_ASR DC.B 'ASR', 0
00001F8C= 41 53 4C 00             1830  P_ASL DC.B 'ASL',0 
00001F90= 52 4F 4C 00             1831  P_ROL DC.B 'ROL', 0
00001F94= 52 4F 52 00             1832  P_ROR DC.B 'ROR', 0
00001F98= 42 43 4C 52 00          1833  P_BCLR DC.B 'BCLR',0
00001F9D= 43 4D 50 00             1834  P_CMP DC.B 'CMP', 0
00001FA1= 43 4D 50 49 00          1835  P_CMPI DC.B 'CMPI', 0
00001FA6= 42 43 53 00             1836  P_BCS DC.B 'BCS', 0
00001FAA= 42 47 45 00             1837  P_BGE DC.B 'BGE', 0
00001FAE= 42 4C 54 00             1838  P_BLT DC.B 'BLT',0
00001FB2= 42 56 43 00             1839  P_BVC DC.B 'BVC', 0
00001FB6= 42 52 41 00             1840  P_BRA DC.B 'BRA',0          *------------IN PROGRESS---------------*
00001FBA= 4A 53 52 00             1841  P_JSR DC.B 'JSR',0          *-----------------DONE-----------------*
00001FBE= 44 41 54 41 00          1842  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
00001FC3                          1843  
00001FC3                          1844  
00001FC3  =00000004               1845  WORD_LENGTH EQU $04
00001FC3  =00000008               1846  LONG_LENGTH EQU $08
00001FC3= 31 30 30 32 30 30 ...   1847  TEST_VAL DC.B '10020009'
00001FCB  =0000000A               1848  LF EQU $0A
00001FCB  =0000000D               1849  CR EQU $0D
00001FCB  =00000009               1850  HT  EQU  $09 
00001FCB= 20 0D 0A 00             1851  NEW_LINE DC.B ' ',CR,LF,0
00001FCF                          1852  SIMHALT             ; halt simulator
00001FCF                          1853  * Put variables and constants here
00001FCF                          1854  
00001FCF                          1855  
00001FCF                          1856  
00001FCF                          1857  
00001FCF                          1858  
00001FCF                          1859  
00001FCF= 50 6C 65 61 73 65 ...   1860  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001FFE= 50 6C 65 61 73 65 ...   1861  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
0000202B= 50 72 65 73 73 20 ...   1862  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00002045                          1863      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 184E
ADDA                17CA
ADDA_AN_MASKING     E00
ADDA_END            184C
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             191E
ADD_FROM_D          18AA
ADD_TO_D            18E4
ASCII_TO_HEX        15D0
ASCII_TO_HEX_CHECK_GT_0  15FC
ASCII_TO_HEX_CHECK_GT_A  1610
ASCII_TO_HEX_CHECK_LT_9  1604
ASCII_TO_HEX_CHECK_LT_F  161C
ASCII_TO_HEX_CONVERT_LETTER  1642
ASCII_TO_HEX_CONVERT_NUMBER  1628
ASCII_TO_HEX_END_LOOP  165C
ASCII_TO_HEX_FAILED_0  1662
ASCII_TO_HEX_FAILED_2  1668
ASCII_TO_HEX_LOOP   15F0
ASCII_TO_HEX_RETURN_OK  1
BRA                 1AFE
BRA_DISP_M          FF
BRA_END             1B3A
BRA_M               FF00
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  15A2
CHECK_VALUE_IS_ODD_FAILED  15CA
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  129A
CONTINUE_PRINT_RE_NUMBER  12B6
CONVERT_OPMODE_SIZE_B  1980
CONVERT_OPMODE_SIZE_W  1986
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DIVS                1DB0
DIVS_DREG_M         E00
DIVS_END            1E2A
DIVS_M              F1C0
DIVS_OPCODE         81C0
DIVS_REG_M          3F
DONE_PRINT_NUMBER   12D4
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C8
END_FETCH_OPCODES   168C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1594
END_JUMP_TABLE      16F8
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       153C
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12FE
END_PRINT_TAB       10CA
EOR                 1C60
EOR_DIREC           100
EOR_DREG_M          E00
EOR_END             1CE0
EOR_M               F000
EOR_OPCODE          B000
EOR_REG_M           3F
EOR_SIZE_M          C0
FETCH_OPCODES       167A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  152A
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1556
HEX_MASKING         F
HEX_TO_ASCII        153E
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  158A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   155E
HEX_TO_ASCII_NUMBER  1580
HEX_TO_ASCII_ROR    159E
HEX_TO_ASCII_SWAP   159A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  166E
JSR                 1710
JSR_END             175A
JSR_OPCODE          4E80
JUMP_TABLE          168E
LEA                 175C
LEA_END             17C8
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVE                19D6
MOVEA               1920
MOVEA_DONE_CONVERT  198C
MOVEA_END           19D4
MOVEA_REGISTER_OK   1940
MOVEM               1A9A
MOVE_DONE_CONVERT   1A70
MOVE_END            19F4
MOVE_MATCH_PATTERN  19F6
MOVE_OPMODE_BYTE    1A64
MOVE_OPMODE_WORD    1A6A
NEG                 1A9A
NEG_END             1AFC
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1FCB
NOP                 16FC
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B3C
ORI                 1C0A
ORI_END             1C5E
ORI_M               FF00
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1C08
OR_M                F000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BCE
OR_TO_EA            1B94
OUTPUT_ADDRESS      7010
PRINT_A             150C
PRINT_AB_LONG       1428
PRINT_AB_SHORT      13C6
PRINT_ADD           1EE4
PRINT_ADDA          1ED6
PRINT_BRA           1E4E
PRINT_BYTE          1164
PRINT_CLOSE         14BE
PRINT_CLOSE_PLUS    14D8
PRINT_COMMA         10D2
PRINT_D             14F2
PRINT_DATA          113A
PRINT_DIVS          1F00
PRINT_DOLLAR_SIGN   10EA
PRINT_EOR           1E88
PRINT_HASH_SIGN     1102
PRINT_HEX           1526
PRINT_IMMEDIATE     1300
PRINT_IMMEDIATE_BYTE  133C
PRINT_IMMEDIATE_LONG  1392
PRINT_IMMEDIATE_WORD  1366
PRINT_JSR           1EB2
PRINT_LEA           1EC4
PRINT_LONG          117C
PRINT_MINUS_OPEN    14A4
PRINT_MOVE          1F1C
PRINT_MOVEA         1F0E
PRINT_NEG           1E40
PRINT_NEW_LINE      111A
PRINT_NOP           1E5C
PRINT_OPEN          148A
PRINT_OR            1E6C
PRINT_ORI           1E7A
PRINT_PC            1188
PRINT_REGISTER      1252
PRINT_ROL           1E96
PRINT_ROR           1EA4
PRINT_RTS           1E2C
PRINT_SUB           1EF2
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1F2A
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  202B
PROMT_INPUT_END     1FFE
PROMT_INPUT_START   1FCF
P_ADD               1F51
P_ADDA              1F55
P_ASL               1F8C
P_ASR               1F88
P_BCLR              1F98
P_BCS               1FA6
P_BGE               1FAA
P_BLT               1FAE
P_BRA               1FB6
P_BVC               1FB2
P_CMP               1F9D
P_CMPI              1FA1
P_DATA              1FBE
P_DIVS              1F68
P_EOR               1F7C
P_JSR               1FBA
P_LEA               1F6D
P_LSL               1F84
P_LSR               1F80
P_MOVE              1F40
P_MOVEA             1F45
P_MOVEM             1F4B
P_MULS              1F63
P_NEG               1F78
P_NOP               1F3C
P_OR                1F71
P_ORI               1F74
P_ROL               1F90
P_ROR               1F94
P_RTS               1F38
P_SUB               1F5A
P_SUBQ              1F5E
RETURN_ADDRESS      9000
RTS                 1706
SIMHALT             1FCF
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
SUB                 1CE2
SUB_DIREC           100
SUB_DREG_M          E00
SUB_END             1DAE
SUB_M               F000
SUB_OPCODE          9000
SUB_REG_M           3F
SUB_SIZE_M          C0
SUB_TO_D            1D74
SUB_TO_EA           1D3A
TEST_VAL            1FC3
UNSUPPORT_OPCODE    11E6
UNSUPPORT_REGISTER  121A
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
