00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/27/2018 2:01:10 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : HEX DUMP Disassembler
00000000                             3  * Written by : Trinh Ta and Leo Le
00000000                             4  * Date       : 11/20/2018
00000000                             5  * Description: This is the final project of CSS 422
00000000                             6  *              This disassembler will take in the starting address
00000000                             7  *              and ending address of the user, then will start 
00000000                             8  *              disassemble the data within that specific section
00000000                             9  *              into assembly code and output back to the user.
00000000                            10  *              Each page will have a limit of offset in the 
00000000                            11  *              memory, so to move forward, press ENTER to get
00000000                            12  *              the next data page.
00000000                            13  *              The program will go on until it reaches the end
00000000                            14  *              of the ending address provided.
00000000                            15  *-------------------------------------------------------------------------------
00001000                            16      ORG    $1000
00001000                            17  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                 18  OUTPUT_ADDRESS EQU $7010
00001000                            19  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 20  RETURN_ADDRESS EQU $9000
00001000                            21  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 22  START_ADDRESS EQU $09100
00001000                            23  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 24  END_ADDRESS EQU $7004
00001000                            25  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 26  OPCODE_ADDRESS EQU $7006
00001000                            27  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            28  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            29  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            30  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 31  OFFSET_OPC_ADDRES EQU $7008 
00001000                            32  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 33  SIZE_OPCODE EQU $700A
00001000                            34  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 35  STORE_REGISTER_ADDRESS EQU $700C
00001000                            36  * LOCATION TO STORE STACK ADDRESS VALUE
00001000  =00008000                 37  STACK_ADDRESS EQU $8000
00001000                            38  START:
00001000                            39      * MOVE.L #$10AF241B, -(SP)
00001000                            40      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            41      * JSR PRINT_HEX
00001000                            42      * ADDQ.L #$08, SP
00001000                            43  
00001000                            44      * JSR PRINT_NEW_LINE
00001000                            45  
00001000                            46      * JSR PRINT_TAB
00001000                            47      * A0
00001000                            48  *     MOVE.L #%0000011100000100, D1
00001000                            49  *     MOVE.L D1, -(SP)
00001000                            50  *     JSR PRINT_REGISTER
00001000                            51  *     ADDQ.L #4, SP
00001000                            52  *     * A1
00001000                            53  *     MOVE.W #%0100, D1
00001000                            54  *     SWAP D1
00001000                            55  *     MOVE.W #$1, D1
00001000                            56  *     MOVE.L D1, -(SP)
00001000                            57  *     JSR PRINT_REGISTER
00001000                            58  *     ADDQ.L #4, SP
00001000                            59  * * A2
00001000                            60  *     MOVE.W #%0011, D1
00001000                            61  *     SWAP D1
00001000                            62  *     MOVE.W #$2, D1
00001000                            63  *     MOVE.L D1, -(SP)
00001000                            64  *     JSR PRINT_REGISTER
00001000                            65  *     ADDQ.L #4, SP
00001000                            66  * * A3
00001000                            67  *     MOVE.W #%0011, D1
00001000                            68  *     SWAP D1
00001000                            69  *     MOVE.W #$3, D1
00001000                            70  *     MOVE.L D1, -(SP)
00001000                            71  *     JSR PRINT_REGISTER
00001000                            72  *     ADDQ.L #4, SP
00001000                            73  * * A4
00001000                            74  *     MOVE.W #%0011, D1
00001000                            75  *     SWAP D1
00001000                            76  *     MOVE.W #$4, D1
00001000                            77  *     MOVE.L D1, -(SP)
00001000                            78  *     JSR PRINT_REGISTER
00001000                            79  *     ADDQ.L #4, SP
00001000                            80  * * A5
00001000                            81  *     MOVE.W #%0011, D1
00001000                            82  *     SWAP D1
00001000                            83  *     MOVE.W #$5, D1
00001000                            84  *     MOVE.L D1, -(SP)
00001000                            85  *     JSR PRINT_REGISTER
00001000                            86  *     ADDQ.L #4, SP
00001000                            87  * * A6
00001000                            88  *     MOVE.W #%0011, D1
00001000                            89  *     SWAP D1
00001000                            90  *     MOVE.W #$6, D1
00001000                            91  *     MOVE.L D1, -(SP)
00001000                            92  *     JSR PRINT_REGISTER
00001000                            93  *     ADDQ.L #4, SP
00001000                            94  * * A7
00001000                            95  *     MOVE.W #%0011, D1
00001000                            96  *     SWAP D1
00001000                            97  *     MOVE.W #$7, D1
00001000                            98  *     MOVE.L D1, -(SP)
00001000                            99  *     JSR PRINT_REGISTER
00001000                           100  *     ADDQ.L #4, SP
00001000                           101  
00001000                           102      * JSR PRINT_COMMA
00001000                           103      * JSR PRINT_DOLLAR_SIGN
00001000                           104      * JSR PRINT_HASH_SIGN
00001000                           105      * MOVE.B #$01, -(SP)
00001000                           106      * JSR PRINT_DATA
00001000                           107      * ADDQ.L #$2,SP
00001000                           108      * MOVE.B #$02, -(SP)
00001000                           109      * JSR PRINT_DATA
00001000                           110      * ADDQ.L #$2, SP
00001000                           111      * MOVE.B #$03, -(SP)
00001000                           112      * JSR PRINT_DATA
00001000                           113      * ADDQ.L #$2,SP
00001000                           114   
00001000  4207                     115      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            116      MOVE.L #START_ADDRESS, A0 
00001008  20BC 00010000            117      MOVE.L #$010000, (A0)
0000100E                           118  LOOP_START:
0000100E  2E7C 00008000            119      MOVE.L #STACK_ADDRESS, SP
00001014  2F39 00009100            120      MOVE.L (START_ADDRESS), -(SP)
0000101A  2F3C 00007006            121      MOVE.L #OPCODE_ADDRESS, -(SP)
00001020  4EB9 00001674            122      JSR FETCH_OPCODES
00001026  508F                     123      ADDQ.L #8, SP
00001028  4EB9 000010AE            124      JSR PRINT_TAB
0000102E  4EB9 00001182            125      JSR PRINT_PC
00001034  207C 00007006            126      MOVE.L #OPCODE_ADDRESS, A0
0000103A  3F10                     127      MOVE.W (A0), -(SP)
0000103C  4EB9 00001688            128      JSR JUMP_TABLE
00001042                           129  FINISH_OPCODE:
00001042  4280                     130      CLR.L D0
00001044  23FC 00000000 00009000   131      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
0000104E  3038 7008                132      MOVE.W (OFFSET_OPC_ADDRES), D0
00001052  D1B9 00009100            133      ADD.L D0, (START_ADDRESS)
00001058  4EB9 00001114            134      JSR PRINT_NEW_LINE
0000105E  5207                     135      ADDQ.B #1, D7 
00001060  0C07 001D                136      CMPI.B #29, D7 
00001064  6700 0004                137      BEQ CLR_SCREEN
00001068  60A4                     138      BRA LOOP_START
0000106A                           139  
0000106A                           140  CLR_SCREEN:
0000106A  43F9 00002145            141      LEA PROMT_INPUT_CONTINUE, A1 
00001070  103C 000D                142      MOVE.B #13, D0 
00001074  4E4F                     143      TRAP #15 
00001076  4207                     144      CLR.B D7
00001078  103C 0005                145      MOVE.B #5, D0 
0000107C  4E4F                     146      TRAP #15 
0000107E  0C01 000D                147      CMPI.B #$0D, D1 
00001082  678A                     148      BEQ LOOP_START
00001084  6000 0002                149      BRA END_MAIN
00001088                           150  
00001088                           151  * Put program code here
00001088                           152  MAIN:
00001088                           153  
00001088                           154  END_MAIN:
00001088  103C 0009                155      MOVE.B #9, D0
0000108C  4E4F                     156      TRAP #15
0000108E  103C 000E                157      MOVE.B #14,D0
00001092  4E4F                     158      TRAP #15
00001094                           159  * get user input 
00001094                           160  GET_INPUT:
00001094  43F9 000020E9            161      LEA PROMT_INPUT_START, A1
0000109A  103C 000D                162      MOVE.B #13, D0
0000109E  4E4F                     163      TRAP #15
000010A0  227C 00002000            164      MOVEA.L #$2000,A1
000010A6  103C 0002                165      MOVE.B #2, D0
000010AA  4E4F                     166      TRAP #15
000010AC                           167  END_GET_INPUT:
000010AC  4E75                     168      RTS   
000010AE                           169  
000010AE                           170  *--------------------------------------------------------------------
000010AE                           171  * PRINT_TAB 
000010AE                           172  PRINT_TAB: 
000010AE  227C 00007010            173      MOVE.L #OUTPUT_ADDRESS, A1
000010B4  22FC 20202020            174      MOVE.L #'    ', (A1)+
000010BA  12FC 0000                175      MOVE.B #0, (A1)+
000010BE  227C 00007010            176      MOVE.L #OUTPUT_ADDRESS, A1
000010C4                           177  END_PRINT_TAB:
000010C4  103C 000E                178      MOVE.B #14, D0
000010C8  4E4F                     179      TRAP #15
000010CA  4E75                     180      RTS
000010CC                           181  *--------------------------------------------------------------------
000010CC                           182  * PRINT_COMMA
000010CC                           183  PRINT_COMMA:
000010CC  227C 00007010            184      MOVE.L #OUTPUT_ADDRESS, A1
000010D2  32FC 2C20                185      MOVE.W #', ', (A1)+
000010D6  12BC 0000                186      MOVE.B #0, (A1)
000010DA  5589                     187      SUBQ.L #2, A1
000010DC                           188  END_PRINT_COMMA:
000010DC  103C 000E                189      MOVE.B #14, D0
000010E0  4E4F                     190      TRAP #15
000010E2  4E75                     191      RTS
000010E4                           192  *--------------------------------------------------------------------
000010E4                           193  * PRINT_DOLLAR_SIGN
000010E4                           194  PRINT_DOLLAR_SIGN:
000010E4  227C 00007010            195      MOVE.L #OUTPUT_ADDRESS, A1
000010EA  12BC 0024                196      MOVE.B #'$', (A1)
000010EE  137C 0000 0001           197      MOVE.B #0, 1(A1) 
000010F4                           198  END_PRINT_DOLLAR_SIGN:
000010F4  103C 000E                199      MOVE.B #14, D0
000010F8  4E4F                     200      TRAP #15
000010FA  4E75                     201      RTS
000010FC                           202  *--------------------------------------------------------------------
000010FC                           203  * PRINT_HASH_SIGN
000010FC                           204  PRINT_HASH_SIGN:
000010FC  227C 00007010            205      MOVE.L #OUTPUT_ADDRESS, A1
00001102  12BC 0023                206      MOVE.B #'#', (A1)
00001106  137C 0000 0001           207      MOVE.B #0, 1(A1) 
0000110C                           208  END_PRINT_HASH_SIGN:
0000110C  103C 000E                209      MOVE.B #14, D0
00001110  4E4F                     210      TRAP #15
00001112  4E75                     211      RTS
00001114                           212  
00001114                           213  *--------------------------------------------------------------------
00001114                           214  * PRINT A NEW LINE 
00001114                           215  PRINT_NEW_LINE: 
00001114  227C 00007010            216      MOVE.L #OUTPUT_ADDRESS, A1
0000111A  12FC 000D                217      MOVE.B #CR, (A1)+ 
0000111E  12FC 000A                218      MOVE.B #LF, (A1)+
00001122  12FC 0000                219      MOVE.B #0, (A1)+
00001126                           220  END_PRINT_NEW_LINE:
00001126  227C 00007010            221      MOVE.L #OUTPUT_ADDRESS, A1
0000112C  103C 000E                222      MOVE.B #14, D0
00001130  4E4F                     223      TRAP #15 
00001132  4E75                     224      RTS
00001134                           225  
00001134                           226  *--------------------------------------------------------------------
00001134                           227  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
00001134                           228  * PARAMETERS: 
00001134                           229   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
00001134                           230  *       00 - byte
00001134                           231  *       01 - word
00001134                           232  *       10 - long
00001134                           233  * NOTE:
00001134                           234  *   A1 USE FOR PRINT
00001134                           235  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
00001134                           236  PRINT_DATA:
00001134  227C 00007010            237      MOVE.L #OUTPUT_ADDRESS, A1
0000113A  122F 0004                238      MOVE.B 4(SP), D1
0000113E  0C01 0000                239      CMPI.B #$00, D1
00001142  6700 001A                240      BEQ PRINT_BYTE
00001146  0C01 0001                241      CMPI.B #$01, D1
0000114A  6700 001E                242      BEQ PRINT_WORD
0000114E  0C01 0002                243      CMPI.B #$02, D1 
00001152  6700 0022                244      BEQ PRINT_LONG
00001156                           245  END_PRINT_DATA:
00001156  103C 000E                246      MOVE.B #14, D0
0000115A  4E4F                     247      TRAP #15
0000115C  4E75                     248      RTS 
0000115E                           249  
0000115E                           250  PRINT_BYTE: 
0000115E  32BC 2E42                251      MOVE.W #'.B', (A1)
00001162  137C 0000 0002           252      MOVE.B #0, 2(A1)
00001168  60EC                     253      BRA END_PRINT_DATA
0000116A                           254  PRINT_WORD: 
0000116A  32BC 2E57                255      MOVE.W #'.W', (A1)
0000116E  137C 0000 0002           256      MOVE.B #0, 2(A1)
00001174  60E0                     257      BRA END_PRINT_DATA
00001176                           258  PRINT_LONG: 
00001176  32BC 2E4C                259      MOVE.W #'.L', (A1)
0000117A  137C 0000 0002           260      MOVE.B #0, 2(A1)
00001180  60D4                     261      BRA END_PRINT_DATA
00001182                           262  
00001182                           263  *--------------------------------------------------------------------
00001182                           264  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001182                           265  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001182                           266  * PARAMETERS:
00001182                           267  *   NONE
00001182                           268  * NOTES: 
00001182                           269  * A1 USE TO PRINT 
00001182                           270  * D0 FOR TRAP AND CONVERSION 
00001182                           271  PRINT_PC:
00001182  2039 00009100            272      MOVE.L (START_ADDRESS), D0 
00001188  2F00                     273      MOVE.L D0, -(SP)
0000118A  2F3C 00000008            274      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001190  4EB9 00001520            275      JSR PRINT_HEX 
00001196  508F                     276      ADDQ.L #8, SP 
00001198  4EB8 10AE                277      JSR PRINT_TAB
0000119C  4EB8 10AE                278      JSR PRINT_TAB 
000011A0  4EB8 10AE                279      JSR PRINT_TAB
000011A4  4E75                     280      RTS 
000011A6                           281  
000011A6                           282  CHECK_SUPPORT_REGISTER:
000011A6  33FC 0000 00009000       283      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011AE  322F 0004                284      MOVE.W 4(SP), D1 
000011B2  3801                     285      MOVE.W D1,D4 
000011B4                           286     ; check to make sure we dont support the register 
000011B4  =00000028                287  DISPLACEMENT_REGISTER EQU %00101000
000011B4  =00000030                288  ADDRESS_WITH_INDEX EQU %00110000
000011B4  =0000003B                289  COUNTER_INDEX EQU %00111011 
000011B4  =0000003A                290  COUNTER_DISPLACEMENT EQU %00111010
000011B4  C83C 0038                291      AND.B #%00111000, D4 
000011B8  0C04 0028                292      CMPI.B #DISPLACEMENT_REGISTER, D4
000011BC  6700 0056                293      BEQ UNSUPPORT_REGISTER
000011C0  0C04 0030                294      CMPI.B #ADDRESS_WITH_INDEX, D4
000011C4  6700 004E                295      BEQ UNSUPPORT_REGISTER 
000011C8  3801                     296      MOVE D1, D4
000011CA  C83C 003F                297      AND.B #%00111111,D4
000011CE  0C04 003B                298      CMPI.B #COUNTER_INDEX, D4
000011D2  6700 0040                299      BEQ UNSUPPORT_REGISTER 
000011D6  0C04 003A                300      CMPI.B #COUNTER_DISPLACEMENT, D4
000011DA  6700 0038                301      BEQ UNSUPPORT_REGISTER
000011DE  4E75                     302      RTS
000011E0                           303  
000011E0                           304  UNSUPPORT_OPCODE: 
000011E0  267C 00009000            305      MOVE.L #RETURN_ADDRESS, A3
000011E6  4EB9 00002044            306      JSR PRINT_UNSUPPORTED
000011EC  4EB8 10AE                307      JSR PRINT_TAB 
000011F0  4EB8 10FC                308      JSR PRINT_HASH_SIGN 
000011F4  4EB8 10E4                309      JSR PRINT_DOLLAR_SIGN 
000011F8  4281                     310      CLR.L D1 
000011FA  3238 7006                311      MOVE.W (OPCODE_ADDRESS), D1 
000011FE  2F01                     312      MOVE.L D1, -(SP) 
00001200  2F3C 00000004            313      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001206  4EB9 00001520            314      JSR PRINT_HEX 
0000120C  508F                     315      ADDQ.L #8, SP 
0000120E  36BC 0002                316      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001212  4E75                     317      RTS 
00001214                           318  
00001214                           319  UNSUPPORT_REGISTER:
00001214  =00000002                320  C_UNSUPPORT_REGISTER EQU $2
00001214  267C 00009000            321      MOVE.L #RETURN_ADDRESS, A3
0000121A  4EB9 00002044            322      JSR PRINT_UNSUPPORTED
00001220  4EB8 10AE                323      JSR PRINT_TAB 
00001224  4EB8 10FC                324      JSR PRINT_HASH_SIGN 
00001228  4EB8 10E4                325      JSR PRINT_DOLLAR_SIGN 
0000122C  4281                     326      CLR.L D1 
0000122E  3238 7006                327      MOVE.W (OPCODE_ADDRESS), D1 
00001232  2F01                     328      MOVE.L D1, -(SP) 
00001234  2F3C 00000004            329      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000123A  4EB9 00001520            330      JSR PRINT_HEX 
00001240  508F                     331      ADDQ.L #8, SP 
00001242  36BC 0002                332      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001246  5478 7008                333      ADDQ.W #2, (OFFSET_OPC_ADDRES)
0000124A  4E75                     334      RTS 
0000124C                           335  
0000124C                           336  *--------------------------------------------------------------------
0000124C                           337  * PRINT_REGISTER
0000124C                           338  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
0000124C                           339  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
0000124C                           340  * 2 - (4(sp)) byte value for how many byte for immediate value
0000124C                           341  *      0 for a byte value
0000124C                           342  *      1 for word value
0000124C                           343  *      2 for long value 
0000124C                           344  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
0000124C                           345  * NOTE: 
0000124C                           346  *   D1 FOR STORE THE PARAMETER
0000124C                           347  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
0000124C                           348  PRINT_REGISTER:
0000124C  322F 0006                349     MOVE.W 6(SP), D1 
00001250                           350     
00001250  3401                     351     MOVE.W D1,D2
00001252  0C01 003C                352     CMPI.B #%00111100, D1
00001256  6700 00A2                353     BEQ PRINT_IMMEDIATE
0000125A  0C01 0038                354     CMPI.B #%00111000, D1
0000125E  6700 0160                355     BEQ PRINT_AB_SHORT
00001262  0C01 0039                356     CMPI.B #%00111001, D1
00001266  6700 01BA                357     BEQ PRINT_AB_LONG 
0000126A                           358  
0000126A  1401                     359     MOVE.B D1,D2
0000126C  C43C 0038                360     AND.B #%00111000, D2
00001270  0C02 0010                361     CMPI.B #%00010000, D2
00001274  6700 020E                362     BEQ PRINT_OPEN
00001278                           363  
00001278  1401                     364     MOVE.B D1,D2
0000127A  C43C 0038                365     AND.B #%00111000, D2
0000127E  0C02 0018                366     CMPI.B #%00011000, D2
00001282  6700 0200                367     BEQ PRINT_OPEN
00001286                           368  
00001286  1401                     369     MOVE.B D1,D2
00001288  C43C 0038                370     AND.B #%00111000, D2
0000128C  0C02 0020                371     CMPI.B #%00100000, D2
00001290  6700 020C                372     BEQ PRINT_MINUS_OPEN
00001294                           373  
00001294                           374  CONTINUE_PRINT_REGISTER:
00001294  1401                     375     MOVE.B D1,D2
00001296  C43C 0038                376     AND.B #%00111000, D2
0000129A  0C02 0000                377     CMPI.B #%00000000, D2
0000129E  6700 024C                378     BEQ PRINT_D
000012A2                           379  
000012A2  1401                     380     MOVE.B D1,D2
000012A4  C43C 0038                381     AND.B #%00111000, D2
000012A8  0C02 0008                382     CMPI.B #%00001000, D2
000012AC  6700 0258                383     BEQ PRINT_A 
000012B0                           384  
000012B0                           385  CONTINUE_PRINT_RE_NUMBER:
000012B0  227C 00007010            386      MOVE.L #OUTPUT_ADDRESS, A1
000012B6  1401                     387      MOVE.B D1,D2
000012B8  C43C 0007                388      AND.B #%00000111, D2
000012BC  0602 0030                389      ADD.B #48, D2 
000012C0  1282                     390      MOVE.B D2, (A1) 
000012C2  137C 0000 0001           391      MOVE.B #$0, 1(A1)
000012C8  103C 000E                392      MOVE.B #14, D0
000012CC  4E4F                     393      TRAP #15
000012CE                           394  DONE_PRINT_NUMBER:
000012CE  1401                     395     MOVE.B D1,D2
000012D0  C43C 0038                396     AND.B #%00111000, D2
000012D4  0C02 0010                397     CMPI.B #%00010000, D2
000012D8  6700 01DE                398     BEQ PRINT_CLOSE
000012DC                           399  
000012DC  1401                     400     MOVE.B D1,D2
000012DE  C43C 0038                401     AND.B #%00111000, D2
000012E2  0C02 0018                402     CMPI.B #%00011000, D2
000012E6  6700 01EA                403     BEQ PRINT_CLOSE_PLUS
000012EA                           404  
000012EA  1401                     405     MOVE.B D1,D2
000012EC  C43C 0038                406     AND.B #%00111000, D2
000012F0  0C02 0020                407     CMPI.B #%00100000, D2
000012F4  6700 01C2                408     BEQ PRINT_CLOSE
000012F8                           409  
000012F8                           410  END_PRINT_REGISTER:
000012F8  4E75                     411      RTS
000012FA                           412  
000012FA                           413  PRINT_IMMEDIATE:
000012FA  227C 00007010            414      MOVE.L #OUTPUT_ADDRESS, A1
00001300  12BC 0023                415      MOVE.B #'#', (A1)
00001304  137C 0000 0001           416      MOVE.B #$0, 1(A1)
0000130A  103C 000E                417      MOVE.B #14, D0
0000130E  4E4F                     418      TRAP #15
00001310  4EB8 10E4                419      JSR PRINT_DOLLAR_SIGN
00001314  3038 7008                420      MOVE.W (OFFSET_OPC_ADDRES),D0
00001318  342F 0004                421      MOVE.W 4(SP), D2 ; HOW MANY BYTE
0000131C  0C02 0000                422      CMPI.B #$00, D2
00001320  6700 0014                423      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
00001324  0C02 0001                424      CMPI.B #$01, D2
00001328  6700 0036                425      BEQ PRINT_IMMEDIATE_WORD
0000132C  0C02 0002                426      CMPI.B #$02, D2
00001330  6700 005A                427      BEQ PRINT_IMMEDIATE_LONG
00001334  60C2                     428      BRA END_PRINT_REGISTER
00001336                           429  
00001336                           430  PRINT_IMMEDIATE_BYTE:
00001336  2479 00009100            431      MOVE.L (START_ADDRESS), A2
0000133C  3432 0000                432      MOVE.W (A2, D0), D2 ; 
00001340  48E7 E0C0                433      MOVEM.L D0-D2/A0-A1, -(SP)
00001344  2F02                     434      MOVE.L D2, -(SP)
00001346  2F3C 00000004            435      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000134C  4EB9 00001520            436      JSR PRINT_HEX
00001352  508F                     437       ADDQ.L #$08, SP
00001354  4CDF 0307                438      MOVEM.L (SP)+, D0-D2/A0-A1
00001358  5440                     439      ADDQ.W #$2, D0
0000135A  31C0 7008                440      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000135E  6098                     441      BRA END_PRINT_REGISTER
00001360                           442  PRINT_IMMEDIATE_WORD:
00001360  2479 00009100            443      MOVE.L (START_ADDRESS), A2
00001366  3432 0000                444      MOVE.W (A2, D0), D2 ; 
0000136A  48E7 E0C0                445      MOVEM.L D0-D2/A0-A1, -(SP)
0000136E  2F02                     446      MOVE.L D2, -(SP)
00001370  2F3C 00000004            447      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001376  4EB9 00001520            448      JSR PRINT_HEX
0000137C  508F                     449      ADDQ.L #$08, SP
0000137E  4CDF 0307                450      MOVEM.L (SP)+, D0-D2/A0-A1
00001382  5440                     451      ADDQ.W #$2, D0
00001384  31C0 7008                452      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001388  6000 FF6E                453      BRA END_PRINT_REGISTER
0000138C                           454  PRINT_IMMEDIATE_LONG:
0000138C  3038 7008                455      MOVE.W (OFFSET_OPC_ADDRES),D0
00001390  2479 00009100            456      MOVE.L (START_ADDRESS), A2
00001396  2432 0000                457      MOVE.L (A2, D0), D2 ; 
0000139A  48E7 E0C0                458      MOVEM.L D0-D2/A0-A1, -(SP)
0000139E  2F02                     459      MOVE.L D2, -(SP)
000013A0                           460      ; offset to get immediate value from opcode
000013A0  3038 7008                461      MOVE.W (OFFSET_OPC_ADDRES),D0
000013A4  2F3C 00000008            462      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013AA  4EB9 00001520            463      JSR PRINT_HEX
000013B0  508F                     464      ADDQ.L #$08, SP
000013B2  4CDF 0307                465      MOVEM.L (SP)+, D0-D2/A0-A1
000013B6  5840                     466      ADDQ.W #$4, D0
000013B8  31C0 7008                467      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013BC  6000 FF3A                468      BRA END_PRINT_REGISTER
000013C0                           469  PRINT_AB_SHORT:
000013C0  227C 00007010            470      MOVE.L #OUTPUT_ADDRESS, A1
000013C6  32BC 2824                471      MOVE.W #'($', (A1)
000013CA  137C 0000 0002           472      MOVE.B #0, 2(A1)
000013D0  103C 000E                473      MOVE.B #14, D0
000013D4  4E4F                     474      TRAP #15
000013D6                           475      ; offset to get immediate value from opcode
000013D6  2479 00009100            476      MOVE.L (START_ADDRESS), A2
000013DC  3038 7008                477      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E0  3432 0000                478      MOVE.W (A2, D0), D2 ; 
000013E4  48E7 E0C0                479      MOVEM.L D0-D2/A0-A1, -(SP)
000013E8  2F02                     480      MOVE.L D2, -(SP)
000013EA  2F3C 00000004            481      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F0  4EB9 00001520            482      JSR PRINT_HEX
000013F6  508F                     483      ADDQ.L #$08, SP
000013F8  4CDF 0307                484      MOVEM.L (SP)+, D0-D2/A0-A1
000013FC  5440                     485      ADDQ.W #$2, D0
000013FE  31C0 7008                486      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001402                           487      ; print close parathesis with W
00001402  227C 00007010            488      MOVE.L #OUTPUT_ADDRESS, A1
00001408  32BC 292E                489      MOVE.W #').', (A1)
0000140C  137C 0057 0002           490      MOVE.B #'W',2(A1)
00001412  137C 0000 0003           491      MOVE.B #0, 3(A1)
00001418  103C 000E                492      MOVE.B #14, D0
0000141C  4E4F                     493      TRAP #15
0000141E  6000 FED8                494      BRA END_PRINT_REGISTER
00001422                           495  PRINT_AB_LONG:
00001422                           496      ;print open parathesis
00001422  227C 00007010            497      MOVE.L #OUTPUT_ADDRESS, A1
00001428  32BC 2824                498      MOVE.W #'($', (A1)
0000142C  137C 0000 0002           499      MOVE.B #0, 2(A1)
00001432  103C 000E                500      MOVE.B #14, D0
00001436  4E4F                     501      TRAP #15
00001438                           502      ; print value in long
00001438  2479 00009100            503      MOVE.L (START_ADDRESS), A2
0000143E                           504      ; offset to get value from opcode
0000143E  3038 7008                505      MOVE.W (OFFSET_OPC_ADDRES),D0
00001442  2432 0000                506      MOVE.L (A2, D0), D2 ; 
00001446  48E7 E0C0                507      MOVEM.L D0-D2/A0-A1, -(SP)
0000144A  2F02                     508      MOVE.L D2, -(SP)
0000144C  2F3C 00000008            509      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001452  4EB9 00001520            510      JSR PRINT_HEX
00001458  508F                     511      ADDQ.L #$08, SP
0000145A  4CDF 0307                512      MOVEM.L (SP)+, D0-D2/A0-A1
0000145E  5840                     513      ADDQ.W #$4, D0
00001460  31C0 7008                514      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
00001464                           515      ; print close parathesis with W
00001464  227C 00007010            516      MOVE.L #OUTPUT_ADDRESS, A1
0000146A  32BC 292E                517      MOVE.W #').', (A1)
0000146E  137C 004C 0002           518      MOVE.B #'L',2(A1)
00001474  137C 0000 0003           519      MOVE.B #0, 3(A1)
0000147A  103C 000E                520      MOVE.B #14, D0
0000147E  4E4F                     521      TRAP #15
00001480  6000 FE76                522      BRA END_PRINT_REGISTER
00001484                           523  PRINT_OPEN:
00001484  227C 00007010            524      MOVE.L #OUTPUT_ADDRESS, A1
0000148A  12BC 0028                525      MOVE.B #'(', (A1)
0000148E  137C 0000 0001           526      MOVE.B #$0, 1(A1)
00001494  103C 000E                527      MOVE.B #14, D0
00001498  4E4F                     528      TRAP #15
0000149A  6000 006A                529      BRA PRINT_A
0000149E                           530  PRINT_MINUS_OPEN: 
0000149E  227C 00007010            531      MOVE.L #OUTPUT_ADDRESS, A1
000014A4  32BC 2D28                532      MOVE.W #'-(', (A1)
000014A8  137C 0000 0002           533      MOVE.B #$0, 2(A1)
000014AE  103C 000E                534      MOVE.B #14, D0
000014B2  4E4F                     535      TRAP #15
000014B4  6000 0050                536      BRA PRINT_A
000014B8                           537  PRINT_CLOSE:
000014B8  227C 00007010            538      MOVE.L #OUTPUT_ADDRESS, A1
000014BE  12BC 0029                539      MOVE.B #')', (A1)
000014C2  137C 0000 0001           540      MOVE.B #$0, 1(A1)
000014C8  103C 000E                541      MOVE.B #14, D0
000014CC  4E4F                     542      TRAP #15
000014CE  6000 FE28                543      BRA END_PRINT_REGISTER
000014D2                           544  PRINT_CLOSE_PLUS:
000014D2  227C 00007010            545      MOVE.L #OUTPUT_ADDRESS, A1
000014D8  32BC 292B                546      MOVE.W #')+', (A1)
000014DC  137C 0000 0002           547      MOVE.B #$0, 2(A1)
000014E2  103C 000E                548      MOVE.B #14, D0
000014E6  4E4F                     549      TRAP #15
000014E8  6000 FE0E                550      BRA END_PRINT_REGISTER
000014EC                           551  PRINT_D:
000014EC  227C 00007010            552      MOVE.L #OUTPUT_ADDRESS, A1 
000014F2  12BC 0044                553      MOVE.B #'D', (A1)
000014F6  137C 0000 0001           554      MOVE.B #$0, 1(A1)
000014FC  103C 000E                555      MOVE.B #14, D0
00001500  4E4F                     556      TRAP #15
00001502  6000 FDAC                557      BRA CONTINUE_PRINT_RE_NUMBER
00001506                           558  PRINT_A: 
00001506  227C 00007010            559      MOVE.L #OUTPUT_ADDRESS, A1 
0000150C  12BC 0041                560      MOVE.B #'A', (A1)
00001510  137C 0000 0001           561      MOVE.B #$0, 1(A1)
00001516  103C 000E                562      MOVE.B #14, D0
0000151A  4E4F                     563      TRAP #15
0000151C  6000 FD92                564      BRA CONTINUE_PRINT_RE_NUMBER
00001520                           565  
00001520                           566  *-----------------------------------------------------------
00001520                           567  * PRINT HEX 
00001520                           568  * PARAMETERS:
00001520                           569  *   1- (8(SP)): VALUE IN HEX
00001520                           570  *   2- (4(SP)): HOW MANY BYTES
00001520                           571  * RETURN NULL
00001520                           572  *-----------------------------------------------------------
00001520                           573  PRINT_HEX:
00001520  6000 0016                574      BRA HEX_TO_ASCII
00001524                           575  GET_ASCII_FROM_HEX:
00001524  227C 00007010            576      MOVE.L #OUTPUT_ADDRESS, A1
0000152A  103C 000E                577      MOVE.B #14, D0
0000152E  4E4F                     578      TRAP #15
00001530  227C 00007010            579      MOVE.L #OUTPUT_ADDRESS, A1
00001536                           580  END_PRINT_HEX:
00001536  4E75                     581      RTS
00001538                           582  *-----------------------------------------------------------
00001538                           583  * CONVERT HEX TO ASCII 
00001538                           584  * PARAMATERS:
00001538                           585  *   1- (8(SP)): VALUE IN HEX
00001538                           586  *   2- (4(SP)): HOW MANY BYTES
00001538                           587  * RETURN:
00001538                           588  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
00001538                           589  * D0 STORES HEX VALUE
00001538                           590  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
00001538                           591  * D1 COUNT LOOP
00001538                           592  * D2 CONVERT TO ASCII
00001538                           593  * D3 USE TO CALCULATE SHIFT
00001538                           594  HEX_TO_ASCII: 
00001538  202F 0008                595      MOVE.L 8(SP), D0 
0000153C  282F 0004                596      MOVE.L 4(SP), D4
00001540  0C44 0004                597      CMPI #HEX_TO_ASCII_WORD, D4 
00001544  6700 004E                598      BEQ HEX_TO_ASCII_SWAP
00001548  0C44 0002                599      CMPI #HEX_TO_ASCII_BYTE, D4
0000154C  6700 EAB4                600      BEQ HEX_TO_ASCII_BYTE
00001550                           601  HEX2ASCII_DONE_CONVERT:
00001550  4201                     602      CLR.B D1
00001552  227C 00007010            603      MOVE.L #OUTPUT_ADDRESS, A1
00001558  =0000000F                604  HEX_MASKING EQU $0000000F
00001558  =00000002                605  HEX_TO_ASCII_BYTE EQU $02
00001558  =00000004                606  HEX_TO_ASCII_WORD EQU $04
00001558  =00000008                607  HEX_TO_ASCII_LONG EQU $08
00001558                           608  
00001558                           609  HEX_TO_ASCII_LOOP:
00001558  B204                     610      CMP.B D4, D1
0000155A  6700 0032                611      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
0000155E                           612  
0000155E  E998                     613      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001560  2600                     614      MOVE.L D0,D3 ; copy the value to mask
00001562  C6BC 0000000F            615      AND.L #HEX_MASKING, D3  ; mask
00001568                           616  
00001568  0C03 000A                617      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
0000156C  6D00 000C                618      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001570                           619  
00001570  0C03 0048                620      CMPI.B #72, D3 ; compare masked value with F letter in ascii
00001574  6D00 000E                621      BLT HEX_TO_ASCII_LETTER
00001578                           622  
00001578  60DE                     623      BRA HEX_TO_ASCII_LOOP
0000157A                           624  HEX_TO_ASCII_NUMBER:
0000157A  0603 0030                625      ADD.B #48, D3  ; convert number to letter
0000157E  12C3                     626      MOVE.B D3, (A1)+ ; push to return memory
00001580  5201                     627      ADDQ.B #$1, D1 ; add for loop count
00001582  60D4                     628      BRA HEX_TO_ASCII_LOOP ; loop back
00001584                           629  HEX_TO_ASCII_LETTER:
00001584  0603 0037                630      ADD.B #55, D3 ; convert A-F in ascii
00001588  12C3                     631      MOVE.B D3, (A1)+ ; push to return memory
0000158A  5201                     632      ADDQ.B #$1, D1 ; add to for loop count
0000158C  60CA                     633      BRA HEX_TO_ASCII_LOOP ;loop back
0000158E                           634  END_HEX_TO_ASCII:
0000158E  12FC 0000                635      MOVE.B #0, (A1)+ ; add null terminated value
00001592  6090                     636      BRA GET_ASCII_FROM_HEX
00001594                           637  HEX_TO_ASCII_SWAP:
00001594  4840                     638      SWAP D0
00001596  60B8                     639      BRA HEX2ASCII_DONE_CONVERT
00001598                           640     
00001598                           641  HEX_TO_ASCII_ROR:
00001598  E098                     642      ROR.L #$08, D0
0000159A  60B4                     643      BRA HEX2ASCII_DONE_CONVERT
0000159C                           644  
0000159C                           645  *-----------------------------------------------------------
0000159C                           646  * CHECK IF THE VALUE IN HEX IS ODD 
0000159C                           647  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
0000159C                           648  * RETURN:
0000159C                           649  *   0: IF IT IS EVEN
0000159C                           650  *   1: IF IT IS ODD
0000159C                           651  * NOTE:
0000159C                           652  *   A0 IS FOR RETURN ADDRESS
0000159C                           653  *   D0 IS FOR HEX VALUE
0000159C                           654  CHECK_VALUE_IS_ODD:
0000159C  =00000000                655  VALUE_IS_EVEN EQU $0
0000159C  =00000001                656  VALUE_IS_ODD EQU $1
0000159C  41F9 00009000            657      LEA RETURN_ADDRESS, A0
000015A2  202F 0004                658      MOVE.L 4(SP), D0
000015A6  C0BC 0000FFFF            659      AND.L #$0000FFFF, D0
000015AC  80FC 0002                660      DIVU.W #2, D0
000015B0  4840                     661      SWAP D0      
000015B2  0C40 0000                662      CMPI.W #0, D0
000015B6  6700 000C                663      BEQ CHECK_VALUE_IS_ODD_FAILED
000015BA  30BC 0001                664      MOVE.W #VALUE_IS_ODD, (A0)
000015BE  6000 0002                665      BRA END_CHECK_VALUE_IS_ODD
000015C2                           666  END_CHECK_VALUE_IS_ODD:   
000015C2  4E75                     667      RTS
000015C4                           668  
000015C4                           669  CHECK_VALUE_IS_ODD_FAILED:
000015C4  30BC 0000                670      MOVE.W #VALUE_IS_EVEN, (A0)
000015C8  60F8                     671      BRA END_CHECK_VALUE_IS_ODD
000015CA                           672  
000015CA                           673  *-----------------------------------------------------------
000015CA                           674  * CONVERT ASCII TO HEX
000015CA                           675  * PARAMETERS:
000015CA                           676  *   1. LOCATION OF THE ASCII
000015CA                           677  *   2. LENGTH OF THE ASCII
000015CA                           678  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015CA                           679  * RETURN:
000015CA                           680  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015CA                           681  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015CA                           682  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015CA                           683  * NOTE:
000015CA                           684  *    D0 FOR LENGTH OF ASCII
000015CA                           685  *    D1 FOR LOOPING
000015CA                           686  ; CURRENT INDEX
000015CA                           687  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015CA                           688  *    D3 FOR CONVERT FINAL RESULT
000015CA                           689  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015CA                           690  *    A0 LOCATION OF THE DATA   
000015CA                           691  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015CA                           692  ASCII_TO_HEX:
000015CA  =00000001                693  ASCII_TO_HEX_RETURN_OK EQU $1
000015CA  45F9 00009000            694      LEA RETURN_ADDRESS, A2
000015D0  4252                     695      CLR.W (A2)
000015D2  42AA 0002                696      CLR.L 2(A2)
000015D6  206F 000C                697      MOVE.L 12(SP),A0
000015DA                           698   ; LOCATION OF THE DATA
000015DA  202F 0008                699      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015DE  222F 0004                700      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E2  B280                     701      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015E4  6D00 0076                702      BLT ASCII_TO_HEX_FAILED_0
000015E8  4281                     703      CLR.L D1 ; FOR LOOPING
000015EA                           704  ASCII_TO_HEX_LOOP:
000015EA  B081                     705     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015EC  6700 0068                706     BEQ ASCII_TO_HEX_END_LOOP
000015F0                           707     ; D2 USE FOR STORE DATA 
000015F0  1418                     708      MOVE.B (A0)+, D2
000015F2  0C02 002F                709      CMPI.B #47, D2
000015F6                           710  ASCII_TO_HEX_CHECK_GT_0
000015F6  6E00 0006                711      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
000015FA  6000 0066                712      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
000015FE                           713  ASCII_TO_HEX_CHECK_LT_9:
000015FE  0C02 003A                714      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001602  6D00 001E                715      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
00001606                           716      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
00001606  6000 0002                717      BRA ASCII_TO_HEX_CHECK_GT_A
0000160A                           718  ASCII_TO_HEX_CHECK_GT_A:
0000160A  0C02 0040                719      CMPI.B #64, D2
0000160E  6E00 0006                720      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001612  6000 004E                721      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
00001616                           722  ASCII_TO_HEX_CHECK_LT_F
00001616  0C02 0047                723      CMPI.B #71, D2
0000161A  6D00 0020                724      BLT ASCII_TO_HEX_CONVERT_LETTER
0000161E  6000 0042                725      BRA ASCII_TO_HEX_FAILED_2
00001622                           726  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001622                           727  ASCII_TO_HEX_CONVERT_NUMBER:
00001622  2800                     728       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
00001624  0402 0030                729       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
00001628  9881                     730       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
0000162A  5344                     731       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
0000162C  C8FC 0004                732       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001630  E9A2                     733       ASL.L D4, D2 ; SHIFT DATA
00001632  D5AA 0002                734       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
00001636  4282                     735       CLR.L D2
00001638  5241                     736       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
0000163A  60AE                     737       BRA ASCII_TO_HEX_LOOP
0000163C                           738  ASCII_TO_HEX_CONVERT_LETTER:
0000163C  2800                     739      MOVE.L D0, D4
0000163E  0402 0037                740      SUB.B #55, D2
00001642  9881                     741      SUB.L D1,D4
00001644  5344                     742      SUBQ #1, D4
00001646  C8FC 0004                743      MULU #4, D4
0000164A  E9A2                     744      ASL.L D4,D2
0000164C  D5AA 0002                745      ADD.L D2, 2(A2)
00001650  4282                     746      CLR.L D2 
00001652  5241                     747      ADDQ #1, D1
00001654  6094                     748      BRA ASCII_TO_HEX_LOOP
00001656                           749  ASCII_TO_HEX_END_LOOP:
00001656  34BC 0001                750      MOVE.W #1, (A2)
0000165A  4E75                     751      RTS
0000165C                           752      
0000165C                           753  ASCII_TO_HEX_FAILED_0:
0000165C  34BC 0002                754      MOVE.W #2, (A2)
00001660  4E75                     755      RTS
00001662                           756  ASCII_TO_HEX_FAILED_2:
00001662  34BC 0002                757      MOVE.W #2, (A2)
00001666  4E75                     758      RTS 
00001668                           759  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
00001668                           760  * PARAMETERS:
00001668                           761  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
00001668                           762  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
00001668                           763  * RETURN:
00001668                           764  *   NULL
00001668                           765  * NOTE:
00001668                           766  *   A0 USE TO POINT TO THE ADDRESS
00001668                           767  *   d1 USE TO MATH 
00001668                           768  INCRASE_POINTER_START_ADDRESS: 
00001668  206F 0008                769      MOVE.L 8(SP), A0
0000166C  222F 0004                770      MOVE.L 4(SP), D1
00001670  D390                     771      ADD.L D1, (A0)
00001672  4E75                     772      RTS
00001674                           773  
00001674                           774  * FETCH 16 BIT FROM START_ADDRESS
00001674                           775  * PARAMTERS: 
00001674                           776  *   1- (8(SP)): WHERE IS OPCODE LOCATION
00001674                           777  *   2- (4(SP)): WHERE TO STORE THE RESULT
00001674                           778  * RETURN:
00001674                           779  *   NULL
00001674                           780  * NOTE:
00001674                           781  *     A0 USE TO STORE THE OPCODE LOCATION
00001674                           782  *     A2 USES TO RETURN THE OPCODE
00001674                           783  FETCH_OPCODES:
00001674  206F 0008                784      MOVE.L 8(SP), A0 ; LOCATION
00001678  246F 0004                785      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
0000167C  3050                     786      MOVE.W (A0), A0
0000167E  3488                     787      MOVE.W A0,(A2)
00001680  31FC 0002 7008           788      MOVE.W #$2, (OFFSET_OPC_ADDRES)
00001686                           789  END_FETCH_OPCODES:
00001686  4E75                     790      RTS
00001688                           791  
00001688                           792  
00001688                           793  
00001688                           794  *------------------------------------DECODER PROCESS------------------------------------------------------------------------------------------------------------------
00001688                           795  * jump table uses to jump to decode subroutine
00001688                           796  * PARAMATERS:
00001688                           797  * 1-(4(Sp)) Word - opcode
00001688                           798  * NOTE: 
00001688                           799  *   D1 USES TO STORE OPCODE
00001688                           800  JUMP_TABLE:
00001688  322F 0004                801      MOVE.W 4(SP), D1
0000168C  4EB9 00001C0A            802      JSR ORI
00001692  4EB9 00001920            803      JSR MOVEA 
00001698  4EB9 000019D6            804      JSR MOVE
0000169E  4EB9 00001A9A            805      JSR NEG
000016A4  4EB9 000016FC            806      JSR NOP
000016AA  4EB9 00001706            807      JSR RTS
000016B0  4EB9 00001710            808      JSR JSR
000016B6  4EB9 00001A9A            809      JSR MOVEM 
000016BC  4EB9 0000175C            810      JSR LEA
000016C2  4EB9 00001DB0            811      JSR DIVS
000016C8  4EB9 00001B3C            812      JSR OR
000016CE  4EB9 00001CE2            813      JSR SUB
000016D4  4EB9 00001C60            814      JSR EOR
000016DA  4EB9 00001EA8            815      JSR CMP
000016E0  4EB9 00001E2C            816      JSR MULS
000016E6  4EB9 0000184E            817      JSR ADD 
000016EC  4EB9 000017CA            818      JSR ADDA
000016F2  4EB9 00001AFE            819      JSR BRA
000016F8                           820  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016F8                           821  END_JUMP_TABLE:
000016F8  4EB8 11E0                822      JSR UNSUPPORT_OPCODE
000016FC                           823  
000016FC                           824  NOP:
000016FC                           825  * constant for NOP 
000016FC  =00004E71                826  C_NOP EQU $4E71
000016FC  B27C 4E71                827      CMP.W #C_NOP, D1
00001700  6700 083C                828      BEQ PRINT_NOP
00001704  4E75                     829      RTS
00001706                           830  
00001706                           831  RTS:
00001706                           832  * constant for RTS 
00001706  =00004E75                833  C_RTS EQU $4E75
00001706  B27C 4E75                834      CMP.W #C_RTS, D1
0000170A  6700 081E                835      BEQ PRINT_RTS
0000170E  4E75                     836      RTS
00001710                           837  
00001710                           838  JSR:
00001710  =00004E80                839  JSR_OPCODE EQU %0100111010000000
00001710  3401                     840      MOVE.W D1,D2 
00001712                           841  * MASKING WITH UNIQUE OPCODE
00001712  C47C FFC0                842      AND.W #%1111111111000000, D2
00001716  B47C 4E80                843      CMP.W #JSR_OPCODE, D2
0000171A  6600 003E                844      BNE JSR_END 
0000171E                           845      ; check to make sure we support this register 
0000171E  3401                     846      MOVE.W D1, D2 
00001720  C43C 003F                847      AND.B #%00111111, D2 
00001724  3F02                     848      MOVE.W D2, -(SP)
00001726  4EB8 11A6                849      JSR CHECK_SUPPORT_REGISTER 
0000172A  544F                     850      ADDQ #2, SP 
0000172C                           851      ; check return value
0000172C                           852      *  from print_register to see if it is unsupported register 
0000172C  3439 00009000            853      MOVE.W (RETURN_ADDRESS), D2 
00001732  0C42 0002                854      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001736  6700 0022                855      BEQ JSR_END
0000173A                           856      ; done checking 
0000173A  4EB9 00001FB0            857      JSR PRINT_JSR
00001740                           858  * MASKING TO GET MODE AND REGISTER
00001740  1401                     859      MOVE.B D1,D2
00001742  C43C 003F                860      AND.B #%00111111, D2
00001746  48A7 4000                861      MOVEM.W D1, -(SP)
0000174A  3F02                     862      MOVE.W D2, -(SP)
0000174C  3F3C 0000                863      MOVE.W #$0, -(SP)
00001750  4EB8 124C                864      JSR PRINT_REGISTER
00001754  5882                     865      ADDQ.L #4, D2
00001756  4C9F 0002                866      MOVEM.W (SP)+, D1
0000175A                           867  JSR_END:
0000175A  4E75                     868      RTS
0000175C                           869  
0000175C                           870  LEA:
0000175C  3401                     871      MOVE.W D1,D2 
0000175E  C47C F1C0                872      AND.W  #%1111000111000000, D2
00001762  0C42 41C0                873      CMPI.W #%0100000111000000, D2
00001766  6600 0060                874      BNE LEA_END
0000176A                           875  
0000176A                           876      ; CHECK TO MAKE SURE WE SUPPORT THE EA
0000176A  3401                     877      MOVE.W D1, D2 
0000176C  C43C 003F                878      AND.B #%00111111, D2 
00001770  3F02                     879      MOVE.W D2, -(SP)
00001772  4EB8 11A6                880      JSR CHECK_SUPPORT_REGISTER
00001776  544F                     881      ADDQ #2, SP 
00001778                           882      ; check return value
00001778                           883      *  from print_register to see if it is unsupported register 
00001778  3439 00009000            884      MOVE.W (RETURN_ADDRESS), D2 
0000177E  0C42 0002                885      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001782  6700 F8BE                886      BEQ FINISH_OPCODE
00001786                           887      * END CHECKING
00001786  4EB9 00001FC2            888      JSR PRINT_LEA
0000178C  1401                     889      MOVE.B D1,D2 
0000178E                           890      ; MASK TO GET MODE AND REGISTER
0000178E  C43C 003F                891      AND.B #%0000000000111111, D2
00001792  48A7 4000                892      MOVEM.W D1, -(SP)
00001796  3F02                     893      MOVE.W D2, -(SP)
00001798  3F3C 0000                894      MOVE.W #$0, -(SP)
0000179C  4EB8 124C                895      JSR PRINT_REGISTER
000017A0  588F                     896      ADDQ.L #$4, SP
000017A2  4C9F 0002                897      MOVEM.W (SP)+, D1
000017A6  4EB8 10CC                898      JSR PRINT_COMMA
000017AA                           899      ; MASK TO GET DESTINATION REGISTER
000017AA  3401                     900      MOVE.W D1,D2
000017AC  C47C 0E00                901      AND.W #%0000111000000000, D2
000017B0  E04A                     902      LSR.W #$08, D2
000017B2  E24A                     903      LSR.W #$01, D2
000017B4  843C 0008                904      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017B8  3F02                     905      MOVE.W D2, -(SP)
000017BA  3F3C 0000                906      MOVE.W #$0, -(SP) 
000017BE  4EB8 124C                907      JSR PRINT_REGISTER
000017C2  588F                     908      ADDQ.L #$04, SP
000017C4  6000 F87C                909      BRA FINISH_OPCODE
000017C8                           910  LEA_END:
000017C8  4E75                     911      RTS
000017CA                           912  
000017CA                           913  ADDA:
000017CA  =0000D0C0                914  C_ADDA EQU       %1101000011000000
000017CA  =0000F0C0                915  ADDA_MASKING EQU %1111000011000000
000017CA  =00000100                916  ADDA_SIZE_MASKING EQU %0000000100000000
000017CA  =00000E00                917  ADDA_AN_MASKING EQU %0000111000000000
000017CA  3401                     918      MOVE.W D1, D2
000017CC  C47C F0C0                919      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017D0  0C42 D0C0                920      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017D4  6600 0076                921      BNE ADDA_END 
000017D8                           922      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017D8  3401                     923      MOVE.W D1, D2 
000017DA  C43C 003F                924      AND.B #%00111111, D2 
000017DE  3F02                     925      MOVE.W D2, -(SP)
000017E0  4EB8 11A6                926      JSR CHECK_SUPPORT_REGISTER
000017E4  544F                     927      ADDQ #2, SP 
000017E6                           928      ; check return value
000017E6                           929      *  from print_register to see if it is unsupported register 
000017E6  3439 00009000            930      MOVE.W (RETURN_ADDRESS), D2 
000017EC  0C42 0002                931      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017F0  6700 F850                932      BEQ FINISH_OPCODE
000017F4  4EB9 00001FD4            933      JSR PRINT_ADDA
000017FA  3401                     934      MOVE.W D1, D2  ; START TO MASK SIZE 
000017FC  C47C 0100                935      AND.W #ADDA_SIZE_MASKING,D2 
00001800  E04A                     936      LSR.W #8, D2 
00001802  3C02                     937      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
00001804  5246                     938      ADDQ #$1, D6
00001806  1F06                     939      MOVE.B D6 , -(SP)
00001808  4EB8 1134                940      JSR PRINT_DATA
0000180C  548F                     941      ADDQ.L #$2, SP 
0000180E  4EB8 10AE                942      JSR PRINT_TAB
00001812                           943      ; GET MODE AND REGISTER
00001812  3238 7006                944      MOVE.W (OPCODE_ADDRESS), D1 
00001816  1401                     945      MOVE.B D1, D2 
00001818  C43C 003F                946      AND.B #%00111111, D2 
0000181C  3F02                     947      MOVE.W D2, -(SP)
0000181E  3F06                     948      MOVE.W D6, -(SP)
00001820  4EB8 124C                949      JSR PRINT_REGISTER 
00001824  588F                     950      ADDQ.L #$04, SP 
00001826  4EB8 10CC                951      JSR PRINT_COMMA
0000182A  3238 7006                952      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
0000182E  3401                     953      MOVE.W D1, D2
00001830  C47C 0E00                954      AND.W #ADDA_AN_MASKING, D2
00001834  E04A                     955      LSR.W #8, D2 
00001836  E24A                     956      LSR.W #1, D2 
00001838  843C 0008                957      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
0000183C  3F02                     958      MOVE.W D2, -(SP)
0000183E  3F3C 0000                959      MOVE.W #$0, -(SP)
00001842  4EB8 124C                960      JSR PRINT_REGISTER 
00001846  588F                     961      ADDQ.L #$4, SP 
00001848  6000 F7F8                962      BRA FINISH_OPCODE
0000184C                           963  ADDA_END:
0000184C  4E75                     964      RTS
0000184E                           965  
0000184E                           966  ADD: 
0000184E  =0000D000                967  C_ADD EQU           %1101000000000000 ; PATTERN
0000184E  =0000F000                968  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
0000184E  =0000003F                969  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
0000184E  =00000E00                970  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
0000184E  =000000C0                971  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
0000184E  =00000100                972  C_ADD_DIRECTION EQU %0000000100000000
0000184E  =00000000                973  C_ADD_TO_D EQU      %0000000000000000
0000184E  =00000100                974  C_ADD_FROM_D EQU    %0000000100000000
0000184E  3401                     975      MOVE.W D1, D2 
00001850                           976      ; CHECK PATTERN 
00001850  C47C F000                977      AND.W #C_ADD_MASKING, D2 
00001854  0C42 D000                978      CMPI.W #C_ADD, D2 
00001858  6600 00C4                979      BNE ADD_END 
0000185C                           980      ; CHECK SUPPORT REGISTER 
0000185C  3401                     981      MOVE.W D1, D2 
0000185E  C43C 003F                982      AND.B #%00111111, D2 
00001862  3F02                     983      MOVE.W D2, -(SP)
00001864  4EB8 11A6                984      JSR CHECK_SUPPORT_REGISTER
00001868  544F                     985      ADDQ #2, SP 
0000186A                           986      ; check return value
0000186A                           987      *  from print_register to see if it is unsupported register 
0000186A  3439 00009000            988      MOVE.W (RETURN_ADDRESS), D2 
00001870  0C42 0002                989      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001874  6700 F7CC                990      BEQ FINISH_OPCODE
00001878                           991      
00001878  4EB9 00001FE2            992      JSR PRINT_ADD 
0000187E  3238 7006                993      MOVE.W (OPCODE_ADDRESS), D1 
00001882  3401                     994      MOVE.W D1, D2 
00001884  C47C 00C0                995      AND.W #C_ADD_SIZE, D2 
00001888  EC4A                     996      LSR.W #6, D2
0000188A  1C02                     997      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
0000188C                           998  
0000188C  1F02                     999      MOVE.B D2, -(SP)
0000188E  4EB8 1134               1000      JSR PRINT_DATA
00001892  548F                    1001      ADDQ.L #$02, SP 
00001894  4EB8 10AE               1002      JSR PRINT_TAB 
00001898                          1003      ; CHECK DIRECTION
00001898  3238 7006               1004      MOVE.W (OPCODE_ADDRESS), D1 
0000189C  3401                    1005      MOVE.W D1, D2  
0000189E  C47C 0100               1006      AND.W #C_ADD_DIRECTION, D2 
000018A2  0C42 0000               1007      CMPI.W #C_ADD_TO_D, D2 
000018A6  6700 003C               1008      BEQ ADD_TO_D ; DN <EA> -> DN
000018AA                          1009      ; otherwise from d 
000018AA                          1010  ADD_FROM_D:
000018AA  3238 7006               1011      MOVE.W (OPCODE_ADDRESS), D1 
000018AE  3401                    1012      MOVE.W D1, D2 
000018B0  C47C 0E00               1013      AND.W #C_ADD_REGISTER, D2 
000018B4  E08A                    1014      LSR.L #8, D2 
000018B6  E28A                    1015      LSR.L #1, D2 
000018B8  843C 0000               1016      OR.B #%00000000, D2
000018BC  3F02                    1017      MOVE.W D2, -(SP)
000018BE  3F3C 0000               1018      MOVE.W #$0, -(SP)
000018C2  4EB8 124C               1019      JSR PRINT_REGISTER 
000018C6  5882                    1020      ADDQ.L #4, D2 
000018C8  4EB8 10CC               1021      JSR PRINT_COMMA 
000018CC                          1022      
000018CC  3238 7006               1023      MOVE.W (OPCODE_ADDRESS), D1 
000018D0  3401                    1024      MOVE.W D1, D2 
000018D2  C43C 003F               1025      AND.B #C_ADD_EA, D2 
000018D6  3F02                    1026      MOVE.W D2, -(SP)
000018D8  3F06                    1027      MOVE.W D6, -(SP)
000018DA  4EB8 124C               1028      JSR PRINT_REGISTER
000018DE  588F                    1029      ADDQ.L #4, SP 
000018E0  6000 F760               1030      BRA FINISH_OPCODE
000018E4                          1031      
000018E4                          1032  ADD_TO_D:
000018E4  3238 7006               1033      MOVE.W (OPCODE_ADDRESS), D1 
000018E8  3401                    1034      MOVE.W D1, D2 
000018EA                          1035      ; GET SOURCE REGISTER 
000018EA  C43C 003F               1036      AND.B #C_ADD_EA, D2 
000018EE  3F02                    1037      MOVE.W D2, -(SP)
000018F0  3F06                    1038      MOVE.W D6, -(SP)
000018F2  4EB8 124C               1039      JSR PRINT_REGISTER
000018F6  588F                    1040      ADDQ.L #4, SP 
000018F8  4EB8 10CC               1041      JSR PRINT_COMMA 
000018FC                          1042      ; PRINT DATA REGISTER 
000018FC  3238 7006               1043      MOVE.W (OPCODE_ADDRESS), D1 
00001900  3401                    1044      MOVE.W D1, D2 
00001902  C47C 0E00               1045      AND.W #C_ADD_REGISTER, D2 
00001906  E04A                    1046      LSR.W #8, D2 
00001908  E24A                    1047      LSR.W #1, D2 
0000190A                          1048      ; APPEND MODE TO D2 FOR PRINT_REGISTER
0000190A  843C 0000               1049      OR.B #%00000000, D2 
0000190E  3F02                    1050      MOVE.W D2, -(SP)
00001910  3F3C 0000               1051      MOVE.W #$0, -(SP)
00001914  4EB8 124C               1052      JSR PRINT_REGISTER
00001918  588F                    1053      ADDQ.L #4, SP 
0000191A  6000 F726               1054      BRA FINISH_OPCODE
0000191E                          1055  ADD_END:
0000191E  4E75                    1056      RTS
00001920                          1057  
00001920                          1058  MOVEA: 
00001920  =00001040               1059  C_MOVEA_PATTERN1 EQU  %0001000001000000
00001920  =00003040               1060  C_MOVEA_PATTERN2 EQU  %0011000001000000
00001920  =00002040               1061  C_MOVEA_PATTERN3 EQU  %0010000001000000
00001920  =0000F1C0               1062  C_MOVEA_P_MASKING EQU %1111000111000000
00001920  =00003000               1063  C_MOVEA_SIZE      EQU %0011000000000000
00001920  =00000E00               1064  C_MOVEA_AN        EQU %0000111000000000
00001920  =0000003F               1065  C_MOVEA_REGISTER  EQU %00111111
00001920  3401                    1066      MOVE.W D1, D2 
00001922  0242 F1C0               1067      ANDI.W #C_MOVEA_P_MASKING, D2 
00001926  0C42 1040               1068      CMPI.W #C_MOVEA_PATTERN1, D2 
0000192A  6700 0014               1069      BEQ MOVEA_REGISTER_OK
0000192E  0C42 3040               1070      CMPI.W #C_MOVEA_PATTERN2, D2 
00001932  6700 000C               1071      BEQ MOVEA_REGISTER_OK
00001936  0C42 2040               1072      CMPI.W #C_MOVEA_PATTERN3, D2 
0000193A  6700 0004               1073      BEQ MOVEA_REGISTER_OK
0000193E  4E75                    1074      RTS
00001940                          1075  MOVEA_REGISTER_OK:
00001940                          1076      ; CHECK SUPPORT THE REGISTER 
00001940  3401                    1077      MOVE.W D1, D2 
00001942  C43C 003F               1078      AND.B #C_MOVEA_REGISTER, D2 
00001946  3F02                    1079      MOVE.W D2, -(SP) 
00001948  4EB8 11A6               1080      JSR CHECK_SUPPORT_REGISTER
0000194C  548F                    1081      ADDQ.L #2, SP 
0000194E  3439 00009000           1082      MOVE.W (RETURN_ADDRESS), D2 
00001954  0C42 0002               1083      CMPI.W #C_UNSUPPORT_REGISTER, D2 
00001958  6700 F6E8               1084      BEQ FINISH_OPCODE
0000195C                          1085      ; DONE CHECKING, NOW DECODE 
0000195C  4EB9 0000201A           1086      JSR PRINT_MOVEA 
00001962                          1087      ; GET SIZE 
00001962  3401                    1088      MOVE.W D1, D2 
00001964  C47C 3000               1089      AND.W #C_MOVEA_SIZE, D2 
00001968                          1090      ; SHIFT TO LSB 
00001968  E04A                    1091      LSR.W #8, D2 
0000196A  E84A                    1092      LSR.W #4, D2 
0000196C  0C02 0001               1093      CMPI.B #%00000001, D2
00001970  6700 000E               1094      BEQ CONVERT_OPMODE_SIZE_B
00001974  0C02 0003               1095      CMPI.B #%00000011, D2 
00001978  6700 000C               1096      BEQ CONVERT_OPMODE_SIZE_W
0000197C  6000 000E               1097      BRA MOVEA_DONE_CONVERT
00001980                          1098  CONVERT_OPMODE_SIZE_B:
00001980  5302                    1099      SUBQ.B #1, D2 
00001982  6000 0008               1100      BRA MOVEA_DONE_CONVERT
00001986                          1101  CONVERT_OPMODE_SIZE_W: 
00001986  5502                    1102      SUBQ.B #2, D2 
00001988  6000 0002               1103      BRA MOVEA_DONE_CONVERT
0000198C                          1104  
0000198C                          1105  MOVEA_DONE_CONVERT:
0000198C  3C02                    1106      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
0000198E  1F06                    1107      MOVE.B D6, -(SP)
00001990  4EB8 1134               1108      JSR PRINT_DATA 
00001994  548F                    1109      ADDQ.L #2, SP 
00001996  4EB8 10AE               1110      JSR PRINT_TAB
0000199A                          1111      ; GET SOURCE REGISTER 
0000199A  3238 7006               1112      MOVE.W (OPCODE_ADDRESS), D1 
0000199E  3401                    1113      MOVE.W D1, D2 
000019A0  C43C 003F               1114      AND.B #C_MOVEA_REGISTER,D2 
000019A4  3F02                    1115      MOVE.W D2, -(SP)
000019A6  3F06                    1116      MOVE.W D6, -(SP)
000019A8  4EB8 124C               1117      JSR PRINT_REGISTER
000019AC  588F                    1118      ADDQ.L #4, SP 
000019AE  4EB8 10CC               1119      JSR PRINT_COMMA
000019B2                          1120  
000019B2  3238 7006               1121      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019B6  3401                    1122      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019B8  C47C 0E00               1123      AND.W #C_MOVEA_AN, D2 
000019BC  E04A                    1124      LSR.W #8, D2 
000019BE  E24A                    1125      LSR.W #1, D2 
000019C0                          1126      ; ADD MODE FOR PRINT_REGISTER 
000019C0  0002 0008               1127      ORI.B #%00001000, D2 
000019C4  3F02                    1128      MOVE.W D2, -(SP)
000019C6  3F3C 0000               1129      MOVE.W #0, -(SP)
000019CA  4EB8 124C               1130      JSR PRINT_REGISTER ; PRINT AN 
000019CE  588F                    1131      ADDQ.L #4, SP 
000019D0  6000 F670               1132      BRA FINISH_OPCODE   
000019D4                          1133  
000019D4                          1134  MOVEA_END: 
000019D4  4E75                    1135      RTS 
000019D6                          1136  
000019D6                          1137  MOVE: 
000019D6  =00001000               1138  C_MOVE_PATTERN EQU   %0001000000000000
000019D6  =00003000               1139  C_MOVE_PATTERN1 EQU  %0011000000000000
000019D6  =00002000               1140  C_MOVE_PATTERN2 EQU  %0010000000000000
000019D6  =0000F000               1141  C_MOVE_MASKING EQU   %1111000000000000
000019D6  =00003000               1142  C_MOVE_SIZE EQU      %0011000000000000
000019D6  =00000E00               1143  C_MOVE_DES_XN EQU    %0000111000000000
000019D6  =000001C0               1144  C_MOVE_DES_MOD EQU   %0000000111000000
000019D6  =0000003F               1145  C_MOVE_SRC_RE EQU    %00111111 
000019D6  3401                    1146      MOVE.W D1, D2 
000019D8  C47C F000               1147      AND.W #C_MOVE_MASKING, D2 
000019DC  0C42 1000               1148      CMPI.W #C_MOVE_PATTERN, D2 
000019E0  6700 0014               1149      BEQ MOVE_MATCH_PATTERN 
000019E4  0C42 3000               1150      CMPI.W #C_MOVE_PATTERN1, D2 
000019E8  6700 000C               1151      BEQ MOVE_MATCH_PATTERN 
000019EC  0C42 2000               1152      CMPI.W #C_MOVE_PATTERN2, D2 
000019F0  6700 0004               1153      BEQ MOVE_MATCH_PATTERN
000019F4                          1154  MOVE_END:
000019F4  4E75                    1155      RTS
000019F6                          1156  MOVE_MATCH_PATTERN: 
000019F6  3401                    1157      MOVE.W D1, D2 
000019F8                          1158      ; CHECK IF WE SUPPORT THE REGISTER 
000019F8                          1159      ; SOURCE REGISTER 
000019F8  C43C 003F               1160      AND.B #C_MOVE_SRC_RE, D2
000019FC  3A42                    1161      MOVE.W D2, A5 ; COPY FOR LATER USE
000019FE  3F02                    1162      MOVE.W D2, -(SP)
00001A00  4EB8 11A6               1163      JSR CHECK_SUPPORT_REGISTER 
00001A04  548F                    1164      ADDQ.L #2, SP 
00001A06  0C79 0002 00009000      1165      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A0E  6700 F632               1166      BEQ FINISH_OPCODE
00001A12                          1167      ; DES REGISTER 
00001A12                          1168      ;GET XN 
00001A12  3238 7006               1169      MOVE.W (OPCODE_ADDRESS), D1 
00001A16  3401                    1170      MOVE.W D1,D2 
00001A18  C47C 0E00               1171      AND.W #C_MOVE_DES_XN, D2 
00001A1C  EC4A                    1172      LSR.W #6, D2 
00001A1E  C27C 01C0               1173      AND.W #C_MOVE_DES_MOD, D1 
00001A22  8441                    1174      OR.W D1, D2 
00001A24  E64A                    1175      LSR.W #3, D2 
00001A26  3842                    1176      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A28  3F02                    1177      MOVE.W D2, -(SP)
00001A2A  4EB8 11A6               1178      JSR CHECK_SUPPORT_REGISTER
00001A2E  548F                    1179      ADDQ.L #2, SP 
00001A30  0C79 11A6 00009000      1180      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A38  6700 F608               1181      BEQ FINISH_OPCODE
00001A3C                          1182      ; EVERYTHING IS OK 
00001A3C                          1183      
00001A3C  4EB9 00002028           1184      JSR PRINT_MOVE
00001A42  3238 7006               1185      MOVE.W (OPCODE_ADDRESS), D1 
00001A46  3401                    1186      MOVE.W D1, D2 
00001A48  C47C 3000               1187      AND.W #C_MOVE_SIZE, D2 
00001A4C  E04A                    1188      LSR.W #8, D2 
00001A4E  E80A                    1189      LSR.B #4, D2 
00001A50  0C02 0001               1190      CMPI.B #1, D2 
00001A54  6700 000E               1191      BEQ MOVE_OPMODE_BYTE
00001A58  0C02 0003               1192      CMPI.B #3, D2 
00001A5C  6700 000C               1193      BEQ MOVE_OPMODE_WORD
00001A60  6000 000E               1194      BRA MOVE_DONE_CONVERT
00001A64                          1195  MOVE_OPMODE_BYTE:
00001A64  5302                    1196      SUBQ.B #1, D2
00001A66  6000 0008               1197      BRA MOVE_DONE_CONVERT
00001A6A                          1198  MOVE_OPMODE_WORD:
00001A6A  5502                    1199      SUBQ.B #2, D2 
00001A6C  6000 0002               1200      BRA MOVE_DONE_CONVERT
00001A70                          1201  MOVE_DONE_CONVERT:
00001A70  3C02                    1202      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A72  1F06                    1203      MOVE.B D6, -(SP) 
00001A74  4EB8 1134               1204      JSR PRINT_DATA 
00001A78  548F                    1205      ADDQ.L #2, SP
00001A7A  4EB8 10AE               1206      JSR PRINT_TAB 
00001A7E                          1207      ; PRINT SOURCE
00001A7E  3F0D                    1208      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A80  3F06                    1209      MOVE.W D6, -(SP) ; SIZE 
00001A82  4EB8 124C               1210      JSR PRINT_REGISTER
00001A86  588F                    1211      ADDQ.L #4, SP 
00001A88                          1212      ; PRINT DES 
00001A88  4EB8 10CC               1213      JSR PRINT_COMMA 
00001A8C  3F0C                    1214      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A8E  3F06                    1215      MOVE.W D6, -(SP) ; SIZE 
00001A90  4EB8 124C               1216      JSR PRINT_REGISTER 
00001A94  588F                    1217      ADDQ.L #4, SP 
00001A96  6000 F5AA               1218      BRA FINISH_OPCODE 
00001A9A                          1219  
00001A9A                          1220  MOVEM: 
00001A9A  =00004880               1221  C_MOVEM_PATTERN EQU %0100100010000000
00001A9A  =0000FB80               1222  C_MOVEM_MASKING EQU %1111101110000000
00001A9A  =00000400               1223  C_MOVEM_DIR EQU     %0000010000000000
00001A9A  =00000040               1224  C_MOVEM_SIZE EQU    %0000000001000000
00001A9A                          1225  * C_MOVEM_REGISTER EQU
00001A9A                          1226  
00001A9A                          1227  
00001A9A                          1228  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A9A                          1229  NEG:
00001A9A                          1230  * CONSTANT FOR NEG OPCODE
00001A9A  =00004400               1231  NEG_OPCODE EQU %0100010000000000
00001A9A  =0000FF00               1232  NEG_M      EQU %1111111100000000
00001A9A  =0000003F               1233  NEG_REG_M  EQU %0000000000111111
00001A9A  =000000C0               1234  NEG_SIZE_M EQU %0000000011000000
00001A9A  3401                    1235      MOVE.W D1, D2
00001A9C                          1236  * MASKING WITH NEG UNIQUE CODE
00001A9C  C47C FF00               1237      AND.W #NEG_M, D2
00001AA0  B47C 4400               1238      CMP.W #NEG_OPCODE, D2
00001AA4  6600 0056               1239      BNE NEG_END
00001AA8                          1240  
00001AA8                          1241  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001AA8  3401                    1242      MOVE.W D1, D2 
00001AAA  C43C 003F               1243      AND.B #NEG_REG_M, D2 
00001AAE  3F02                    1244      MOVE.W D2, -(SP)
00001AB0  4EB8 11A6               1245      JSR CHECK_SUPPORT_REGISTER
00001AB4  544F                    1246      ADDQ #2, SP 
00001AB6                          1247  * from print_register to see if it is unsupported register 
00001AB6  3439 00009000           1248      MOVE.W (RETURN_ADDRESS), D2 
00001ABC  0C42 0002               1249      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001AC0  6700 F580               1250      BEQ FINISH_OPCODE
00001AC4                          1251  
00001AC4  4EB9 00001F4E           1252      JSR PRINT_NEG
00001ACA  3238 7006               1253      MOVE.W (OPCODE_ADDRESS), D1 
00001ACE  3401                    1254      MOVE.W D1, D2
00001AD0                          1255  * MASKING TO GET NEG SIZE
00001AD0  C47C 00C0               1256      AND.W #NEG_SIZE_M, D2
00001AD4  EC42                    1257      ASR.W #6, D2
00001AD6  1C02                    1258      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001AD8  1F06                    1259      MOVE.B D6, -(SP)
00001ADA  4EB8 1134               1260      JSR PRINT_DATA
00001ADE  548F                    1261      ADDQ.L #2, SP
00001AE0  4EB8 10AE               1262      JSR PRINT_TAB
00001AE4                          1263  
00001AE4  3238 7006               1264      MOVE.W (OPCODE_ADDRESS), D1     
00001AE8  3401                    1265      MOVE.W D1, D2
00001AEA                          1266  * MASKING TO GET MODE AND REGISTER
00001AEA  C47C 003F               1267      AND.W #NEG_REG_M, D2
00001AEE  3F02                    1268      MOVE.W D2, -(SP)
00001AF0  3F06                    1269      MOVE.W D6, -(SP)
00001AF2  4EB8 124C               1270      JSR PRINT_REGISTER
00001AF6  588F                    1271      ADDQ.L #$04, SP
00001AF8  6000 F548               1272      BRA FINISH_OPCODE
00001AFC                          1273  NEG_END: 
00001AFC  4E75                    1274      RTS
00001AFE                          1275  
00001AFE                          1276  BRA:
00001AFE                          1277  * CONSTANT FOR BRA OPCODE
00001AFE  =00006000               1278  BRA_OPCODE EQU %0110000000000000
00001AFE  =0000FF00               1279  BRA_M      EQU %1111111100000000
00001AFE  =000000FF               1280  BRA_DISP_M EQU %0000000011111111
00001AFE  3401                    1281      MOVE.W D1, D2
00001B00                          1282  * MASKING WITH BRA UNIQUE CODE
00001B00  C47C FF00               1283      AND.W #BRA_M, D2
00001B04  B47C 6000               1284      CMP.W #BRA_OPCODE, D2
00001B08  6600 0030               1285      BNE BRA_END
00001B0C                          1286  
00001B0C                          1287  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B0C  3401                    1288      MOVE.W D1, D2 
00001B0E  C43C 00FF               1289      AND.B #BRA_DISP_M, D2 
00001B12  3F02                    1290      MOVE.W D2, -(SP)
00001B14  4EB8 11A6               1291      JSR CHECK_SUPPORT_REGISTER
00001B18  544F                    1292      ADDQ #2, SP 
00001B1A                          1293  * from print_register to see if it is unsupported register 
00001B1A  3439 00009000           1294      MOVE.W (RETURN_ADDRESS), D2 
00001B20  0C42 0002               1295      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B24                          1296  
00001B24  4EB9 00001F5C           1297      JSR PRINT_BRA
00001B2A  3238 7006               1298      MOVE.W (OPCODE_ADDRESS), D1 
00001B2E  3401                    1299      MOVE.W D1, D2
00001B30                          1300  * MASKING TO GET DISPLACEMENT OF BRA
00001B30  C47C 00FF               1301      AND.W #BRA_DISP_M, D2
00001B34  3F02                    1302      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B36  6000 F50A               1303      BRA FINISH_OPCODE
00001B3A                          1304  BRA_END:
00001B3A  4E75                    1305      RTS
00001B3C                          1306  
00001B3C                          1307  OR:
00001B3C                          1308  * CONSTANT FOR OR OPCODE
00001B3C  =00008000               1309  OR_OPCODE EQU %1000000000000000
00001B3C  =0000F000               1310  OR_M      EQU %1111000000000000
00001B3C  =00000E00               1311  OR_DREG_M EQU %0000111000000000
00001B3C  =000000C0               1312  OR_SIZE_M EQU %0000000011000000
00001B3C  =0000003F               1313  OR_REG_M  EQU %0000000000111111
00001B3C  =00000100               1314  OR_DIREC  EQU %0000000100000000
00001B3C                          1315  
00001B3C  3401                    1316      MOVE.W D1, D2
00001B3E                          1317  * MASKING WITH OR UNIQUE CODE
00001B3E  C47C F000               1318      AND.W #OR_M, D2
00001B42  0C42 8000               1319      CMPI.W #OR_OPCODE, D2
00001B46  6600 00C0               1320      BNE OR_END
00001B4A                          1321  
00001B4A                          1322  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B4A  3401                    1323      MOVE.W D1, D2 
00001B4C  C43C 003F               1324      AND.B #OR_REG_M, D2 
00001B50  3F02                    1325      MOVE.W D2, -(SP)
00001B52  4EB8 11A6               1326      JSR CHECK_SUPPORT_REGISTER
00001B56  544F                    1327      ADDQ #2, SP 
00001B58                          1328  * from print_register to see if it is unsupported register 
00001B58  3439 00009000           1329      MOVE.W (RETURN_ADDRESS), D2 
00001B5E  0C42 0002               1330      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B62                          1331  
00001B62  4EB9 00001F6A           1332      JSR PRINT_OR
00001B68  3238 7006               1333      MOVE.W (OPCODE_ADDRESS), D1
00001B6C  3401                    1334      MOVE.W D1, D2
00001B6E                          1335  * MASKING TO GET SIZE OF OR
00001B6E  C47C 00C0               1336      AND.W #OR_SIZE_M, D2
00001B72  EC42                    1337      ASR.W #6, D2
00001B74  1C02                    1338      MOVE.B D2, D6
00001B76  1F02                    1339      MOVE.B D2, -(SP)
00001B78  4EB8 1134               1340      JSR PRINT_DATA
00001B7C  548F                    1341      ADDQ.L #$02, SP 
00001B7E  4EB8 10AE               1342      JSR PRINT_TAB
00001B82                          1343  * MASKING TO GET DIRECTION OF THIS OR
00001B82  3238 7006               1344      MOVE.W (OPCODE_ADDRESS), D1 
00001B86  3401                    1345      MOVE.W D1, D2  
00001B88  C47C 0100               1346      AND.W #OR_DIREC, D2 
00001B8C  0C42 0100               1347      CMPI.W #OR_DIREC, D2 
00001B90  6600 003C               1348      BNE OR_TO_D  * DN V <EA> -> DN
00001B94                          1349  
00001B94                          1350  OR_TO_EA:  * DN V <EA> -> <EA>
00001B94  3238 7006               1351      MOVE.W (OPCODE_ADDRESS), D1 
00001B98  3401                    1352      MOVE.W D1, D2 
00001B9A  C47C 0E00               1353      AND.W #OR_DREG_M, D2 
00001B9E  E08A                    1354      LSR.L #8, D2 
00001BA0  E28A                    1355      LSR.L #1, D2 
00001BA2  843C 0000               1356      OR.B #%00000000, D2
00001BA6  3F02                    1357      MOVE.W D2, -(SP)
00001BA8  3F3C 0000               1358      MOVE.W #$0, -(SP)
00001BAC  4EB8 124C               1359      JSR PRINT_REGISTER 
00001BB0  5882                    1360      ADDQ.L #4, D2 
00001BB2  4EB8 10CC               1361      JSR PRINT_COMMA 
00001BB6                          1362      
00001BB6  3238 7006               1363      MOVE.W (OPCODE_ADDRESS), D1 
00001BBA  3401                    1364      MOVE.W D1, D2 
00001BBC  C43C 003F               1365      AND.B #OR_REG_M, D2 
00001BC0  3F02                    1366      MOVE.W D2, -(SP)
00001BC2  3F06                    1367      MOVE.W D6, -(SP)
00001BC4  4EB8 124C               1368      JSR PRINT_REGISTER
00001BC8  588F                    1369      ADDQ.L #4, SP 
00001BCA  6000 F476               1370      BRA FINISH_OPCODE
00001BCE                          1371  
00001BCE                          1372  OR_TO_D:   * <EA> V DN -> DN
00001BCE  3238 7006               1373      MOVE.W (OPCODE_ADDRESS), D1 
00001BD2  3401                    1374      MOVE.W D1, D2 
00001BD4                          1375  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BD4  C43C 003F               1376      AND.B #OR_REG_M, D2 
00001BD8  3F02                    1377      MOVE.W D2, -(SP)
00001BDA  3F06                    1378      MOVE.W D6, -(SP)
00001BDC  4EB8 124C               1379      JSR PRINT_REGISTER
00001BE0  588F                    1380      ADDQ.L #4, SP 
00001BE2  4EB8 10CC               1381      JSR PRINT_COMMA 
00001BE6                          1382  * MASKING TO GET THE DATA REGISTER 
00001BE6  3238 7006               1383      MOVE.W (OPCODE_ADDRESS), D1 
00001BEA  3401                    1384      MOVE.W D1, D2 
00001BEC  C47C 0E00               1385      AND.W #OR_DREG_M, D2 
00001BF0  E04A                    1386      LSR.W #8, D2 
00001BF2  E24A                    1387      LSR.W #1, D2 
00001BF4                          1388      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BF4  843C 0000               1389      OR.B #%00000000, D2 
00001BF8  3F02                    1390      MOVE.W D2, -(SP)
00001BFA  3F3C 0000               1391      MOVE.W #$0, -(SP)
00001BFE  4EB8 124C               1392      JSR PRINT_REGISTER
00001C02  588F                    1393      ADDQ.L #4, SP 
00001C04  6000 F43C               1394      BRA FINISH_OPCODE
00001C08                          1395  OR_END:
00001C08  4E75                    1396      RTS
00001C0A                          1397  
00001C0A                          1398  ORI:
00001C0A                          1399  * CONSTANT FOR ORI OPCODE
00001C0A  =00000000               1400  ORI_OPCODE EQU %0000000000000000
00001C0A  =0000FF00               1401  ORI_M      EQU %1111111100000000
00001C0A  =0000003F               1402  ORI_REG_M  EQU %0000000000111111
00001C0A  =000000C0               1403  ORI_SIZE_M EQU %0000000011000000
00001C0A  3401                    1404      MOVE.W D1, D2
00001C0C                          1405  * MASKING WITH ORI UNIQUE CODE
00001C0C  C47C FF00               1406      AND.W #ORI_M, D2
00001C10  B47C 0000               1407      CMP.W #ORI_OPCODE, D2
00001C14  6600 0048               1408      BNE ORI_END
00001C18                          1409  
00001C18                          1410  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C18  3401                    1411      MOVE.W D1, D2 
00001C1A  C43C 003F               1412      AND.B #ORI_REG_M, D2 
00001C1E  3F02                    1413      MOVE.W D2, -(SP)
00001C20  4EB8 11A6               1414      JSR CHECK_SUPPORT_REGISTER
00001C24  544F                    1415      ADDQ #2, SP 
00001C26                          1416  * from print_register to see if it is unsupported register 
00001C26  3439 00009000           1417      MOVE.W (RETURN_ADDRESS), D2 
00001C2C  0C42 0002               1418      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C30  6700 F410               1419      BEQ FINISH_OPCODE
00001C34                          1420  
00001C34  4EB9 00001F78           1421      JSR PRINT_ORI
00001C3A  3238 7006               1422      MOVE.W (OPCODE_ADDRESS), D1
00001C3E  3401                    1423      MOVE.W D1, D2
00001C40                          1424  * MASKING TO GET SIZE OF ORI
00001C40  C47C 00C0               1425      AND.W #ORI_SIZE_M, D2 
00001C44  EC42                    1426      ASR.W #6, D2
00001C46  1C02                    1427      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C48  1F06                    1428      MOVE.B D6, -(SP)
00001C4A  4EB8 1134               1429      JSR PRINT_DATA
00001C4E  548F                    1430      ADDQ.L #$02, SP
00001C50  4EB8 10AE               1431      JSR PRINT_TAB
00001C54                          1432   
00001C54  3238 7006               1433      MOVE.W (OPCODE_ADDRESS), D1     
00001C58  3401                    1434      MOVE.W D1, D2
00001C5A                          1435      *------------------------------------
00001C5A                          1436      * AND.W #ORI_REG_M, D2 
00001C5A                          1437      * LSR.L #8, D2 
00001C5A                          1438      * LSR.L #1, D2 
00001C5A                          1439      * OR.B #%00000000, D2
00001C5A                          1440      * MOVE.W D2, -(SP)
00001C5A                          1441      * MOVE.W #$0, -(SP)
00001C5A                          1442      * JSR PRINT_REGISTER 
00001C5A                          1443      * ADDQ.L #4, D2 
00001C5A                          1444      * JSR PRINT_COMMA 
00001C5A                          1445      
00001C5A                          1446      * AND.B #ORI_REG_M, D2 
00001C5A                          1447      * MOVE.W D2, -(SP)
00001C5A                          1448      * MOVE.W D6, -(SP)
00001C5A                          1449      * JSR PRINT_REGISTER
00001C5A                          1450      * ADDQ.L #4, SP 
00001C5A                          1451      *------------------------------------
00001C5A  6000 F3E6               1452      BRA FINISH_OPCODE
00001C5E                          1453  ORI_END:
00001C5E  4E75                    1454      RTS
00001C60                          1455  
00001C60                          1456  EOR:
00001C60                          1457  * CONSTANT FEOR EOR OPCODE
00001C60  =0000B100               1458  EOR_OPCODE EQU %1011000100000000
00001C60  =0000F100               1459  EOR_M      EQU %1111000100000000
00001C60  =00000E00               1460  EOR_DREG_M EQU %0000111000000000
00001C60  =000000C0               1461  EOR_SIZE_M EQU %0000000011000000
00001C60  =0000003F               1462  EOR_REG_M  EQU %0000000000111111
00001C60  =00000100               1463  EOR_DIREC  EQU %0000000100000000
00001C60                          1464  
00001C60  3401                    1465      MOVE.W D1, D2
00001C62                          1466  * MASKING WITH EOR UNIQUE CODE
00001C62  C47C F100               1467      AND.W #EOR_M, D2
00001C66  B47C B100               1468      CMP.W #EOR_OPCODE, D2
00001C6A  6600 0074               1469      BNE EOR_END
00001C6E                          1470  
00001C6E                          1471  * CHECK TO MAKE SURE WE SUPPEORT THE EA
00001C6E  3401                    1472      MOVE.W D1, D2 
00001C70  C43C 003F               1473      AND.B #EOR_REG_M, D2 
00001C74  3F02                    1474      MOVE.W D2, -(SP)
00001C76  4EB8 11A6               1475      JSR CHECK_SUPPORT_REGISTER
00001C7A  544F                    1476      ADDQ #2, SP 
00001C7C                          1477  * from print_register to see if it is unsuppEorted register 
00001C7C  3439 00009000           1478      MOVE.W (RETURN_ADDRESS), D2 
00001C82  0C42 0002               1479      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C86                          1480  
00001C86  4EB9 00001F86           1481      JSR PRINT_EOR
00001C8C  3238 7006               1482      MOVE.W (OPCODE_ADDRESS), D1
00001C90  3401                    1483      MOVE.W D1, D2
00001C92                          1484  * MASKING TO GET SIZE OF EOR
00001C92  C47C 00C0               1485      AND.W #EOR_SIZE_M, D2
00001C96  EC42                    1486      ASR.W #6, D2
00001C98  1C02                    1487      MOVE.B D2, D6
00001C9A  1F02                    1488      MOVE.B D2, -(SP)
00001C9C  4EB8 1134               1489      JSR PRINT_DATA
00001CA0  548F                    1490      ADDQ.L #$02, SP 
00001CA2  4EB8 10AE               1491      JSR PRINT_TAB
00001CA6                          1492  
00001CA6                          1493  * <EA> EOR DN -> <EA>
00001CA6  3238 7006               1494      MOVE.W (OPCODE_ADDRESS), D1 
00001CAA  3401                    1495      MOVE.W D1, D2 
00001CAC  C47C 0E00               1496      AND.W #EOR_DREG_M, D2 
00001CB0  E08A                    1497      LSR.L #8, D2 
00001CB2  E28A                    1498      LSR.L #1, D2 
00001CB4  843C 0000               1499      OR.B #%00000000, D2
00001CB8  3F02                    1500      MOVE.W D2, -(SP)
00001CBA  3F3C 0000               1501      MOVE.W #$0, -(SP)
00001CBE  4EB8 124C               1502      JSR PRINT_REGISTER 
00001CC2  5882                    1503      ADDQ.L #4, D2 
00001CC4  4EB8 10CC               1504      JSR PRINT_COMMA 
00001CC8                          1505      
00001CC8  3238 7006               1506      MOVE.W (OPCODE_ADDRESS), D1 
00001CCC  3401                    1507      MOVE.W D1, D2 
00001CCE  C43C 003F               1508      AND.B #EOR_REG_M, D2 
00001CD2  3F02                    1509      MOVE.W D2, -(SP)
00001CD4  3F06                    1510      MOVE.W D6, -(SP)
00001CD6  4EB8 124C               1511      JSR PRINT_REGISTER
00001CDA  588F                    1512      ADDQ.L #4, SP 
00001CDC  6000 F364               1513      BRA FINISH_OPCODE
00001CE0                          1514  
00001CE0                          1515  EOR_END:
00001CE0  4E75                    1516      RTS
00001CE2                          1517  
00001CE2                          1518  SUB:
00001CE2                          1519  * CONSTANT FOR SUB OPCODE
00001CE2  =00009000               1520  SUB_OPCODE EQU %1001000000000000
00001CE2  =0000F000               1521  SUB_M      EQU %1111000000000000
00001CE2  =00000E00               1522  SUB_DREG_M EQU %0000111000000000
00001CE2  =000000C0               1523  SUB_SIZE_M EQU %0000000011000000
00001CE2  =0000003F               1524  SUB_REG_M  EQU %0000000000111111
00001CE2  =00000100               1525  SUB_DIREC  EQU %0000000100000000
00001CE2                          1526  
00001CE2  3401                    1527      MOVE.W D1, D2
00001CE4                          1528  * MASKING WITH SUB UNIQUE CODE
00001CE4  C47C F000               1529      AND.W #SUB_M, D2
00001CE8  0C42 9000               1530      CMPI.W #SUB_OPCODE, D2
00001CEC  6600 00C0               1531      BNE SUB_END
00001CF0                          1532  
00001CF0                          1533  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001CF0  3401                    1534      MOVE.W D1, D2 
00001CF2  C43C 003F               1535      AND.B #SUB_REG_M, D2 
00001CF6  3F02                    1536      MOVE.W D2, -(SP)
00001CF8  4EB8 11A6               1537      JSR CHECK_SUPPORT_REGISTER
00001CFC  544F                    1538      ADDQ #2, SP 
00001CFE                          1539  * from print_register to see if it is unsupported register 
00001CFE  3439 00009000           1540      MOVE.W (RETURN_ADDRESS), D2 
00001D04  0C42 0002               1541      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001D08                          1542  
00001D08  4EB9 00001FF0           1543      JSR PRINT_SUB
00001D0E  3238 7006               1544      MOVE.W (OPCODE_ADDRESS), D1
00001D12  3401                    1545      MOVE.W D1, D2
00001D14                          1546  * MASKING TO GET SIZE OF SUB
00001D14  C47C 00C0               1547      AND.W #SUB_SIZE_M, D2
00001D18  EC42                    1548      ASR.W #6, D2
00001D1A  1C02                    1549      MOVE.B D2, D6
00001D1C  1F02                    1550      MOVE.B D2, -(SP)
00001D1E  4EB8 1134               1551      JSR PRINT_DATA
00001D22  548F                    1552      ADDQ.L #$02, SP 
00001D24  4EB8 10AE               1553      JSR PRINT_TAB
00001D28                          1554  * MASKING TO GET DIRECTION OF THIS SUB
00001D28  3238 7006               1555      MOVE.W (OPCODE_ADDRESS), D1 
00001D2C  3401                    1556      MOVE.W D1, D2  
00001D2E  C47C 0100               1557      AND.W #SUB_DIREC, D2 
00001D32  0C42 0100               1558      CMPI.W #SUB_DIREC, D2 
00001D36  6600 003C               1559      BNE SUB_TO_D  * DN - <EA> -> DN
00001D3A                          1560  
00001D3A                          1561  SUB_TO_EA:  * <EA> - DN -> <EA>
00001D3A  3238 7006               1562      MOVE.W (OPCODE_ADDRESS), D1 
00001D3E  3401                    1563      MOVE.W D1, D2 
00001D40  C47C 0E00               1564      AND.W #SUB_DREG_M, D2 
00001D44  E08A                    1565      LSR.L #8, D2 
00001D46  E28A                    1566      LSR.L #1, D2 
00001D48  843C 0000               1567      OR.B #%00000000, D2
00001D4C  3F02                    1568      MOVE.W D2, -(SP)
00001D4E  3F3C 0000               1569      MOVE.W #$0, -(SP)
00001D52  4EB8 124C               1570      JSR PRINT_REGISTER 
00001D56  5882                    1571      ADDQ.L #4, D2 
00001D58  4EB8 10CC               1572      JSR PRINT_COMMA 
00001D5C                          1573      
00001D5C  3238 7006               1574      MOVE.W (OPCODE_ADDRESS), D1 
00001D60  3401                    1575      MOVE.W D1, D2 
00001D62  C43C 003F               1576      AND.B #SUB_REG_M, D2 
00001D66  3F02                    1577      MOVE.W D2, -(SP)
00001D68  3F06                    1578      MOVE.W D6, -(SP)
00001D6A  4EB8 124C               1579      JSR PRINT_REGISTER
00001D6E  588F                    1580      ADDQ.L #4, SP 
00001D70  6000 F2D0               1581      BRA FINISH_OPCODE
00001D74                          1582  
00001D74                          1583  SUB_TO_D:   * DN - <EA> -> DN
00001D74  3238 7006               1584      MOVE.W (OPCODE_ADDRESS), D1 
00001D78  3401                    1585      MOVE.W D1, D2 
00001D7A                          1586  * MASKING TO GET THE EFFECTIVE ADDRESS
00001D7A  C43C 003F               1587      AND.B #SUB_REG_M, D2 
00001D7E  3F02                    1588      MOVE.W D2, -(SP)
00001D80  3F06                    1589      MOVE.W D6, -(SP)
00001D82  4EB8 124C               1590      JSR PRINT_REGISTER
00001D86  588F                    1591      ADDQ.L #4, SP 
00001D88  4EB8 10CC               1592      JSR PRINT_COMMA 
00001D8C                          1593  * MASKING TO GET THE DATA REGISTER 
00001D8C  3238 7006               1594      MOVE.W (OPCODE_ADDRESS), D1 
00001D90  3401                    1595      MOVE.W D1, D2 
00001D92  C47C 0E00               1596      AND.W #SUB_DREG_M, D2 
00001D96  E04A                    1597      LSR.W #8, D2 
00001D98  E24A                    1598      LSR.W #1, D2 
00001D9A                          1599  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001D9A  843C 0000               1600      OR.B #%00000000, D2 
00001D9E  3F02                    1601      MOVE.W D2, -(SP)
00001DA0  3F3C 0000               1602      MOVE.W #$0, -(SP)
00001DA4  4EB8 124C               1603      JSR PRINT_REGISTER
00001DA8  588F                    1604      ADDQ.L #4, SP 
00001DAA  6000 F296               1605      BRA FINISH_OPCODE
00001DAE                          1606  SUB_END:
00001DAE  4E75                    1607      RTS
00001DB0                          1608  
00001DB0                          1609  DIVS:
00001DB0                          1610  * CONSTANT FOR DIVS OPCODE
00001DB0  =000081C0               1611  DIVS_OPCODE EQU %1000000111000000
00001DB0  =0000F1C0               1612  DIVS_M      EQU %1111000111000000
00001DB0  =00000E00               1613  DIVS_DREG_M EQU %0000111000000000
00001DB0  =0000003F               1614  DIVS_REG_M  EQU %0000000000111111
00001DB0                          1615  
00001DB0  3401                    1616      MOVE.W D1, D2
00001DB2                          1617  * MASKING WITH DIVS UNIQUE CODE
00001DB2  C47C F1C0               1618      AND.W #DIVS_M, D2
00001DB6  0C42 81C0               1619      CMPI.W #DIVS_OPCODE, D2
00001DBA  6600 006E               1620      BNE DIVS_END
00001DBE                          1621  
00001DBE                          1622  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001DBE  3401                    1623      MOVE.W D1, D2 
00001DC0  C43C 003F               1624      AND.B #DIVS_REG_M, D2 
00001DC4  3F02                    1625      MOVE.W D2, -(SP)
00001DC6  4EB8 11A6               1626      JSR CHECK_SUPPORT_REGISTER
00001DCA  544F                    1627      ADDQ #2, SP 
00001DCC                          1628  * from print_register to see if it is unsupported register 
00001DCC  3439 00009000           1629      MOVE.W (RETURN_ADDRESS), D2 
00001DD2  0C42 0002               1630      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001DD6                          1631  
00001DD6  4EB9 00001FFE           1632      JSR PRINT_DIVS
00001DDC  3238 7006               1633      MOVE.W (OPCODE_ADDRESS), D1
00001DE0                          1634  * GET SIZE OF DIVS
00001DE0  1C3C 0001               1635      MOVE.B #$01, D6
00001DE4  1F06                    1636      MOVE.B D6, -(SP)
00001DE6  4EB8 1134               1637      JSR PRINT_DATA
00001DEA  548F                    1638      ADDQ.L #$02, SP 
00001DEC  4EB8 10AE               1639      JSR PRINT_TAB
00001DF0                          1640  
00001DF0                          1641  * DN - <EA> -> DN
00001DF0  3238 7006               1642      MOVE.W (OPCODE_ADDRESS), D1 
00001DF4  3401                    1643      MOVE.W D1, D2 
00001DF6                          1644  * MASKING TO GET THE EFFECTIVE ADDRESS
00001DF6  C43C 003F               1645      AND.B #DIVS_REG_M, D2 
00001DFA  3F02                    1646      MOVE.W D2, -(SP)
00001DFC  3F06                    1647      MOVE.W D6, -(SP)
00001DFE  4EB8 124C               1648      JSR PRINT_REGISTER
00001E02  588F                    1649      ADDQ.L #4, SP 
00001E04  4EB8 10CC               1650      JSR PRINT_COMMA 
00001E08                          1651  * MASKING TO GET THE DATA REGISTER 
00001E08  3238 7006               1652      MOVE.W (OPCODE_ADDRESS), D1 
00001E0C  3401                    1653      MOVE.W D1, D2 
00001E0E  C47C 0E00               1654      AND.W #DIVS_DREG_M, D2 
00001E12  E04A                    1655      LSR.W #8, D2 
00001E14  E24A                    1656      LSR.W #1, D2 
00001E16                          1657  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001E16  843C 0000               1658      OR.B #%00000000, D2 
00001E1A  3F02                    1659      MOVE.W D2, -(SP)
00001E1C  3F3C 0000               1660      MOVE.W #$0, -(SP)
00001E20  4EB8 124C               1661      JSR PRINT_REGISTER
00001E24  588F                    1662      ADDQ.L #4, SP 
00001E26  6000 F21A               1663      BRA FINISH_OPCODE
00001E2A                          1664  DIVS_END:
00001E2A  4E75                    1665      RTS    
00001E2C                          1666  
00001E2C                          1667  MULS:
00001E2C                          1668  * CONSTANT FOR MULS OPCODE
00001E2C  =0000C1C0               1669  MULS_OPCODE EQU %1100000111000000
00001E2C  =0000F1C0               1670  MULS_M      EQU %1111000111000000
00001E2C  =00000E00               1671  MULS_DREG_M EQU %0000111000000000
00001E2C  =0000003F               1672  MULS_REG_M  EQU %0000000000111111
00001E2C                          1673  
00001E2C  3401                    1674      MOVE.W D1, D2
00001E2E                          1675  * MASKING WITH MULS UNIQUE CODE
00001E2E  C47C F1C0               1676      AND.W #MULS_M, D2
00001E32  0C42 C1C0               1677      CMPI.W #MULS_OPCODE, D2
00001E36  6600 006E               1678      BNE MULS_END
00001E3A                          1679  
00001E3A                          1680  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001E3A  3401                    1681      MOVE.W D1, D2 
00001E3C  C43C 003F               1682      AND.B #MULS_REG_M, D2 
00001E40  3F02                    1683      MOVE.W D2, -(SP)
00001E42  4EB8 11A6               1684      JSR CHECK_SUPPORT_REGISTER
00001E46  544F                    1685      ADDQ #2, SP 
00001E48                          1686  * from print_register to see if it is unsupported register 
00001E48  3439 00009000           1687      MOVE.W (RETURN_ADDRESS), D2 
00001E4E  0C42 0002               1688      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001E52                          1689  
00001E52  4EB9 0000200C           1690      JSR PRINT_MULS
00001E58  3238 7006               1691      MOVE.W (OPCODE_ADDRESS), D1
00001E5C                          1692  * GET SIZE OF MULS
00001E5C  1C3C 0001               1693      MOVE.B #$01, D6
00001E60  1F06                    1694      MOVE.B D6, -(SP)
00001E62  4EB8 1134               1695      JSR PRINT_DATA
00001E66  548F                    1696      ADDQ.L #$02, SP 
00001E68  4EB8 10AE               1697      JSR PRINT_TAB
00001E6C                          1698  
00001E6C                          1699  * DN - <EA> -> DN
00001E6C  3238 7006               1700      MOVE.W (OPCODE_ADDRESS), D1 
00001E70  3401                    1701      MOVE.W D1, D2 
00001E72                          1702  * MASKING TO GET THE EFFECTIVE ADDRESS
00001E72  C43C 003F               1703      AND.B #MULS_REG_M, D2 
00001E76  3F02                    1704      MOVE.W D2, -(SP)
00001E78  3F06                    1705      MOVE.W D6, -(SP)
00001E7A  4EB8 124C               1706      JSR PRINT_REGISTER
00001E7E  588F                    1707      ADDQ.L #4, SP 
00001E80  4EB8 10CC               1708      JSR PRINT_COMMA 
00001E84                          1709  * MASKING TO GET THE DATA REGISTER 
00001E84  3238 7006               1710      MOVE.W (OPCODE_ADDRESS), D1 
00001E88  3401                    1711      MOVE.W D1, D2 
00001E8A  C47C 0E00               1712      AND.W #MULS_DREG_M, D2 
00001E8E  E04A                    1713      LSR.W #8, D2 
00001E90  E24A                    1714      LSR.W #1, D2 
00001E92                          1715  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001E92  843C 0000               1716      OR.B #%00000000, D2 
00001E96  3F02                    1717      MOVE.W D2, -(SP)
00001E98  3F3C 0000               1718      MOVE.W #$0, -(SP)
00001E9C  4EB8 124C               1719      JSR PRINT_REGISTER
00001EA0  588F                    1720      ADDQ.L #4, SP 
00001EA2  6000 F19E               1721      BRA FINISH_OPCODE
00001EA6                          1722  MULS_END:
00001EA6  4E75                    1723      RTS  
00001EA8                          1724  
00001EA8                          1725  CMP:
00001EA8                          1726  * CONSTANT FOR CMP OPCODE
00001EA8  =0000B000               1727  CMP_OPCODE EQU %1011000000000000
00001EA8  =0000F100               1728  CMP_M      EQU %1111000100000000
00001EA8  =00000E00               1729  CMP_DREG_M EQU %0000111000000000
00001EA8  =000000C0               1730  CMP_SIZE_M EQU %0000000011000000
00001EA8  =0000003F               1731  CMP_REG_M  EQU %0000000000111111
00001EA8                          1732  
00001EA8  3401                    1733      MOVE.W D1, D2
00001EAA                          1734  * MASKING WITH CMP UNIQUE CODE
00001EAA  C47C F100               1735      AND.W #CMP_M, D2
00001EAE  0C42 B000               1736      CMPI.W #CMP_OPCODE, D2
00001EB2  6600 0074               1737      BNE CMP_END
00001EB6                          1738  
00001EB6                          1739  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001EB6  3401                    1740      MOVE.W D1, D2 
00001EB8  C43C 003F               1741      AND.B #CMP_REG_M, D2 
00001EBC  3F02                    1742      MOVE.W D2, -(SP)
00001EBE  4EB8 11A6               1743      JSR CHECK_SUPPORT_REGISTER
00001EC2  544F                    1744      ADDQ #2, SP 
00001EC4                          1745  * from print_register to see if it is unsupported register 
00001EC4  3439 00009000           1746      MOVE.W (RETURN_ADDRESS), D2 
00001ECA  0C42 0002               1747      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001ECE                          1748  
00001ECE  4EB9 00002036           1749      JSR PRINT_CMP
00001ED4  3238 7006               1750      MOVE.W (OPCODE_ADDRESS), D1
00001ED8  3401                    1751      MOVE.W D1, D2
00001EDA                          1752  * MASKING TO GET SIZE OF SUB
00001EDA  C47C 00C0               1753      AND.W #SUB_SIZE_M, D2
00001EDE  EC42                    1754      ASR.W #6, D2
00001EE0  1C02                    1755      MOVE.B D2, D6
00001EE2  1F02                    1756      MOVE.B D2, -(SP)
00001EE4  4EB8 1134               1757      JSR PRINT_DATA
00001EE8  548F                    1758      ADDQ.L #$02, SP 
00001EEA  4EB8 10AE               1759      JSR PRINT_TAB
00001EEE                          1760  
00001EEE                          1761  * DN - <EA> -> DN
00001EEE  3238 7006               1762      MOVE.W (OPCODE_ADDRESS), D1 
00001EF2  3401                    1763      MOVE.W D1, D2 
00001EF4                          1764  * MASKING TO GET THE EFFECTIVE ADDRESS
00001EF4  C43C 003F               1765      AND.B #CMP_REG_M, D2 
00001EF8  3F02                    1766      MOVE.W D2, -(SP)
00001EFA  3F06                    1767      MOVE.W D6, -(SP)
00001EFC  4EB8 124C               1768      JSR PRINT_REGISTER
00001F00  588F                    1769      ADDQ.L #4, SP 
00001F02  4EB8 10CC               1770      JSR PRINT_COMMA 
00001F06                          1771  * MASKING TO GET THE DATA REGISTER 
00001F06  3238 7006               1772      MOVE.W (OPCODE_ADDRESS), D1 
00001F0A  3401                    1773      MOVE.W D1, D2 
00001F0C  C47C 0E00               1774      AND.W #CMP_DREG_M, D2 
00001F10  E04A                    1775      LSR.W #8, D2 
00001F12  E24A                    1776      LSR.W #1, D2 
00001F14                          1777  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001F14  843C 0000               1778      OR.B #%00000000, D2 
00001F18  3F02                    1779      MOVE.W D2, -(SP)
00001F1A  3F3C 0000               1780      MOVE.W #$0, -(SP)
00001F1E  4EB8 124C               1781      JSR PRINT_REGISTER
00001F22  588F                    1782      ADDQ.L #4, SP 
00001F24  6000 F11C               1783      BRA FINISH_OPCODE
00001F28                          1784  CMP_END:
00001F28  4E75                    1785      RTS  
00001F2A                          1786  
00001F2A                          1787  * ROR:
00001F2A                          1788  * * CONSTANT FOR ROR OPCODE
00001F2A                          1789  * ROR_OPCODE EQU %
00001F2A                          1790  * ROR_M      EQU %
00001F2A                          1791  * ROR_SIZE_M EQU %
00001F2A                          1792  *     CLR.W D2
00001F2A                          1793  *     MOVE.W D1, D2
00001F2A                          1794  * * MASKING WITH ROR UNIQUE CODE
00001F2A                          1795  *     AND.W #ROR_M, D2
00001F2A                          1796  *     CMP.W #ROR_OPCODE, D2
00001F2A                          1797  *     BNE ROR_END
00001F2A                          1798  *     JSR PRINT_ROR
00001F2A                          1799  *     MOVE.W D1, D2
00001F2A                          1800  *     MOVE.W D1, D3
00001F2A                          1801  * * MASKING TO GET SIZE OF ROR
00001F2A                          1802  *     CMP.W #ROR_SIZE_M, D2 
00001F2A                          1803  * ROR_END:
00001F2A                          1804  *     RTS
00001F2A                          1805  
00001F2A                          1806  * ROL:
00001F2A                          1807  * * CONSTANT FROR ROL OPCODE
00001F2A                          1808  * ROL_OPCODE EQU %
00001F2A                          1809  * ROL_M      EQU %
00001F2A                          1810  * ROL_SIZE_M EQU %
00001F2A                          1811  *     CLR.W D2
00001F2A                          1812  *     MOVE.W D1, D2
00001F2A                          1813  * * MASKING WITH ROL UNIQUE CODE
00001F2A                          1814  *     AND.W #ROL_M, D2
00001F2A                          1815  *     CMP.W #ROL_OPCODE, D2
00001F2A                          1816  *     BNE ROL_END
00001F2A                          1817  *     JSR PRINT_ROL
00001F2A                          1818  *     MOVE.W D1, D2
00001F2A                          1819  *     MOVE.W D1, D3
00001F2A                          1820  * * MASKING TO GET SIZE OF ROL
00001F2A                          1821  *     CMP.W #ROL_SIZE_M, D2 
00001F2A                          1822  * ROL_END:
00001F2A                          1823  *     RTS
00001F2A                          1824  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001F2A                          1825  
00001F2A                          1826  
00001F2A                          1827  PRINT_RTS:
00001F2A  43F9 00002052           1828      LEA P_RTS, A1
00001F30  103C 000E               1829      MOVE.B #14, D0
00001F34  4E4F                    1830      TRAP #15
00001F36  4EB8 10AE               1831      JSR PRINT_TAB
00001F3A  6000 F106               1832      BRA FINISH_OPCODE
00001F3E                          1833  PRINT_NOP:
00001F3E  43F9 00002056           1834      LEA P_NOP, A1
00001F44  103C 000E               1835      MOVE.B #14, D0
00001F48  4E4F                    1836      TRAP #15
00001F4A  6000 F0F6               1837      BRA FINISH_OPCODE
00001F4E                          1838  PRINT_NEG:
00001F4E  43F9 00002092           1839      LEA P_NEG, A1
00001F54  103C 000E               1840      MOVE.B #14, D0
00001F58  4E4F                    1841      TRAP #15
00001F5A  4E75                    1842      RTS 
00001F5C                          1843  PRINT_BRA:
00001F5C  43F9 000020D0           1844      LEA P_BRA, A1
00001F62  103C 000E               1845      MOVE.B #14, D0
00001F66  4E4F                    1846      TRAP #15
00001F68  4E75                    1847      RTS 
00001F6A                          1848  PRINT_OR:
00001F6A  43F9 0000208B           1849      LEA P_OR, A1
00001F70  103C 000E               1850      MOVE.B #14, D0
00001F74  4E4F                    1851      TRAP #15
00001F76  4E75                    1852      RTS 
00001F78                          1853  PRINT_ORI:
00001F78  43F9 0000208E           1854      LEA P_ORI, A1
00001F7E  103C 000E               1855      MOVE.B #14, D0
00001F82  4E4F                    1856      TRAP #15
00001F84  4E75                    1857      RTS
00001F86                          1858  PRINT_EOR:
00001F86  43F9 00002096           1859      LEA P_EOR, A1
00001F8C  103C 000E               1860      MOVE.B #14, D0
00001F90  4E4F                    1861      TRAP #15
00001F92  4E75                    1862      RTS 
00001F94                          1863  PRINT_ROL:
00001F94  43F9 000020AA           1864      LEA P_ROL, A1
00001F9A  103C 000E               1865      MOVE.B #14, D0
00001F9E  4E4F                    1866      TRAP #15
00001FA0  4E75                    1867      RTS 
00001FA2                          1868  PRINT_ROR:
00001FA2  43F9 000020AE           1869      LEA P_ROR, A1
00001FA8  103C 000E               1870      MOVE.B #14, D0
00001FAC  4E4F                    1871      TRAP #15
00001FAE  4E75                    1872      RTS 
00001FB0                          1873  PRINT_JSR:
00001FB0  43F9 000020D4           1874      LEA P_JSR, A1
00001FB6  103C 000E               1875      MOVE.B #14, D0
00001FBA  4E4F                    1876      TRAP #15
00001FBC  4EB8 10AE               1877      JSR PRINT_TAB
00001FC0  4E75                    1878      RTS 
00001FC2                          1879  PRINT_LEA:
00001FC2  43F9 00002087           1880      LEA P_LEA, A1
00001FC8  103C 000E               1881      MOVE.B #14, D0
00001FCC  4E4F                    1882      TRAP #15
00001FCE  4EB8 10AE               1883      JSR PRINT_TAB
00001FD2  4E75                    1884      RTS 
00001FD4                          1885  PRINT_ADDA: 
00001FD4  43F9 0000206F           1886      LEA P_ADDA, A1 
00001FDA  103C 000E               1887      MOVE.B #14, D0
00001FDE  4E4F                    1888      TRAP #15 
00001FE0  4E75                    1889      RTS
00001FE2                          1890  PRINT_ADD:
00001FE2  43F9 0000206B           1891      LEA P_ADD, A1 
00001FE8  103C 000E               1892      MOVE.B #14, D0 
00001FEC  4E4F                    1893      TRAP #15
00001FEE  4E75                    1894      RTS
00001FF0                          1895  PRINT_SUB:
00001FF0  43F9 00002074           1896      LEA P_SUB, A1 
00001FF6  103C 000E               1897      MOVE.B #14, D0 
00001FFA  4E4F                    1898      TRAP #15
00001FFC  4E75                    1899      RTS
00001FFE                          1900  PRINT_DIVS:
00001FFE  43F9 00002082           1901      LEA P_DIVS, A1 
00002004  103C 000E               1902      MOVE.B #14, D0 
00002008  4E4F                    1903      TRAP #15
0000200A  4E75                    1904      RTS
0000200C                          1905  PRINT_MULS:
0000200C  43F9 0000207D           1906      LEA P_MULS, A1 
00002012  103C 000E               1907      MOVE.B #14, D0 
00002016  4E4F                    1908      TRAP #15
00002018  4E75                    1909      RTS
0000201A                          1910  PRINT_MOVEA: 
0000201A  43F9 0000205F           1911      LEA P_MOVEA, A1 
00002020  103C 000E               1912      MOVE.B #14, D0 
00002024  4E4F                    1913      TRAP #15 
00002026  4E75                    1914      RTS 
00002028                          1915  PRINT_MOVE: 
00002028  43F9 0000205A           1916      LEA P_MOVE, A1 
0000202E  103C 000E               1917      MOVE.B #14, D0 
00002032  4E4F                    1918      TRAP #15 
00002034  4E75                    1919      RTS 
00002036                          1920  PRINT_CMP: 
00002036  43F9 000020B7           1921      LEA P_CMP, A1 
0000203C  103C 000E               1922      MOVE.B #14, D0 
00002040  4E4F                    1923      TRAP #15 
00002042  4E75                    1924      RTS 
00002044                          1925  PRINT_UNSUPPORTED: 
00002044  43F9 000020D8           1926      LEA P_DATA, A1 
0000204A  103C 000E               1927      MOVE.B #14, D0 
0000204E  4E4F                    1928      TRAP #15 
00002050  4E75                    1929      RTS 
00002052                          1930  
00002052                          1931  
00002052= 52 54 53 00             1932  P_RTS   DC.B 'RTS',0          *-----------------DONE-----------------*
00002056= 4E 4F 50 00             1933  P_NOP   DC.B 'NOP',0          *-----------------DONE-----------------*
0000205A= 4D 4F 56 45 00          1934  P_MOVE  DC.B 'MOVE',0         *-----------------DONE-----------------*
0000205F= 4D 4F 56 45 41 00       1935  P_MOVEA DC.B 'MOVEA', 0       *-----------------DONE-----------------*
00002065= 4D 4F 56 45 4D 00       1936  P_MOVEM DC.B 'MOVEM', 0
0000206B= 41 44 44 00             1937  P_ADD   DC.B 'ADD', 0         *-----------------DONE-----------------*
0000206F= 41 44 44 41 00          1938  P_ADDA  DC.B 'ADDA',0         *-----------------DONE-----------------*
00002074= 53 55 42 00             1939  P_SUB   DC.B 'SUB', 0         *-----------------DONE-----------------*
00002078= 53 55 42 51 00          1940  P_SUBQ  DC.B 'SUBQ',0
0000207D= 4D 55 4C 53 00          1941  P_MULS  DC.B 'MULS',0         *-----------------DONE-----------------*
00002082= 44 49 56 53 00          1942  P_DIVS  DC.B 'DIVS',0         *-----------------DONE-----------------*
00002087= 4C 45 41 00             1943  P_LEA   DC.B 'LEA',0          *-----------------DONE-----------------*
0000208B= 4F 52 00                1944  P_OR    DC.B 'OR',0           *-----------------DONE-----------------*
0000208E= 4F 52 49 00             1945  P_ORI   DC.B 'ORI', 0         *--------------IN PROGRESS-------------*
00002092= 4E 45 47 00             1946  P_NEG   DC.B 'NEG', 0         *-----------------DONE-----------------*
00002096= 45 4F 52 00             1947  P_EOR   DC.B 'EOR', 0         *-----------------DONE-----------------*
0000209A= 4C 53 52 00             1948  P_LSR   DC.B 'LSR',0
0000209E= 4C 53 4C 00             1949  P_LSL   DC.B 'LSL', 0
000020A2= 41 53 52 00             1950  P_ASR   DC.B 'ASR', 0
000020A6= 41 53 4C 00             1951  P_ASL   DC.B 'ASL',0 
000020AA= 52 4F 4C 00             1952  P_ROL   DC.B 'ROL', 0
000020AE= 52 4F 52 00             1953  P_ROR   DC.B 'ROR', 0
000020B2= 42 43 4C 52 00          1954  P_BCLR  DC.B 'BCLR',0
000020B7= 43 4D 50 00             1955  P_CMP   DC.B 'CMP', 0         *-----------------DONE-----------------*
000020BB= 43 4D 50 49 00          1956  P_CMPI  DC.B 'CMPI', 0
000020C0= 42 43 53 00             1957  P_BCS   DC.B 'BCS', 0
000020C4= 42 47 45 00             1958  P_BGE   DC.B 'BGE', 0
000020C8= 42 4C 54 00             1959  P_BLT   DC.B 'BLT',0
000020CC= 42 56 43 00             1960  P_BVC   DC.B 'BVC', 0
000020D0= 42 52 41 00             1961  P_BRA   DC.B 'BRA',0          *--------------IN PROGRESS-------------*
000020D4= 4A 53 52 00             1962  P_JSR   DC.B 'JSR',0          *-----------------DONE-----------------*
000020D8= 44 41 54 41 00          1963  P_DATA  DC.B 'DATA',0         *-----------------DONE-----------------*
000020DD                          1964  
000020DD                          1965  
000020DD  =00000004               1966  WORD_LENGTH EQU $04
000020DD  =00000008               1967  LONG_LENGTH EQU $08
000020DD  =0000000A               1968  LF          EQU $0A
000020DD  =0000000D               1969  CR          EQU $0D
000020DD  =00000009               1970  HT          EQU  $09 
000020DD                          1971  
000020DD= 31 30 30 32 30 30 ...   1972  TEST_VAL                DC.B '10020009'
000020E5= 20 0D 0A 00             1973  NEW_LINE                DC.B ' ',CR,LF,0
000020E9= 50 6C 65 61 73 65 ...   1974  PROMT_INPUT_START       DC.B 'Please enter starting address(capitalized):  $',0 
00002118= 50 6C 65 61 73 65 ...   1975  PROMT_INPUT_END         DC.B 'Please enter ending address(cappitalized): $',0
00002145= 50 72 65 73 73 20 ...   1976  PROMT_INPUT_CONTINUE    DC.B 'Press enter to continue',CR,LF,0
0000215F                          1977  
00002160  FFFF FFFF               1978      SIMHALT             
00002164                          1979      
00002164                          1980      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 184E
ADDA                17CA
ADDA_AN_MASKING     E00
ADDA_END            184C
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             191E
ADD_FROM_D          18AA
ADD_TO_D            18E4
ASCII_TO_HEX        15CA
ASCII_TO_HEX_CHECK_GT_0  15F6
ASCII_TO_HEX_CHECK_GT_A  160A
ASCII_TO_HEX_CHECK_LT_9  15FE
ASCII_TO_HEX_CHECK_LT_F  1616
ASCII_TO_HEX_CONVERT_LETTER  163C
ASCII_TO_HEX_CONVERT_NUMBER  1622
ASCII_TO_HEX_END_LOOP  1656
ASCII_TO_HEX_FAILED_0  165C
ASCII_TO_HEX_FAILED_2  1662
ASCII_TO_HEX_LOOP   15EA
ASCII_TO_HEX_RETURN_OK  1
BRA                 1AFE
BRA_DISP_M          FF
BRA_END             1B3A
BRA_M               FF00
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11A6
CHECK_VALUE_IS_ODD  159C
CHECK_VALUE_IS_ODD_FAILED  15C4
CLR_SCREEN          106A
CMP                 1EA8
CMP_DREG_M          E00
CMP_END             1F28
CMP_M               F100
CMP_OPCODE          B000
CMP_REG_M           3F
CMP_SIZE_M          C0
CONTINUE_PRINT_REGISTER  1294
CONTINUE_PRINT_RE_NUMBER  12B0
CONVERT_OPMODE_SIZE_B  1980
CONVERT_OPMODE_SIZE_W  1986
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DIVS                1DB0
DIVS_DREG_M         E00
DIVS_END            1E2A
DIVS_M              F1C0
DIVS_OPCODE         81C0
DIVS_REG_M          3F
DONE_PRINT_NUMBER   12CE
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C2
END_FETCH_OPCODES   1686
END_GET_INPUT       10AC
END_HEX_TO_ASCII    158E
END_JUMP_TABLE      16F8
END_MAIN            1088
END_PRINT_COMMA     10DC
END_PRINT_DATA      1156
END_PRINT_DOLLAR_SIGN  10F4
END_PRINT_HASH_SIGN  110C
END_PRINT_HEX       1536
END_PRINT_NEW_LINE  1126
END_PRINT_REGISTER  12F8
END_PRINT_TAB       10C4
EOR                 1C60
EOR_DIREC           100
EOR_DREG_M          E00
EOR_END             1CE0
EOR_M               F100
EOR_OPCODE          B100
EOR_REG_M           3F
EOR_SIZE_M          C0
FETCH_OPCODES       1674
FINISH_OPCODE       1042
GET_ASCII_FROM_HEX  1524
GET_INPUT           1094
HEX2ASCII_DONE_CONVERT  1550
HEX_MASKING         F
HEX_TO_ASCII        1538
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  1584
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   1558
HEX_TO_ASCII_NUMBER  157A
HEX_TO_ASCII_ROR    1598
HEX_TO_ASCII_SWAP   1594
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  1668
JSR                 1710
JSR_END             175A
JSR_OPCODE          4E80
JUMP_TABLE          1688
LEA                 175C
LEA_END             17C8
LF                  A
LONG_LENGTH         8
LOOP_START          100E
MAIN                1088
MOVE                19D6
MOVEA               1920
MOVEA_DONE_CONVERT  198C
MOVEA_END           19D4
MOVEA_REGISTER_OK   1940
MOVEM               1A9A
MOVE_DONE_CONVERT   1A70
MOVE_END            19F4
MOVE_MATCH_PATTERN  19F6
MOVE_OPMODE_BYTE    1A64
MOVE_OPMODE_WORD    1A6A
MULS                1E2C
MULS_DREG_M         E00
MULS_END            1EA6
MULS_M              F1C0
MULS_OPCODE         C1C0
MULS_REG_M          3F
NEG                 1A9A
NEG_END             1AFC
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            20E5
NOP                 16FC
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B3C
ORI                 1C0A
ORI_END             1C5E
ORI_M               FF00
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1C08
OR_M                F000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BCE
OR_TO_EA            1B94
OUTPUT_ADDRESS      7010
PRINT_A             1506
PRINT_AB_LONG       1422
PRINT_AB_SHORT      13C0
PRINT_ADD           1FE2
PRINT_ADDA          1FD4
PRINT_BRA           1F5C
PRINT_BYTE          115E
PRINT_CLOSE         14B8
PRINT_CLOSE_PLUS    14D2
PRINT_CMP           2036
PRINT_COMMA         10CC
PRINT_D             14EC
PRINT_DATA          1134
PRINT_DIVS          1FFE
PRINT_DOLLAR_SIGN   10E4
PRINT_EOR           1F86
PRINT_HASH_SIGN     10FC
PRINT_HEX           1520
PRINT_IMMEDIATE     12FA
PRINT_IMMEDIATE_BYTE  1336
PRINT_IMMEDIATE_LONG  138C
PRINT_IMMEDIATE_WORD  1360
PRINT_JSR           1FB0
PRINT_LEA           1FC2
PRINT_LONG          1176
PRINT_MINUS_OPEN    149E
PRINT_MOVE          2028
PRINT_MOVEA         201A
PRINT_MULS          200C
PRINT_NEG           1F4E
PRINT_NEW_LINE      1114
PRINT_NOP           1F3E
PRINT_OPEN          1484
PRINT_OR            1F6A
PRINT_ORI           1F78
PRINT_PC            1182
PRINT_REGISTER      124C
PRINT_ROL           1F94
PRINT_ROR           1FA2
PRINT_RTS           1F2A
PRINT_SUB           1FF0
PRINT_TAB           10AE
PRINT_UNSUPPORTED   2044
PRINT_WORD          116A
PROMT_INPUT_CONTINUE  2145
PROMT_INPUT_END     2118
PROMT_INPUT_START   20E9
P_ADD               206B
P_ADDA              206F
P_ASL               20A6
P_ASR               20A2
P_BCLR              20B2
P_BCS               20C0
P_BGE               20C4
P_BLT               20C8
P_BRA               20D0
P_BVC               20CC
P_CMP               20B7
P_CMPI              20BB
P_DATA              20D8
P_DIVS              2082
P_EOR               2096
P_JSR               20D4
P_LEA               2087
P_LSL               209E
P_LSR               209A
P_MOVE              205A
P_MOVEA             205F
P_MOVEM             2065
P_MULS              207D
P_NEG               2092
P_NOP               2056
P_OR                208B
P_ORI               208E
P_ROL               20AA
P_ROR               20AE
P_RTS               2052
P_SUB               2074
P_SUBQ              2078
RETURN_ADDRESS      9000
RTS                 1706
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
SUB                 1CE2
SUB_DIREC           100
SUB_DREG_M          E00
SUB_END             1DAE
SUB_M               F000
SUB_OPCODE          9000
SUB_REG_M           3F
SUB_SIZE_M          C0
SUB_TO_D            1D74
SUB_TO_EA           1D3A
TEST_VAL            20DD
UNSUPPORT_OPCODE    11E0
UNSUPPORT_REGISTER  1214
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
