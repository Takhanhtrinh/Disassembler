00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/26/2018 12:07:03 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : HEX DUMP Disassembler
00000000                             3  * Written by : Trinh Ta and Leo Le
00000000                             4  * Date       : 11/20/2018
00000000                             5  * Description: This is the final project of CSS 422
00000000                             6  *              This disassembler will take in the starting address
00000000                             7  *              and ending address of the user, then will start 
00000000                             8  *              disassemble the data within that specific section
00000000                             9  *              into assembly code and output back to the user.
00000000                            10  *              Each page will have a limit of offset in the 
00000000                            11  *              memory, so to move forward, press ENTER to get
00000000                            12  *              the next data page.
00000000                            13  *              The program will go on until it reaches the end
00000000                            14  *              of the ending address provided.
00000000                            15  *-----------------------------------------------------------
00001000                            16      ORG    $1000
00001000                            17  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                 18  OUTPUT_ADDRESS EQU $7010
00001000                            19  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 20  RETURN_ADDRESS EQU $9000
00001000                            21  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 22  START_ADDRESS EQU $09100
00001000                            23  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 24  END_ADDRESS EQU $7004
00001000                            25  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 26  OPCODE_ADDRESS EQU $7006
00001000                            27  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            28  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            29  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            30  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 31  OFFSET_OPC_ADDRES EQU $7008 
00001000                            32  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 33  SIZE_OPCODE EQU $700A
00001000                            34  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 35  STORE_REGISTER_ADDRESS EQU $700C
00001000                            36  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 37  STACK_ADDRESS EQU $8000
00001000                            38  START:                  ; first instruction of program
00001000                            39      * MOVE.L #$10AF241B, -(SP)
00001000                            40      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            41      * JSR PRINT_HEX
00001000                            42      * ADDQ.L #$08, SP
00001000                            43  
00001000                            44      * JSR PRINT_NEW_LINE
00001000                            45  
00001000                            46      * JSR PRINT_TAB
00001000                            47      * A0
00001000                            48  *     MOVE.L #%0000011100000100, D1
00001000                            49  *     MOVE.L D1, -(SP)
00001000                            50  *     JSR PRINT_REGISTER
00001000                            51  *     ADDQ.L #4, SP
00001000                            52  *     * A1
00001000                            53  *     MOVE.W #%0100, D1
00001000                            54  *     SWAP D1
00001000                            55  *     MOVE.W #$1, D1
00001000                            56  *     MOVE.L D1, -(SP)
00001000                            57  *     JSR PRINT_REGISTER
00001000                            58  *     ADDQ.L #4, SP
00001000                            59  * * A2
00001000                            60  *     MOVE.W #%0011, D1
00001000                            61  *     SWAP D1
00001000                            62  *     MOVE.W #$2, D1
00001000                            63  *     MOVE.L D1, -(SP)
00001000                            64  *     JSR PRINT_REGISTER
00001000                            65  *     ADDQ.L #4, SP
00001000                            66  * * A3
00001000                            67  *     MOVE.W #%0011, D1
00001000                            68  *     SWAP D1
00001000                            69  *     MOVE.W #$3, D1
00001000                            70  *     MOVE.L D1, -(SP)
00001000                            71  *     JSR PRINT_REGISTER
00001000                            72  *     ADDQ.L #4, SP
00001000                            73  * * A4
00001000                            74  *     MOVE.W #%0011, D1
00001000                            75  *     SWAP D1
00001000                            76  *     MOVE.W #$4, D1
00001000                            77  *     MOVE.L D1, -(SP)
00001000                            78  *     JSR PRINT_REGISTER
00001000                            79  *     ADDQ.L #4, SP
00001000                            80  * * A5
00001000                            81  *     MOVE.W #%0011, D1
00001000                            82  *     SWAP D1
00001000                            83  *     MOVE.W #$5, D1
00001000                            84  *     MOVE.L D1, -(SP)
00001000                            85  *     JSR PRINT_REGISTER
00001000                            86  *     ADDQ.L #4, SP
00001000                            87  * * A6
00001000                            88  *     MOVE.W #%0011, D1
00001000                            89  *     SWAP D1
00001000                            90  *     MOVE.W #$6, D1
00001000                            91  *     MOVE.L D1, -(SP)
00001000                            92  *     JSR PRINT_REGISTER
00001000                            93  *     ADDQ.L #4, SP
00001000                            94  * * A7
00001000                            95  *     MOVE.W #%0011, D1
00001000                            96  *     SWAP D1
00001000                            97  *     MOVE.W #$7, D1
00001000                            98  *     MOVE.L D1, -(SP)
00001000                            99  *     JSR PRINT_REGISTER
00001000                           100  *     ADDQ.L #4, SP
00001000                           101  
00001000                           102      * JSR PRINT_COMMA
00001000                           103      * JSR PRINT_DOLLAR_SIGN
00001000                           104      * JSR PRINT_HASH_SIGN
00001000                           105      * MOVE.B #$01, -(SP)
00001000                           106      * JSR PRINT_DATA
00001000                           107      * ADDQ.L #$2,SP
00001000                           108      * MOVE.B #$02, -(SP)
00001000                           109      * JSR PRINT_DATA
00001000                           110      * ADDQ.L #$2, SP
00001000                           111      * MOVE.B #$03, -(SP)
00001000                           112      * JSR PRINT_DATA
00001000                           113      * ADDQ.L #$2,SP
00001000                           114   
00001000  4207                     115      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            116      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            117      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            118      MOVE.L #$010000, (A0)
00001014                           119  LOOP_START:
00001014  2E7C 00008000            120      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            121      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            122      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000167A            123      JSR FETCH_OPCODES
0000102C  508F                     124      ADDQ.L #8, SP
0000102E  4EB9 000010B4            125      JSR PRINT_TAB
00001034  4EB9 00001188            126      JSR PRINT_PC
0000103A  207C 00007006            127      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     128      MOVE.W (A0), -(SP)
00001042  4EB9 0000168E            129      JSR JUMP_TABLE
00001048                           130  FINISH_OPCODE:
00001048  4280                     131      CLR.L D0
0000104A  23FC 00000000 00009000   132      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                133      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            134      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            135      JSR PRINT_NEW_LINE
00001064  5207                     136      ADDQ.B #1, D7 
00001066  0C07 001D                137      CMPI.B #29, D7 
0000106A  6700 0004                138      BEQ CLR_SCREEN
0000106E  60A4                     139      BRA LOOP_START
00001070                           140  
00001070                           141  CLR_SCREEN:
00001070  43F9 0000214B            142      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                143      MOVE.B #13, D0 
0000107A  4E4F                     144      TRAP #15 
0000107C  4207                     145      CLR.B D7
0000107E  103C 0005                146      MOVE.B #5, D0 
00001082  4E4F                     147      TRAP #15 
00001084  0C01 000D                148      CMPI.B #$0D, D1 
00001088  678A                     149      BEQ LOOP_START
0000108A  6000 0002                150      BRA END_MAIN
0000108E                           151  
0000108E                           152  * Put program code here
0000108E                           153  MAIN:
0000108E                           154  
0000108E                           155  END_MAIN:
0000108E  103C 0009                156      MOVE.B #9, D0
00001092  4E4F                     157      TRAP #15
00001094  103C 000E                158      MOVE.B #14,D0
00001098  4E4F                     159      TRAP #15
0000109A                           160  * get user input 
0000109A                           161  GET_INPUT:
0000109A  43F9 000020EF            162      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                163      MOVE.B #13, D0
000010A4  4E4F                     164      TRAP #15
000010A6  227C 00002000            165      MOVEA.L #$2000,A1
000010AC  103C 0002                166      MOVE.B #2, D0
000010B0  4E4F                     167      TRAP #15
000010B2                           168  END_GET_INPUT:
000010B2  4E75                     169      RTS   
000010B4                           170  
000010B4                           171  *--------------------------------------------------------------------
000010B4                           172  * PRINT_TAB 
000010B4                           173  PRINT_TAB: 
000010B4  227C 00007010            174      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            175      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                176      MOVE.B #0, (A1)+
000010C4  227C 00007010            177      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           178  END_PRINT_TAB:
000010CA  103C 000E                179      MOVE.B #14, D0
000010CE  4E4F                     180      TRAP #15
000010D0  4E75                     181      RTS
000010D2                           182  *--------------------------------------------------------------------
000010D2                           183  * PRINT_COMMA
000010D2                           184  PRINT_COMMA:
000010D2  227C 00007010            185      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                186      MOVE.W #', ', (A1)+
000010DC  12BC 0000                187      MOVE.B #0, (A1)
000010E0  5589                     188      SUBQ.L #2, A1
000010E2                           189  END_PRINT_COMMA:
000010E2  103C 000E                190      MOVE.B #14, D0
000010E6  4E4F                     191      TRAP #15
000010E8  4E75                     192      RTS
000010EA                           193  *--------------------------------------------------------------------
000010EA                           194  * PRINT_DOLLAR_SIGN
000010EA                           195  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            196      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                197      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           198      MOVE.B #0, 1(A1) 
000010FA                           199  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                200      MOVE.B #14, D0
000010FE  4E4F                     201      TRAP #15
00001100  4E75                     202      RTS
00001102                           203  *--------------------------------------------------------------------
00001102                           204  * PRINT_HASH_SIGN
00001102                           205  PRINT_HASH_SIGN:
00001102  227C 00007010            206      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                207      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           208      MOVE.B #0, 1(A1) 
00001112                           209  END_PRINT_HASH_SIGN:
00001112  103C 000E                210      MOVE.B #14, D0
00001116  4E4F                     211      TRAP #15
00001118  4E75                     212      RTS
0000111A                           213  
0000111A                           214  *--------------------------------------------------------------------
0000111A                           215  * PRINT A NEW LINE 
0000111A                           216  PRINT_NEW_LINE: 
0000111A  227C 00007010            217      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                218      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                219      MOVE.B #LF, (A1)+
00001128  12FC 0000                220      MOVE.B #0, (A1)+
0000112C                           221  END_PRINT_NEW_LINE:
0000112C  227C 00007010            222      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                223      MOVE.B #14, D0
00001136  4E4F                     224      TRAP #15 
00001138  4E75                     225      RTS
0000113A                           226  
0000113A                           227  
0000113A                           228  
0000113A                           229  
0000113A                           230  *--------------------------------------------------------------------
0000113A                           231  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           232  * PARAMETERS: 
0000113A                           233   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           234  *       00 - byte
0000113A                           235  *       01 - word
0000113A                           236  *       10 - long
0000113A                           237  * NOTE:
0000113A                           238  *   A1 USE FOR PRINT
0000113A                           239  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           240  PRINT_DATA:
0000113A  227C 00007010            241      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                242      MOVE.B 4(SP), D1
00001144  0C01 0000                243      CMPI.B #$00, D1
00001148  6700 001A                244      BEQ PRINT_BYTE
0000114C  0C01 0001                245      CMPI.B #$01, D1
00001150  6700 001E                246      BEQ PRINT_WORD
00001154  0C01 0002                247      CMPI.B #$02, D1 
00001158  6700 0022                248      BEQ PRINT_LONG
0000115C                           249  END_PRINT_DATA:
0000115C  103C 000E                250      MOVE.B #14, D0
00001160  4E4F                     251      TRAP #15
00001162  4E75                     252      RTS 
00001164                           253  
00001164                           254  PRINT_BYTE: 
00001164  32BC 2E42                255      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           256      MOVE.B #0, 2(A1)
0000116E  60EC                     257      BRA END_PRINT_DATA
00001170                           258  PRINT_WORD: 
00001170  32BC 2E57                259      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           260      MOVE.B #0, 2(A1)
0000117A  60E0                     261      BRA END_PRINT_DATA
0000117C                           262  PRINT_LONG: 
0000117C  32BC 2E4C                263      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           264      MOVE.B #0, 2(A1)
00001186  60D4                     265      BRA END_PRINT_DATA
00001188                           266  *--------------------------------------------------------------------
00001188                           267  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           268  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           269  * PARAMETERS:
00001188                           270  *   NONE
00001188                           271  * NOTES: 
00001188                           272  * A1 USE TO PRINT 
00001188                           273  * D0 FOR TRAP AND CONVERSION 
00001188                           274  PRINT_PC:
00001188  2039 00009100            275      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     276      MOVE.L D0, -(SP)
00001190  2F3C 00000008            277      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 00001526            278      JSR PRINT_HEX 
0000119C  508F                     279      ADDQ.L #8, SP 
0000119E  4EB8 10B4                280      JSR PRINT_TAB
000011A2  4EB8 10B4                281      JSR PRINT_TAB 
000011A6  4EB8 10B4                282      JSR PRINT_TAB
000011AA  4E75                     283      RTS 
000011AC                           284  
000011AC                           285  CHECK_SUPPORT_REGISTER:
000011AC  33FC 0000 00009000       286      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011B4  322F 0004                287      MOVE.W 4(SP), D1 
000011B8  3801                     288      MOVE.W D1,D4 
000011BA                           289     ; check to make sure we dont support the register 
000011BA  =00000028                290  DISPLACEMENT_REGISTER EQU %00101000
000011BA  =00000030                291  ADDRESS_WITH_INDEX EQU %00110000
000011BA  =0000003B                292  COUNTER_INDEX EQU %00111011 
000011BA  =0000003A                293  COUNTER_DISPLACEMENT EQU %00111010
000011BA  C83C 0038                294      AND.B #%00111000, D4 
000011BE  0C04 0028                295      CMPI.B #DISPLACEMENT_REGISTER, D4
000011C2  6700 0056                296      BEQ UNSUPPORT_REGISTER
000011C6  0C04 0030                297      CMPI.B #ADDRESS_WITH_INDEX, D4
000011CA  6700 004E                298      BEQ UNSUPPORT_REGISTER 
000011CE  3801                     299      MOVE D1, D4
000011D0  C83C 003F                300      AND.B #%00111111,D4
000011D4  0C04 003B                301      CMPI.B #COUNTER_INDEX, D4
000011D8  6700 0040                302      BEQ UNSUPPORT_REGISTER 
000011DC  0C04 003A                303      CMPI.B #COUNTER_DISPLACEMENT, D4
000011E0  6700 0038                304      BEQ UNSUPPORT_REGISTER
000011E4  4E75                     305      RTS
000011E6                           306  
000011E6                           307  UNSUPPORT_OPCODE: 
000011E6  267C 00009000            308      MOVE.L #RETURN_ADDRESS, A3
000011EC  4EB9 0000204A            309      JSR PRINT_UNSUPPORTED
000011F2  4EB8 10B4                310      JSR PRINT_TAB 
000011F6  4EB8 1102                311      JSR PRINT_HASH_SIGN 
000011FA  4EB8 10EA                312      JSR PRINT_DOLLAR_SIGN 
000011FE  4281                     313      CLR.L D1 
00001200  3238 7006                314      MOVE.W (OPCODE_ADDRESS), D1 
00001204  2F01                     315      MOVE.L D1, -(SP) 
00001206  2F3C 00000004            316      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000120C  4EB9 00001526            317      JSR PRINT_HEX 
00001212  508F                     318      ADDQ.L #8, SP 
00001214  36BC 0002                319      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001218  4E75                     320      RTS 
0000121A                           321  UNSUPPORT_REGISTER:
0000121A  =00000002                322  C_UNSUPPORT_REGISTER EQU $2
0000121A  267C 00009000            323      MOVE.L #RETURN_ADDRESS, A3
00001220  4EB9 0000204A            324      JSR PRINT_UNSUPPORTED
00001226  4EB8 10B4                325      JSR PRINT_TAB 
0000122A  4EB8 1102                326      JSR PRINT_HASH_SIGN 
0000122E  4EB8 10EA                327      JSR PRINT_DOLLAR_SIGN 
00001232  4281                     328      CLR.L D1 
00001234  3238 7006                329      MOVE.W (OPCODE_ADDRESS), D1 
00001238  2F01                     330      MOVE.L D1, -(SP) 
0000123A  2F3C 00000004            331      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001240  4EB9 00001526            332      JSR PRINT_HEX 
00001246  508F                     333      ADDQ.L #8, SP 
00001248  36BC 0002                334      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000124C  5478 7008                335      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001250  4E75                     336      RTS 
00001252                           337  
00001252                           338  
00001252                           339  *--------------------------------------------------------------------
00001252                           340  * PRINT_REGISTER
00001252                           341  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001252                           342  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001252                           343  * 2 - (4(sp)) byte value for how many byte for immediate value
00001252                           344  *      0 for a byte value
00001252                           345  *      1 for word value
00001252                           346  *      2 for long value 
00001252                           347  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001252                           348  * NOTE: 
00001252                           349  *   D1 FOR STORE THE PARAMETER
00001252                           350  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001252                           351  PRINT_REGISTER:
00001252  322F 0006                352     MOVE.W 6(SP), D1 
00001256                           353     
00001256  3401                     354     MOVE.W D1,D2
00001258  0C01 003C                355     CMPI.B #%00111100, D1
0000125C  6700 00A2                356     BEQ PRINT_IMMEDIATE
00001260  0C01 0038                357     CMPI.B #%00111000, D1
00001264  6700 0160                358     BEQ PRINT_AB_SHORT
00001268  0C01 0039                359     CMPI.B #%00111001, D1
0000126C  6700 01BA                360     BEQ PRINT_AB_LONG 
00001270                           361  
00001270  1401                     362     MOVE.B D1,D2
00001272  C43C 0038                363     AND.B #%00111000, D2
00001276  0C02 0010                364     CMPI.B #%00010000, D2
0000127A  6700 020E                365     BEQ PRINT_OPEN
0000127E                           366  
0000127E  1401                     367     MOVE.B D1,D2
00001280  C43C 0038                368     AND.B #%00111000, D2
00001284  0C02 0018                369     CMPI.B #%00011000, D2
00001288  6700 0200                370     BEQ PRINT_OPEN
0000128C                           371  
0000128C  1401                     372     MOVE.B D1,D2
0000128E  C43C 0038                373     AND.B #%00111000, D2
00001292  0C02 0020                374     CMPI.B #%00100000, D2
00001296  6700 020C                375     BEQ PRINT_MINUS_OPEN
0000129A                           376  
0000129A                           377  CONTINUE_PRINT_REGISTER:
0000129A  1401                     378     MOVE.B D1,D2
0000129C  C43C 0038                379     AND.B #%00111000, D2
000012A0  0C02 0000                380     CMPI.B #%00000000, D2
000012A4  6700 024C                381     BEQ PRINT_D
000012A8                           382  
000012A8  1401                     383     MOVE.B D1,D2
000012AA  C43C 0038                384     AND.B #%00111000, D2
000012AE  0C02 0008                385     CMPI.B #%00001000, D2
000012B2  6700 0258                386     BEQ PRINT_A 
000012B6                           387  
000012B6                           388  CONTINUE_PRINT_RE_NUMBER:
000012B6  227C 00007010            389      MOVE.L #OUTPUT_ADDRESS, A1
000012BC  1401                     390      MOVE.B D1,D2
000012BE  C43C 0007                391      AND.B #%00000111, D2
000012C2  0602 0030                392      ADD.B #48, D2 
000012C6  1282                     393      MOVE.B D2, (A1) 
000012C8  137C 0000 0001           394      MOVE.B #$0, 1(A1)
000012CE  103C 000E                395      MOVE.B #14, D0
000012D2  4E4F                     396      TRAP #15
000012D4                           397  DONE_PRINT_NUMBER:
000012D4  1401                     398     MOVE.B D1,D2
000012D6  C43C 0038                399     AND.B #%00111000, D2
000012DA  0C02 0010                400     CMPI.B #%00010000, D2
000012DE  6700 01DE                401     BEQ PRINT_CLOSE
000012E2                           402  
000012E2  1401                     403     MOVE.B D1,D2
000012E4  C43C 0038                404     AND.B #%00111000, D2
000012E8  0C02 0018                405     CMPI.B #%00011000, D2
000012EC  6700 01EA                406     BEQ PRINT_CLOSE_PLUS
000012F0                           407  
000012F0  1401                     408     MOVE.B D1,D2
000012F2  C43C 0038                409     AND.B #%00111000, D2
000012F6  0C02 0020                410     CMPI.B #%00100000, D2
000012FA  6700 01C2                411     BEQ PRINT_CLOSE
000012FE                           412  
000012FE                           413  END_PRINT_REGISTER:
000012FE  4E75                     414      RTS
00001300                           415  
00001300                           416  PRINT_IMMEDIATE:
00001300  227C 00007010            417      MOVE.L #OUTPUT_ADDRESS, A1
00001306  12BC 0023                418      MOVE.B #'#', (A1)
0000130A  137C 0000 0001           419      MOVE.B #$0, 1(A1)
00001310  103C 000E                420      MOVE.B #14, D0
00001314  4E4F                     421      TRAP #15
00001316  4EB8 10EA                422      JSR PRINT_DOLLAR_SIGN
0000131A  3038 7008                423      MOVE.W (OFFSET_OPC_ADDRES),D0
0000131E  342F 0004                424      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001322  0C02 0000                425      CMPI.B #$00, D2
00001326  6700 0014                426      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
0000132A  0C02 0001                427      CMPI.B #$01, D2
0000132E  6700 0036                428      BEQ PRINT_IMMEDIATE_WORD
00001332  0C02 0002                429      CMPI.B #$02, D2
00001336  6700 005A                430      BEQ PRINT_IMMEDIATE_LONG
0000133A  60C2                     431      BRA END_PRINT_REGISTER
0000133C                           432  
0000133C                           433  PRINT_IMMEDIATE_BYTE:
0000133C  2479 00009100            434      MOVE.L (START_ADDRESS), A2
00001342  3432 0000                435      MOVE.W (A2, D0), D2 ; 
00001346  48E7 E0C0                436      MOVEM.L D0-D2/A0-A1, -(SP)
0000134A  2F02                     437      MOVE.L D2, -(SP)
0000134C  2F3C 00000004            438      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001352  4EB9 00001526            439      JSR PRINT_HEX
00001358  508F                     440       ADDQ.L #$08, SP
0000135A  4CDF 0307                441      MOVEM.L (SP)+, D0-D2/A0-A1
0000135E  5440                     442      ADDQ.W #$2, D0
00001360  31C0 7008                443      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001364  6098                     444      BRA END_PRINT_REGISTER
00001366                           445  PRINT_IMMEDIATE_WORD:
00001366  2479 00009100            446      MOVE.L (START_ADDRESS), A2
0000136C  3432 0000                447      MOVE.W (A2, D0), D2 ; 
00001370  48E7 E0C0                448      MOVEM.L D0-D2/A0-A1, -(SP)
00001374  2F02                     449      MOVE.L D2, -(SP)
00001376  2F3C 00000004            450      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000137C  4EB9 00001526            451      JSR PRINT_HEX
00001382  508F                     452      ADDQ.L #$08, SP
00001384  4CDF 0307                453      MOVEM.L (SP)+, D0-D2/A0-A1
00001388  5440                     454      ADDQ.W #$2, D0
0000138A  31C0 7008                455      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000138E  6000 FF6E                456      BRA END_PRINT_REGISTER
00001392                           457  PRINT_IMMEDIATE_LONG:
00001392  3038 7008                458      MOVE.W (OFFSET_OPC_ADDRES),D0
00001396  2479 00009100            459      MOVE.L (START_ADDRESS), A2
0000139C  2432 0000                460      MOVE.L (A2, D0), D2 ; 
000013A0  48E7 E0C0                461      MOVEM.L D0-D2/A0-A1, -(SP)
000013A4  2F02                     462      MOVE.L D2, -(SP)
000013A6                           463      ; offset to get immediate value from opcode
000013A6  3038 7008                464      MOVE.W (OFFSET_OPC_ADDRES),D0
000013AA  2F3C 00000008            465      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013B0  4EB9 00001526            466      JSR PRINT_HEX
000013B6  508F                     467      ADDQ.L #$08, SP
000013B8  4CDF 0307                468      MOVEM.L (SP)+, D0-D2/A0-A1
000013BC  5840                     469      ADDQ.W #$4, D0
000013BE  31C0 7008                470      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C2  6000 FF3A                471      BRA END_PRINT_REGISTER
000013C6                           472  PRINT_AB_SHORT:
000013C6  227C 00007010            473      MOVE.L #OUTPUT_ADDRESS, A1
000013CC  32BC 2824                474      MOVE.W #'($', (A1)
000013D0  137C 0000 0002           475      MOVE.B #0, 2(A1)
000013D6  103C 000E                476      MOVE.B #14, D0
000013DA  4E4F                     477      TRAP #15
000013DC                           478      ; offset to get immediate value from opcode
000013DC  2479 00009100            479      MOVE.L (START_ADDRESS), A2
000013E2  3038 7008                480      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E6  3432 0000                481      MOVE.W (A2, D0), D2 ; 
000013EA  48E7 E0C0                482      MOVEM.L D0-D2/A0-A1, -(SP)
000013EE  2F02                     483      MOVE.L D2, -(SP)
000013F0  2F3C 00000004            484      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F6  4EB9 00001526            485      JSR PRINT_HEX
000013FC  508F                     486      ADDQ.L #$08, SP
000013FE  4CDF 0307                487      MOVEM.L (SP)+, D0-D2/A0-A1
00001402  5440                     488      ADDQ.W #$2, D0
00001404  31C0 7008                489      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001408                           490      ; print close parathesis with W
00001408  227C 00007010            491      MOVE.L #OUTPUT_ADDRESS, A1
0000140E  32BC 292E                492      MOVE.W #').', (A1)
00001412  137C 0057 0002           493      MOVE.B #'W',2(A1)
00001418  137C 0000 0003           494      MOVE.B #0, 3(A1)
0000141E  103C 000E                495      MOVE.B #14, D0
00001422  4E4F                     496      TRAP #15
00001424  6000 FED8                497      BRA END_PRINT_REGISTER
00001428                           498  PRINT_AB_LONG:
00001428                           499      ;print open parathesis
00001428  227C 00007010            500      MOVE.L #OUTPUT_ADDRESS, A1
0000142E  32BC 2824                501      MOVE.W #'($', (A1)
00001432  137C 0000 0002           502      MOVE.B #0, 2(A1)
00001438  103C 000E                503      MOVE.B #14, D0
0000143C  4E4F                     504      TRAP #15
0000143E                           505      ; print value in long
0000143E  2479 00009100            506      MOVE.L (START_ADDRESS), A2
00001444                           507      ; offset to get value from opcode
00001444  3038 7008                508      MOVE.W (OFFSET_OPC_ADDRES),D0
00001448  2432 0000                509      MOVE.L (A2, D0), D2 ; 
0000144C  48E7 E0C0                510      MOVEM.L D0-D2/A0-A1, -(SP)
00001450  2F02                     511      MOVE.L D2, -(SP)
00001452  2F3C 00000008            512      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001458  4EB9 00001526            513      JSR PRINT_HEX
0000145E  508F                     514      ADDQ.L #$08, SP
00001460  4CDF 0307                515      MOVEM.L (SP)+, D0-D2/A0-A1
00001464  5840                     516      ADDQ.W #$4, D0
00001466  31C0 7008                517      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000146A                           518      ; print close parathesis with W
0000146A  227C 00007010            519      MOVE.L #OUTPUT_ADDRESS, A1
00001470  32BC 292E                520      MOVE.W #').', (A1)
00001474  137C 004C 0002           521      MOVE.B #'L',2(A1)
0000147A  137C 0000 0003           522      MOVE.B #0, 3(A1)
00001480  103C 000E                523      MOVE.B #14, D0
00001484  4E4F                     524      TRAP #15
00001486  6000 FE76                525      BRA END_PRINT_REGISTER
0000148A                           526  
0000148A                           527  PRINT_OPEN:
0000148A  227C 00007010            528      MOVE.L #OUTPUT_ADDRESS, A1
00001490  12BC 0028                529      MOVE.B #'(', (A1)
00001494  137C 0000 0001           530      MOVE.B #$0, 1(A1)
0000149A  103C 000E                531      MOVE.B #14, D0
0000149E  4E4F                     532      TRAP #15
000014A0  6000 006A                533      BRA PRINT_A
000014A4                           534  PRINT_MINUS_OPEN: 
000014A4  227C 00007010            535      MOVE.L #OUTPUT_ADDRESS, A1
000014AA  32BC 2D28                536      MOVE.W #'-(', (A1)
000014AE  137C 0000 0002           537      MOVE.B #$0, 2(A1)
000014B4  103C 000E                538      MOVE.B #14, D0
000014B8  4E4F                     539      TRAP #15
000014BA  6000 0050                540      BRA PRINT_A
000014BE                           541  
000014BE                           542  PRINT_CLOSE:
000014BE  227C 00007010            543      MOVE.L #OUTPUT_ADDRESS, A1
000014C4  12BC 0029                544      MOVE.B #')', (A1)
000014C8  137C 0000 0001           545      MOVE.B #$0, 1(A1)
000014CE  103C 000E                546      MOVE.B #14, D0
000014D2  4E4F                     547      TRAP #15
000014D4  6000 FE28                548      BRA END_PRINT_REGISTER
000014D8                           549  PRINT_CLOSE_PLUS:
000014D8  227C 00007010            550      MOVE.L #OUTPUT_ADDRESS, A1
000014DE  32BC 292B                551      MOVE.W #')+', (A1)
000014E2  137C 0000 0002           552      MOVE.B #$0, 2(A1)
000014E8  103C 000E                553      MOVE.B #14, D0
000014EC  4E4F                     554      TRAP #15
000014EE  6000 FE0E                555      BRA END_PRINT_REGISTER
000014F2                           556  PRINT_D:
000014F2  227C 00007010            557      MOVE.L #OUTPUT_ADDRESS, A1 
000014F8  12BC 0044                558      MOVE.B #'D', (A1)
000014FC  137C 0000 0001           559      MOVE.B #$0, 1(A1)
00001502  103C 000E                560      MOVE.B #14, D0
00001506  4E4F                     561      TRAP #15
00001508  6000 FDAC                562      BRA CONTINUE_PRINT_RE_NUMBER
0000150C                           563  PRINT_A: 
0000150C  227C 00007010            564      MOVE.L #OUTPUT_ADDRESS, A1 
00001512  12BC 0041                565      MOVE.B #'A', (A1)
00001516  137C 0000 0001           566      MOVE.B #$0, 1(A1)
0000151C  103C 000E                567      MOVE.B #14, D0
00001520  4E4F                     568      TRAP #15
00001522  6000 FD92                569      BRA CONTINUE_PRINT_RE_NUMBER
00001526                           570  
00001526                           571  *-----------------------------------------------------------
00001526                           572  * PRINT HEX 
00001526                           573  * PARAMETERS:
00001526                           574  *   1- (8(SP)): VALUE IN HEX
00001526                           575  *   2- (4(SP)): HOW MANY BYTES
00001526                           576  * RETURN NULL
00001526                           577  *-----------------------------------------------------------
00001526                           578  PRINT_HEX:
00001526  6000 0016                579      BRA HEX_TO_ASCII
0000152A                           580  GET_ASCII_FROM_HEX:
0000152A  227C 00007010            581      MOVE.L #OUTPUT_ADDRESS, A1
00001530  103C 000E                582      MOVE.B #14, D0
00001534  4E4F                     583      TRAP #15
00001536  227C 00007010            584      MOVE.L #OUTPUT_ADDRESS, A1
0000153C                           585  END_PRINT_HEX:
0000153C  4E75                     586      RTS
0000153E                           587  *-----------------------------------------------------------
0000153E                           588  * CONVERT HEX TO ASCII 
0000153E                           589  * PARAMATERS:
0000153E                           590  *   1- (8(SP)): VALUE IN HEX
0000153E                           591  *   2- (4(SP)): HOW MANY BYTES
0000153E                           592  * RETURN:
0000153E                           593  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
0000153E                           594  * D0 STORES HEX VALUE
0000153E                           595  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
0000153E                           596  * D1 COUNT LOOP
0000153E                           597  * D2 CONVERT TO ASCII
0000153E                           598  * D3 USE TO CALCULATE SHIFT
0000153E                           599  HEX_TO_ASCII: 
0000153E  202F 0008                600      MOVE.L 8(SP), D0 
00001542  282F 0004                601      MOVE.L 4(SP), D4
00001546  0C44 0004                602      CMPI #HEX_TO_ASCII_WORD, D4 
0000154A  6700 004E                603      BEQ HEX_TO_ASCII_SWAP
0000154E  0C44 0002                604      CMPI #HEX_TO_ASCII_BYTE, D4
00001552  6700 EAAE                605      BEQ HEX_TO_ASCII_BYTE
00001556                           606  HEX2ASCII_DONE_CONVERT:
00001556  4201                     607      CLR.B D1
00001558  227C 00007010            608      MOVE.L #OUTPUT_ADDRESS, A1
0000155E  =0000000F                609  HEX_MASKING EQU $0000000F
0000155E  =00000002                610  HEX_TO_ASCII_BYTE EQU $02
0000155E  =00000004                611  HEX_TO_ASCII_WORD EQU $04
0000155E  =00000008                612  HEX_TO_ASCII_LONG EQU $08
0000155E                           613  
0000155E                           614  HEX_TO_ASCII_LOOP:
0000155E  B204                     615      CMP.B D4, D1
00001560  6700 0032                616      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001564                           617  
00001564  E998                     618      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001566  2600                     619      MOVE.L D0,D3 ; copy the value to mask
00001568  C6BC 0000000F            620      AND.L #HEX_MASKING, D3  ; mask
0000156E                           621  
0000156E  0C03 000A                622      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001572  6D00 000C                623      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001576                           624  
00001576  0C03 0048                625      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000157A  6D00 000E                626      BLT HEX_TO_ASCII_LETTER
0000157E                           627  
0000157E  60DE                     628      BRA HEX_TO_ASCII_LOOP
00001580                           629  HEX_TO_ASCII_NUMBER:
00001580  0603 0030                630      ADD.B #48, D3  ; convert number to letter
00001584  12C3                     631      MOVE.B D3, (A1)+ ; push to return memory
00001586  5201                     632      ADDQ.B #$1, D1 ; add for loop count
00001588  60D4                     633      BRA HEX_TO_ASCII_LOOP ; loop back
0000158A                           634  HEX_TO_ASCII_LETTER:
0000158A  0603 0037                635      ADD.B #55, D3 ; convert A-F in ascii
0000158E  12C3                     636      MOVE.B D3, (A1)+ ; push to return memory
00001590  5201                     637      ADDQ.B #$1, D1 ; add to for loop count
00001592  60CA                     638      BRA HEX_TO_ASCII_LOOP ;loop back
00001594                           639  END_HEX_TO_ASCII:
00001594  12FC 0000                640      MOVE.B #0, (A1)+ ; add null terminated value
00001598  6090                     641      BRA GET_ASCII_FROM_HEX
0000159A                           642  HEX_TO_ASCII_SWAP:
0000159A  4840                     643      SWAP D0
0000159C  60B8                     644      BRA HEX2ASCII_DONE_CONVERT
0000159E                           645     
0000159E                           646  HEX_TO_ASCII_ROR:
0000159E  E098                     647      ROR.L #$08, D0
000015A0  60B4                     648      BRA HEX2ASCII_DONE_CONVERT
000015A2                           649  
000015A2                           650  
000015A2                           651  *-----------------------------------------------------------
000015A2                           652  * CHECK IF THE VALUE IN HEX IS ODD 
000015A2                           653  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
000015A2                           654  * RETURN:
000015A2                           655  *   0: IF IT IS EVEN
000015A2                           656  *   1: IF IT IS ODD
000015A2                           657  * NOTE:
000015A2                           658  *   A0 IS FOR RETURN ADDRESS
000015A2                           659  *   D0 IS FOR HEX VALUE
000015A2                           660  CHECK_VALUE_IS_ODD:
000015A2  =00000000                661  VALUE_IS_EVEN EQU $0
000015A2  =00000001                662  VALUE_IS_ODD EQU $1
000015A2  41F9 00009000            663      LEA RETURN_ADDRESS, A0
000015A8  202F 0004                664      MOVE.L 4(SP), D0
000015AC  C0BC 0000FFFF            665      AND.L #$0000FFFF, D0
000015B2  80FC 0002                666      DIVU.W #2, D0
000015B6  4840                     667      SWAP D0      
000015B8  0C40 0000                668      CMPI.W #0, D0
000015BC  6700 000C                669      BEQ CHECK_VALUE_IS_ODD_FAILED
000015C0  30BC 0001                670      MOVE.W #VALUE_IS_ODD, (A0)
000015C4  6000 0002                671      BRA END_CHECK_VALUE_IS_ODD
000015C8                           672  END_CHECK_VALUE_IS_ODD:   
000015C8  4E75                     673      RTS
000015CA                           674  
000015CA                           675  CHECK_VALUE_IS_ODD_FAILED:
000015CA  30BC 0000                676      MOVE.W #VALUE_IS_EVEN, (A0)
000015CE  60F8                     677      BRA END_CHECK_VALUE_IS_ODD
000015D0                           678  *-----------------------------------------------------------
000015D0                           679  * CONVERT ASCII TO HEX
000015D0                           680  * PARAMETERS:
000015D0                           681  *   1. LOCATION OF THE ASCII
000015D0                           682  *   2. LENGTH OF THE ASCII
000015D0                           683  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015D0                           684  * RETURN:
000015D0                           685  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015D0                           686  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015D0                           687  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015D0                           688  * NOTE:
000015D0                           689  *    D0 FOR LENGTH OF ASCII
000015D0                           690  *    D1 FOR LOOPING
000015D0                           691  ; CURRENT INDEX
000015D0                           692  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015D0                           693  *    D3 FOR CONVERT FINAL RESULT
000015D0                           694  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015D0                           695  *    A0 LOCATION OF THE DATA   
000015D0                           696  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015D0                           697  ASCII_TO_HEX:
000015D0  =00000001                698  ASCII_TO_HEX_RETURN_OK EQU $1
000015D0  45F9 00009000            699      LEA RETURN_ADDRESS, A2
000015D6  4252                     700      CLR.W (A2)
000015D8  42AA 0002                701      CLR.L 2(A2)
000015DC  206F 000C                702      MOVE.L 12(SP),A0
000015E0                           703   ; LOCATION OF THE DATA
000015E0  202F 0008                704      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015E4  222F 0004                705      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E8  B280                     706      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015EA  6D00 0076                707      BLT ASCII_TO_HEX_FAILED_0
000015EE  4281                     708      CLR.L D1 ; FOR LOOPING
000015F0                           709  ASCII_TO_HEX_LOOP:
000015F0  B081                     710     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015F2  6700 0068                711     BEQ ASCII_TO_HEX_END_LOOP
000015F6                           712     ; D2 USE FOR STORE DATA 
000015F6  1418                     713      MOVE.B (A0)+, D2
000015F8  0C02 002F                714      CMPI.B #47, D2
000015FC                           715  ASCII_TO_HEX_CHECK_GT_0
000015FC  6E00 0006                716      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
00001600  6000 0066                717      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
00001604                           718  ASCII_TO_HEX_CHECK_LT_9:
00001604  0C02 003A                719      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001608  6D00 001E                720      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
0000160C                           721      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
0000160C  6000 0002                722      BRA ASCII_TO_HEX_CHECK_GT_A
00001610                           723  ASCII_TO_HEX_CHECK_GT_A:
00001610  0C02 0040                724      CMPI.B #64, D2
00001614  6E00 0006                725      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001618  6000 004E                726      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
0000161C                           727  ASCII_TO_HEX_CHECK_LT_F
0000161C  0C02 0047                728      CMPI.B #71, D2
00001620  6D00 0020                729      BLT ASCII_TO_HEX_CONVERT_LETTER
00001624  6000 0042                730      BRA ASCII_TO_HEX_FAILED_2
00001628                           731  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001628                           732  ASCII_TO_HEX_CONVERT_NUMBER:
00001628  2800                     733       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
0000162A  0402 0030                734       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
0000162E  9881                     735       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
00001630  5344                     736       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
00001632  C8FC 0004                737       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001636  E9A2                     738       ASL.L D4, D2 ; SHIFT DATA
00001638  D5AA 0002                739       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
0000163C  4282                     740       CLR.L D2
0000163E  5241                     741       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001640  60AE                     742       BRA ASCII_TO_HEX_LOOP
00001642                           743  ASCII_TO_HEX_CONVERT_LETTER:
00001642  2800                     744      MOVE.L D0, D4
00001644  0402 0037                745      SUB.B #55, D2
00001648  9881                     746      SUB.L D1,D4
0000164A  5344                     747      SUBQ #1, D4
0000164C  C8FC 0004                748      MULU #4, D4
00001650  E9A2                     749      ASL.L D4,D2
00001652  D5AA 0002                750      ADD.L D2, 2(A2)
00001656  4282                     751      CLR.L D2 
00001658  5241                     752      ADDQ #1, D1
0000165A  6094                     753      BRA ASCII_TO_HEX_LOOP
0000165C                           754  ASCII_TO_HEX_END_LOOP:
0000165C  34BC 0001                755      MOVE.W #1, (A2)
00001660  4E75                     756      RTS
00001662                           757      
00001662                           758  ASCII_TO_HEX_FAILED_0:
00001662  34BC 0002                759      MOVE.W #2, (A2)
00001666  4E75                     760      RTS
00001668                           761  ASCII_TO_HEX_FAILED_2:
00001668  34BC 0002                762      MOVE.W #2, (A2)
0000166C  4E75                     763      RTS 
0000166E                           764  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000166E                           765  * PARAMETERS:
0000166E                           766  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000166E                           767  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000166E                           768  * RETURN:
0000166E                           769  *   NULL
0000166E                           770  * NOTE:
0000166E                           771  *   A0 USE TO POINT TO THE ADDRESS
0000166E                           772  *   d1 USE TO MATH 
0000166E                           773  INCRASE_POINTER_START_ADDRESS: 
0000166E  206F 0008                774      MOVE.L 8(SP), A0
00001672  222F 0004                775      MOVE.L 4(SP), D1
00001676  D390                     776      ADD.L D1, (A0)
00001678  4E75                     777      RTS
0000167A                           778  
0000167A                           779  * FETCH 16 BIT FROM START_ADDRESS
0000167A                           780  * PARAMTERS: 
0000167A                           781  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000167A                           782  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000167A                           783  * RETURN:
0000167A                           784  *   NULL
0000167A                           785  * NOTE:
0000167A                           786  *     A0 USE TO STORE THE OPCODE LOCATION
0000167A                           787  *     A2 USES TO RETURN THE OPCODE
0000167A                           788  FETCH_OPCODES:
0000167A  206F 0008                789      MOVE.L 8(SP), A0 ; LOCATION
0000167E  246F 0004                790      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001682  3050                     791      MOVE.W (A0), A0
00001684  3488                     792      MOVE.W A0,(A2)
00001686  31FC 0002 7008           793      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000168C                           794  END_FETCH_OPCODES:
0000168C  4E75                     795      RTS
0000168E                           796  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000168E                           797  * LETS DECODE
0000168E                           798  * jump table uses to jump to decode subroutine
0000168E                           799  * PARAMATERS:
0000168E                           800  * 1-(4(Sp)) Word - opcode
0000168E                           801  * NOTE: 
0000168E                           802  *   D1 USES TO STORE OPCODE
0000168E                           803  JUMP_TABLE:
0000168E  322F 0004                804      MOVE.W 4(SP), D1
00001692  4EB9 00001C10            805      JSR ORI
00001698  4EB9 00001926            806      JSR MOVEA 
0000169E  4EB9 000019DC            807      JSR MOVE
000016A4  4EB9 00001AA0            808      JSR NEG
000016AA  4EB9 00001702            809      JSR NOP
000016B0  4EB9 0000170C            810      JSR RTS
000016B6  4EB9 00001716            811      JSR JSR
000016BC  4EB9 00001AA0            812      JSR MOVEM 
000016C2  4EB9 00001762            813      JSR LEA
000016C8  4EB9 00001DB6            814      JSR DIVS
000016CE  4EB9 00001B42            815      JSR OR
000016D4  4EB9 00001CE8            816      JSR SUB
000016DA  4EB9 00001C66            817      JSR EOR
000016E0  4EB9 00001EAE            818      JSR CMP
000016E6  4EB9 00001E32            819      JSR MULS
000016EC  4EB9 00001854            820      JSR ADD 
000016F2  4EB9 000017D0            821      JSR ADDA
000016F8  4EB9 00001B04            822      JSR BRA
000016FE                           823  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016FE                           824  END_JUMP_TABLE:
000016FE  4EB8 11E6                825      JSR UNSUPPORT_OPCODE
00001702                           826  
00001702                           827  NOP:
00001702                           828  * constant for NOP 
00001702  =00004E71                829  C_NOP EQU $4E71
00001702  B27C 4E71                830      CMP.W #C_NOP, D1
00001706  6700 083C                831      BEQ PRINT_NOP
0000170A  4E75                     832      RTS
0000170C                           833  
0000170C                           834  RTS:
0000170C                           835  * constant for RTS 
0000170C  =00004E75                836  C_RTS EQU $4E75
0000170C  B27C 4E75                837      CMP.W #C_RTS, D1
00001710  6700 081E                838      BEQ PRINT_RTS
00001714  4E75                     839      RTS
00001716                           840  
00001716                           841  JSR:
00001716  =00004E80                842  JSR_OPCODE EQU %0100111010000000
00001716  3401                     843      MOVE.W D1,D2 
00001718                           844  * MASKING WITH UNIQUE OPCODE
00001718  C47C FFC0                845      AND.W #%1111111111000000, D2
0000171C  B47C 4E80                846      CMP.W #JSR_OPCODE, D2
00001720  6600 003E                847      BNE JSR_END 
00001724                           848      ; check to make sure we support this register 
00001724  3401                     849      MOVE.W D1, D2 
00001726  C43C 003F                850      AND.B #%00111111, D2 
0000172A  3F02                     851      MOVE.W D2, -(SP)
0000172C  4EB8 11AC                852      JSR CHECK_SUPPORT_REGISTER 
00001730  544F                     853      ADDQ #2, SP 
00001732                           854      ; check return value
00001732                           855      *  from print_register to see if it is unsupported register 
00001732  3439 00009000            856      MOVE.W (RETURN_ADDRESS), D2 
00001738  0C42 0002                857      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000173C  6700 0022                858      BEQ JSR_END
00001740                           859      ; done checking 
00001740  4EB9 00001FB6            860      JSR PRINT_JSR
00001746                           861  * MASKING TO GET MODE AND REGISTER
00001746  1401                     862      MOVE.B D1,D2
00001748  C43C 003F                863      AND.B #%00111111, D2
0000174C  48A7 4000                864      MOVEM.W D1, -(SP)
00001750  3F02                     865      MOVE.W D2, -(SP)
00001752  3F3C 0000                866      MOVE.W #$0, -(SP)
00001756  4EB8 1252                867      JSR PRINT_REGISTER
0000175A  5882                     868      ADDQ.L #4, D2
0000175C  4C9F 0002                869      MOVEM.W (SP)+, D1
00001760                           870  JSR_END:
00001760  4E75                     871      RTS
00001762                           872  
00001762                           873  LEA:
00001762  3401                     874      MOVE.W D1,D2 
00001764  C47C F1C0                875      AND.W  #%1111000111000000, D2
00001768  0C42 41C0                876      CMPI.W #%0100000111000000, D2
0000176C  6600 0060                877      BNE LEA_END
00001770                           878  
00001770                           879      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001770  3401                     880      MOVE.W D1, D2 
00001772  C43C 003F                881      AND.B #%00111111, D2 
00001776  3F02                     882      MOVE.W D2, -(SP)
00001778  4EB8 11AC                883      JSR CHECK_SUPPORT_REGISTER
0000177C  544F                     884      ADDQ #2, SP 
0000177E                           885      ; check return value
0000177E                           886      *  from print_register to see if it is unsupported register 
0000177E  3439 00009000            887      MOVE.W (RETURN_ADDRESS), D2 
00001784  0C42 0002                888      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001788  6700 F8BE                889      BEQ FINISH_OPCODE
0000178C                           890      * END CHECKING
0000178C  4EB9 00001FC8            891      JSR PRINT_LEA
00001792  1401                     892      MOVE.B D1,D2 
00001794                           893      ; MASK TO GET MODE AND REGISTER
00001794  C43C 003F                894      AND.B #%0000000000111111, D2
00001798  48A7 4000                895      MOVEM.W D1, -(SP)
0000179C  3F02                     896      MOVE.W D2, -(SP)
0000179E  3F3C 0000                897      MOVE.W #$0, -(SP)
000017A2  4EB8 1252                898      JSR PRINT_REGISTER
000017A6  588F                     899      ADDQ.L #$4, SP
000017A8  4C9F 0002                900      MOVEM.W (SP)+, D1
000017AC  4EB8 10D2                901      JSR PRINT_COMMA
000017B0                           902      ; MASK TO GET DESTINATION REGISTER
000017B0  3401                     903      MOVE.W D1,D2
000017B2  C47C 0E00                904      AND.W #%0000111000000000, D2
000017B6  E04A                     905      LSR.W #$08, D2
000017B8  E24A                     906      LSR.W #$01, D2
000017BA  843C 0008                907      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017BE  3F02                     908      MOVE.W D2, -(SP)
000017C0  3F3C 0000                909      MOVE.W #$0, -(SP) 
000017C4  4EB8 1252                910      JSR PRINT_REGISTER
000017C8  588F                     911      ADDQ.L #$04, SP
000017CA  6000 F87C                912      BRA FINISH_OPCODE
000017CE                           913  LEA_END:
000017CE  4E75                     914      RTS
000017D0                           915  
000017D0                           916  ADDA:
000017D0  =0000D0C0                917  C_ADDA EQU       %1101000011000000
000017D0  =0000F0C0                918  ADDA_MASKING EQU %1111000011000000
000017D0  =00000100                919  ADDA_SIZE_MASKING EQU %0000000100000000
000017D0  =00000E00                920  ADDA_AN_MASKING EQU %0000111000000000
000017D0  3401                     921      MOVE.W D1, D2
000017D2  C47C F0C0                922      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017D6  0C42 D0C0                923      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017DA  6600 0076                924      BNE ADDA_END 
000017DE                           925      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017DE  3401                     926      MOVE.W D1, D2 
000017E0  C43C 003F                927      AND.B #%00111111, D2 
000017E4  3F02                     928      MOVE.W D2, -(SP)
000017E6  4EB8 11AC                929      JSR CHECK_SUPPORT_REGISTER
000017EA  544F                     930      ADDQ #2, SP 
000017EC                           931      ; check return value
000017EC                           932      *  from print_register to see if it is unsupported register 
000017EC  3439 00009000            933      MOVE.W (RETURN_ADDRESS), D2 
000017F2  0C42 0002                934      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017F6  6700 F850                935      BEQ FINISH_OPCODE
000017FA  4EB9 00001FDA            936      JSR PRINT_ADDA
00001800  3401                     937      MOVE.W D1, D2  ; START TO MASK SIZE 
00001802  C47C 0100                938      AND.W #ADDA_SIZE_MASKING,D2 
00001806  E04A                     939      LSR.W #8, D2 
00001808  3C02                     940      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
0000180A  5246                     941      ADDQ #$1, D6
0000180C  1F06                     942      MOVE.B D6 , -(SP)
0000180E  4EB8 113A                943      JSR PRINT_DATA
00001812  548F                     944      ADDQ.L #$2, SP 
00001814  4EB8 10B4                945      JSR PRINT_TAB
00001818                           946      ; GET MODE AND REGISTER
00001818  3238 7006                947      MOVE.W (OPCODE_ADDRESS), D1 
0000181C  1401                     948      MOVE.B D1, D2 
0000181E  C43C 003F                949      AND.B #%00111111, D2 
00001822  3F02                     950      MOVE.W D2, -(SP)
00001824  3F06                     951      MOVE.W D6, -(SP)
00001826  4EB8 1252                952      JSR PRINT_REGISTER 
0000182A  588F                     953      ADDQ.L #$04, SP 
0000182C  4EB8 10D2                954      JSR PRINT_COMMA
00001830  3238 7006                955      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
00001834  3401                     956      MOVE.W D1, D2
00001836  C47C 0E00                957      AND.W #ADDA_AN_MASKING, D2
0000183A  E04A                     958      LSR.W #8, D2 
0000183C  E24A                     959      LSR.W #1, D2 
0000183E  843C 0008                960      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
00001842  3F02                     961      MOVE.W D2, -(SP)
00001844  3F3C 0000                962      MOVE.W #$0, -(SP)
00001848  4EB8 1252                963      JSR PRINT_REGISTER 
0000184C  588F                     964      ADDQ.L #$4, SP 
0000184E  6000 F7F8                965      BRA FINISH_OPCODE
00001852                           966  ADDA_END:
00001852  4E75                     967      RTS
00001854                           968  
00001854                           969  ADD: 
00001854  =0000D000                970  C_ADD EQU           %1101000000000000 ; PATTERN
00001854  =0000F000                971  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
00001854  =0000003F                972  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
00001854  =00000E00                973  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
00001854  =000000C0                974  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
00001854  =00000100                975  C_ADD_DIRECTION EQU %0000000100000000
00001854  =00000000                976  C_ADD_TO_D EQU      %0000000000000000
00001854  =00000100                977  C_ADD_FROM_D EQU    %0000000100000000
00001854  3401                     978      MOVE.W D1, D2 
00001856                           979      ; CHECK PATTERN 
00001856  C47C F000                980      AND.W #C_ADD_MASKING, D2 
0000185A  0C42 D000                981      CMPI.W #C_ADD, D2 
0000185E  6600 00C4                982      BNE ADD_END 
00001862                           983      ; CHECK SUPPORT REGISTER 
00001862  3401                     984      MOVE.W D1, D2 
00001864  C43C 003F                985      AND.B #%00111111, D2 
00001868  3F02                     986      MOVE.W D2, -(SP)
0000186A  4EB8 11AC                987      JSR CHECK_SUPPORT_REGISTER
0000186E  544F                     988      ADDQ #2, SP 
00001870                           989      ; check return value
00001870                           990      *  from print_register to see if it is unsupported register 
00001870  3439 00009000            991      MOVE.W (RETURN_ADDRESS), D2 
00001876  0C42 0002                992      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000187A  6700 F7CC                993      BEQ FINISH_OPCODE
0000187E                           994      
0000187E  4EB9 00001FE8            995      JSR PRINT_ADD 
00001884  3238 7006                996      MOVE.W (OPCODE_ADDRESS), D1 
00001888  3401                     997      MOVE.W D1, D2 
0000188A  C47C 00C0                998      AND.W #C_ADD_SIZE, D2 
0000188E  EC4A                     999      LSR.W #6, D2
00001890  1C02                    1000      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001892                          1001  
00001892  1F02                    1002      MOVE.B D2, -(SP)
00001894  4EB8 113A               1003      JSR PRINT_DATA
00001898  548F                    1004      ADDQ.L #$02, SP 
0000189A  4EB8 10B4               1005      JSR PRINT_TAB 
0000189E                          1006      ; CHECK DIRECTION
0000189E  3238 7006               1007      MOVE.W (OPCODE_ADDRESS), D1 
000018A2  3401                    1008      MOVE.W D1, D2  
000018A4  C47C 0100               1009      AND.W #C_ADD_DIRECTION, D2 
000018A8  0C42 0000               1010      CMPI.W #C_ADD_TO_D, D2 
000018AC  6700 003C               1011      BEQ ADD_TO_D ; DN <EA> -> DN
000018B0                          1012      ; otherwise from d 
000018B0                          1013  ADD_FROM_D:
000018B0  3238 7006               1014      MOVE.W (OPCODE_ADDRESS), D1 
000018B4  3401                    1015      MOVE.W D1, D2 
000018B6  C47C 0E00               1016      AND.W #C_ADD_REGISTER, D2 
000018BA  E08A                    1017      LSR.L #8, D2 
000018BC  E28A                    1018      LSR.L #1, D2 
000018BE  843C 0000               1019      OR.B #%00000000, D2
000018C2  3F02                    1020      MOVE.W D2, -(SP)
000018C4  3F3C 0000               1021      MOVE.W #$0, -(SP)
000018C8  4EB8 1252               1022      JSR PRINT_REGISTER 
000018CC  5882                    1023      ADDQ.L #4, D2 
000018CE  4EB8 10D2               1024      JSR PRINT_COMMA 
000018D2                          1025      
000018D2  3238 7006               1026      MOVE.W (OPCODE_ADDRESS), D1 
000018D6  3401                    1027      MOVE.W D1, D2 
000018D8  C43C 003F               1028      AND.B #C_ADD_EA, D2 
000018DC  3F02                    1029      MOVE.W D2, -(SP)
000018DE  3F06                    1030      MOVE.W D6, -(SP)
000018E0  4EB8 1252               1031      JSR PRINT_REGISTER
000018E4  588F                    1032      ADDQ.L #4, SP 
000018E6  6000 F760               1033      BRA FINISH_OPCODE
000018EA                          1034      
000018EA                          1035  ADD_TO_D:
000018EA  3238 7006               1036      MOVE.W (OPCODE_ADDRESS), D1 
000018EE  3401                    1037      MOVE.W D1, D2 
000018F0                          1038      ; GET SOURCE REGISTER 
000018F0  C43C 003F               1039      AND.B #C_ADD_EA, D2 
000018F4  3F02                    1040      MOVE.W D2, -(SP)
000018F6  3F06                    1041      MOVE.W D6, -(SP)
000018F8  4EB8 1252               1042      JSR PRINT_REGISTER
000018FC  588F                    1043      ADDQ.L #4, SP 
000018FE  4EB8 10D2               1044      JSR PRINT_COMMA 
00001902                          1045      ; PRINT DATA REGISTER 
00001902  3238 7006               1046      MOVE.W (OPCODE_ADDRESS), D1 
00001906  3401                    1047      MOVE.W D1, D2 
00001908  C47C 0E00               1048      AND.W #C_ADD_REGISTER, D2 
0000190C  E04A                    1049      LSR.W #8, D2 
0000190E  E24A                    1050      LSR.W #1, D2 
00001910                          1051      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001910  843C 0000               1052      OR.B #%00000000, D2 
00001914  3F02                    1053      MOVE.W D2, -(SP)
00001916  3F3C 0000               1054      MOVE.W #$0, -(SP)
0000191A  4EB8 1252               1055      JSR PRINT_REGISTER
0000191E  588F                    1056      ADDQ.L #4, SP 
00001920  6000 F726               1057      BRA FINISH_OPCODE
00001924                          1058  ADD_END:
00001924  4E75                    1059      RTS
00001926                          1060  
00001926                          1061  MOVEA: 
00001926  =00001040               1062  C_MOVEA_PATTERN1 EQU  %0001000001000000
00001926  =00003040               1063  C_MOVEA_PATTERN2 EQU  %0011000001000000
00001926  =00002040               1064  C_MOVEA_PATTERN3 EQU  %0010000001000000
00001926  =0000F1C0               1065  C_MOVEA_P_MASKING EQU %1111000111000000
00001926  =00003000               1066  C_MOVEA_SIZE      EQU %0011000000000000
00001926  =00000E00               1067  C_MOVEA_AN        EQU %0000111000000000
00001926  =0000003F               1068  C_MOVEA_REGISTER  EQU %00111111
00001926  3401                    1069      MOVE.W D1, D2 
00001928  0242 F1C0               1070      ANDI.W #C_MOVEA_P_MASKING, D2 
0000192C  0C42 1040               1071      CMPI.W #C_MOVEA_PATTERN1, D2 
00001930  6700 0014               1072      BEQ MOVEA_REGISTER_OK
00001934  0C42 3040               1073      CMPI.W #C_MOVEA_PATTERN2, D2 
00001938  6700 000C               1074      BEQ MOVEA_REGISTER_OK
0000193C  0C42 2040               1075      CMPI.W #C_MOVEA_PATTERN3, D2 
00001940  6700 0004               1076      BEQ MOVEA_REGISTER_OK
00001944  4E75                    1077      RTS
00001946                          1078  MOVEA_REGISTER_OK:
00001946                          1079      ; CHECK SUPPORT THE REGISTER 
00001946  3401                    1080      MOVE.W D1, D2 
00001948  C43C 003F               1081      AND.B #C_MOVEA_REGISTER, D2 
0000194C  3F02                    1082      MOVE.W D2, -(SP) 
0000194E  4EB8 11AC               1083      JSR CHECK_SUPPORT_REGISTER
00001952  548F                    1084      ADDQ.L #2, SP 
00001954  3439 00009000           1085      MOVE.W (RETURN_ADDRESS), D2 
0000195A  0C42 0002               1086      CMPI.W #C_UNSUPPORT_REGISTER, D2 
0000195E  6700 F6E8               1087      BEQ FINISH_OPCODE
00001962                          1088      ; DONE CHECKING, NOW DECODE 
00001962  4EB9 00002020           1089      JSR PRINT_MOVEA 
00001968                          1090      ; GET SIZE 
00001968  3401                    1091      MOVE.W D1, D2 
0000196A  C47C 3000               1092      AND.W #C_MOVEA_SIZE, D2 
0000196E                          1093      ; SHIFT TO LSB 
0000196E  E04A                    1094      LSR.W #8, D2 
00001970  E84A                    1095      LSR.W #4, D2 
00001972  0C02 0001               1096      CMPI.B #%00000001, D2
00001976  6700 000E               1097      BEQ CONVERT_OPMODE_SIZE_B
0000197A  0C02 0003               1098      CMPI.B #%00000011, D2 
0000197E  6700 000C               1099      BEQ CONVERT_OPMODE_SIZE_W
00001982  6000 000E               1100      BRA MOVEA_DONE_CONVERT
00001986                          1101  CONVERT_OPMODE_SIZE_B:
00001986  5302                    1102      SUBQ.B #1, D2 
00001988  6000 0008               1103      BRA MOVEA_DONE_CONVERT
0000198C                          1104  CONVERT_OPMODE_SIZE_W: 
0000198C  5502                    1105      SUBQ.B #2, D2 
0000198E  6000 0002               1106      BRA MOVEA_DONE_CONVERT
00001992                          1107  
00001992                          1108  MOVEA_DONE_CONVERT:
00001992  3C02                    1109      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001994  1F06                    1110      MOVE.B D6, -(SP)
00001996  4EB8 113A               1111      JSR PRINT_DATA 
0000199A  548F                    1112      ADDQ.L #2, SP 
0000199C  4EB8 10B4               1113      JSR PRINT_TAB
000019A0                          1114      ; GET SOURCE REGISTER 
000019A0  3238 7006               1115      MOVE.W (OPCODE_ADDRESS), D1 
000019A4  3401                    1116      MOVE.W D1, D2 
000019A6  C43C 003F               1117      AND.B #C_MOVEA_REGISTER,D2 
000019AA  3F02                    1118      MOVE.W D2, -(SP)
000019AC  3F06                    1119      MOVE.W D6, -(SP)
000019AE  4EB8 1252               1120      JSR PRINT_REGISTER
000019B2  588F                    1121      ADDQ.L #4, SP 
000019B4  4EB8 10D2               1122      JSR PRINT_COMMA
000019B8                          1123  
000019B8  3238 7006               1124      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019BC  3401                    1125      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019BE  C47C 0E00               1126      AND.W #C_MOVEA_AN, D2 
000019C2  E04A                    1127      LSR.W #8, D2 
000019C4  E24A                    1128      LSR.W #1, D2 
000019C6                          1129      ; ADD MODE FOR PRINT_REGISTER 
000019C6  0002 0008               1130      ORI.B #%00001000, D2 
000019CA  3F02                    1131      MOVE.W D2, -(SP)
000019CC  3F3C 0000               1132      MOVE.W #0, -(SP)
000019D0  4EB8 1252               1133      JSR PRINT_REGISTER ; PRINT AN 
000019D4  588F                    1134      ADDQ.L #4, SP 
000019D6  6000 F670               1135      BRA FINISH_OPCODE   
000019DA                          1136  
000019DA                          1137  MOVEA_END: 
000019DA  4E75                    1138      RTS 
000019DC                          1139  
000019DC                          1140  MOVE: 
000019DC  =00001000               1141  C_MOVE_PATTERN EQU   %0001000000000000
000019DC  =00003000               1142  C_MOVE_PATTERN1 EQU  %0011000000000000
000019DC  =00002000               1143  C_MOVE_PATTERN2 EQU  %0010000000000000
000019DC  =0000F000               1144  C_MOVE_MASKING EQU   %1111000000000000
000019DC  =00003000               1145  C_MOVE_SIZE EQU      %0011000000000000
000019DC  =00000E00               1146  C_MOVE_DES_XN EQU    %0000111000000000
000019DC  =000001C0               1147  C_MOVE_DES_MOD EQU   %0000000111000000
000019DC  =0000003F               1148  C_MOVE_SRC_RE EQU    %00111111 
000019DC  3401                    1149      MOVE.W D1, D2 
000019DE  C47C F000               1150      AND.W #C_MOVE_MASKING, D2 
000019E2  0C42 1000               1151      CMPI.W #C_MOVE_PATTERN, D2 
000019E6  6700 0014               1152      BEQ MOVE_MATCH_PATTERN 
000019EA  0C42 3000               1153      CMPI.W #C_MOVE_PATTERN1, D2 
000019EE  6700 000C               1154      BEQ MOVE_MATCH_PATTERN 
000019F2  0C42 2000               1155      CMPI.W #C_MOVE_PATTERN2, D2 
000019F6  6700 0004               1156      BEQ MOVE_MATCH_PATTERN
000019FA                          1157  MOVE_END:
000019FA  4E75                    1158      RTS
000019FC                          1159  MOVE_MATCH_PATTERN: 
000019FC  3401                    1160      MOVE.W D1, D2 
000019FE                          1161      ; CHECK IF WE SUPPORT THE REGISTER 
000019FE                          1162      ; SOURCE REGISTER 
000019FE  C43C 003F               1163      AND.B #C_MOVE_SRC_RE, D2
00001A02  3A42                    1164      MOVE.W D2, A5 ; COPY FOR LATER USE
00001A04  3F02                    1165      MOVE.W D2, -(SP)
00001A06  4EB8 11AC               1166      JSR CHECK_SUPPORT_REGISTER 
00001A0A  548F                    1167      ADDQ.L #2, SP 
00001A0C  0C79 0002 00009000      1168      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A14  6700 F632               1169      BEQ FINISH_OPCODE
00001A18                          1170      ; DES REGISTER 
00001A18                          1171      ;GET XN 
00001A18  3238 7006               1172      MOVE.W (OPCODE_ADDRESS), D1 
00001A1C  3401                    1173      MOVE.W D1,D2 
00001A1E  C47C 0E00               1174      AND.W #C_MOVE_DES_XN, D2 
00001A22  EC4A                    1175      LSR.W #6, D2 
00001A24  C27C 01C0               1176      AND.W #C_MOVE_DES_MOD, D1 
00001A28  8441                    1177      OR.W D1, D2 
00001A2A  E64A                    1178      LSR.W #3, D2 
00001A2C  3842                    1179      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A2E  3F02                    1180      MOVE.W D2, -(SP)
00001A30  4EB8 11AC               1181      JSR CHECK_SUPPORT_REGISTER
00001A34  548F                    1182      ADDQ.L #2, SP 
00001A36  0C79 11AC 00009000      1183      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A3E  6700 F608               1184      BEQ FINISH_OPCODE
00001A42                          1185      ; EVERYTHING IS OK 
00001A42                          1186      
00001A42  4EB9 0000202E           1187      JSR PRINT_MOVE
00001A48  3238 7006               1188      MOVE.W (OPCODE_ADDRESS), D1 
00001A4C  3401                    1189      MOVE.W D1, D2 
00001A4E  C47C 3000               1190      AND.W #C_MOVE_SIZE, D2 
00001A52  E04A                    1191      LSR.W #8, D2 
00001A54  E80A                    1192      LSR.B #4, D2 
00001A56  0C02 0001               1193      CMPI.B #1, D2 
00001A5A  6700 000E               1194      BEQ MOVE_OPMODE_BYTE
00001A5E  0C02 0003               1195      CMPI.B #3, D2 
00001A62  6700 000C               1196      BEQ MOVE_OPMODE_WORD
00001A66  6000 000E               1197      BRA MOVE_DONE_CONVERT
00001A6A                          1198  MOVE_OPMODE_BYTE:
00001A6A  5302                    1199      SUBQ.B #1, D2
00001A6C  6000 0008               1200      BRA MOVE_DONE_CONVERT
00001A70                          1201  MOVE_OPMODE_WORD:
00001A70  5502                    1202      SUBQ.B #2, D2 
00001A72  6000 0002               1203      BRA MOVE_DONE_CONVERT
00001A76                          1204  MOVE_DONE_CONVERT:
00001A76  3C02                    1205      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A78  1F06                    1206      MOVE.B D6, -(SP) 
00001A7A  4EB8 113A               1207      JSR PRINT_DATA 
00001A7E  548F                    1208      ADDQ.L #2, SP
00001A80  4EB8 10B4               1209      JSR PRINT_TAB 
00001A84                          1210      ; PRINT SOURCE
00001A84  3F0D                    1211      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A86  3F06                    1212      MOVE.W D6, -(SP) ; SIZE 
00001A88  4EB8 1252               1213      JSR PRINT_REGISTER
00001A8C  588F                    1214      ADDQ.L #4, SP 
00001A8E                          1215      ; PRINT DES 
00001A8E  4EB8 10D2               1216      JSR PRINT_COMMA 
00001A92  3F0C                    1217      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A94  3F06                    1218      MOVE.W D6, -(SP) ; SIZE 
00001A96  4EB8 1252               1219      JSR PRINT_REGISTER 
00001A9A  588F                    1220      ADDQ.L #4, SP 
00001A9C  6000 F5AA               1221      BRA FINISH_OPCODE 
00001AA0                          1222  
00001AA0                          1223  MOVEM: 
00001AA0  =00004880               1224  C_MOVEM_PATTERN EQU %0100100010000000
00001AA0  =0000FB80               1225  C_MOVEM_MASKING EQU %1111101110000000
00001AA0  =00000400               1226  C_MOVEM_DIR EQU     %0000010000000000
00001AA0  =00000040               1227  C_MOVEM_SIZE EQU    %0000000001000000
00001AA0                          1228  * C_MOVEM_REGISTER EQU
00001AA0                          1229  
00001AA0                          1230  
00001AA0                          1231  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001AA0                          1232  NEG:
00001AA0                          1233  * CONSTANT FOR NEG OPCODE
00001AA0  =00004400               1234  NEG_OPCODE EQU %0100010000000000
00001AA0  =0000FF00               1235  NEG_M      EQU %1111111100000000
00001AA0  =0000003F               1236  NEG_REG_M  EQU %0000000000111111
00001AA0  =000000C0               1237  NEG_SIZE_M EQU %0000000011000000
00001AA0  3401                    1238      MOVE.W D1, D2
00001AA2                          1239  * MASKING WITH NEG UNIQUE CODE
00001AA2  C47C FF00               1240      AND.W #NEG_M, D2
00001AA6  B47C 4400               1241      CMP.W #NEG_OPCODE, D2
00001AAA  6600 0056               1242      BNE NEG_END
00001AAE                          1243  
00001AAE                          1244  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001AAE  3401                    1245      MOVE.W D1, D2 
00001AB0  C43C 003F               1246      AND.B #NEG_REG_M, D2 
00001AB4  3F02                    1247      MOVE.W D2, -(SP)
00001AB6  4EB8 11AC               1248      JSR CHECK_SUPPORT_REGISTER
00001ABA  544F                    1249      ADDQ #2, SP 
00001ABC                          1250  * from print_register to see if it is unsupported register 
00001ABC  3439 00009000           1251      MOVE.W (RETURN_ADDRESS), D2 
00001AC2  0C42 0002               1252      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001AC6  6700 F580               1253      BEQ FINISH_OPCODE
00001ACA                          1254  
00001ACA  4EB9 00001F54           1255      JSR PRINT_NEG
00001AD0  3238 7006               1256      MOVE.W (OPCODE_ADDRESS), D1 
00001AD4  3401                    1257      MOVE.W D1, D2
00001AD6                          1258  * MASKING TO GET NEG SIZE
00001AD6  C47C 00C0               1259      AND.W #NEG_SIZE_M, D2
00001ADA  EC42                    1260      ASR.W #6, D2
00001ADC  1C02                    1261      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001ADE  1F06                    1262      MOVE.B D6, -(SP)
00001AE0  4EB8 113A               1263      JSR PRINT_DATA
00001AE4  548F                    1264      ADDQ.L #2, SP
00001AE6  4EB8 10B4               1265      JSR PRINT_TAB
00001AEA                          1266  
00001AEA  3238 7006               1267      MOVE.W (OPCODE_ADDRESS), D1     
00001AEE  3401                    1268      MOVE.W D1, D2
00001AF0                          1269  * MASKING TO GET MODE AND REGISTER
00001AF0  C47C 003F               1270      AND.W #NEG_REG_M, D2
00001AF4  3F02                    1271      MOVE.W D2, -(SP)
00001AF6  3F06                    1272      MOVE.W D6, -(SP)
00001AF8  4EB8 1252               1273      JSR PRINT_REGISTER
00001AFC  588F                    1274      ADDQ.L #$04, SP
00001AFE  6000 F548               1275      BRA FINISH_OPCODE
00001B02                          1276  NEG_END: 
00001B02  4E75                    1277      RTS
00001B04                          1278  
00001B04                          1279  BRA:
00001B04                          1280  * CONSTANT FOR BRA OPCODE
00001B04  =00006000               1281  BRA_OPCODE EQU %0110000000000000
00001B04  =0000FF00               1282  BRA_M      EQU %1111111100000000
00001B04  =000000FF               1283  BRA_DISP_M EQU %0000000011111111
00001B04  3401                    1284      MOVE.W D1, D2
00001B06                          1285  * MASKING WITH BRA UNIQUE CODE
00001B06  C47C FF00               1286      AND.W #BRA_M, D2
00001B0A  B47C 6000               1287      CMP.W #BRA_OPCODE, D2
00001B0E  6600 0030               1288      BNE BRA_END
00001B12                          1289  
00001B12                          1290  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B12  3401                    1291      MOVE.W D1, D2 
00001B14  C43C 00FF               1292      AND.B #BRA_DISP_M, D2 
00001B18  3F02                    1293      MOVE.W D2, -(SP)
00001B1A  4EB8 11AC               1294      JSR CHECK_SUPPORT_REGISTER
00001B1E  544F                    1295      ADDQ #2, SP 
00001B20                          1296  * from print_register to see if it is unsupported register 
00001B20  3439 00009000           1297      MOVE.W (RETURN_ADDRESS), D2 
00001B26  0C42 0002               1298      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B2A                          1299  
00001B2A  4EB9 00001F62           1300      JSR PRINT_BRA
00001B30  3238 7006               1301      MOVE.W (OPCODE_ADDRESS), D1 
00001B34  3401                    1302      MOVE.W D1, D2
00001B36                          1303  * MASKING TO GET DISPLACEMENT OF BRA
00001B36  C47C 00FF               1304      AND.W #BRA_DISP_M, D2
00001B3A  3F02                    1305      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B3C  6000 F50A               1306      BRA FINISH_OPCODE
00001B40                          1307  BRA_END:
00001B40  4E75                    1308      RTS
00001B42                          1309  
00001B42                          1310  OR:
00001B42                          1311  * CONSTANT FOR OR OPCODE
00001B42  =00008000               1312  OR_OPCODE EQU %1000000000000000
00001B42  =0000F000               1313  OR_M      EQU %1111000000000000
00001B42  =00000E00               1314  OR_DREG_M EQU %0000111000000000
00001B42  =000000C0               1315  OR_SIZE_M EQU %0000000011000000
00001B42  =0000003F               1316  OR_REG_M  EQU %0000000000111111
00001B42  =00000100               1317  OR_DIREC  EQU %0000000100000000
00001B42                          1318  
00001B42  3401                    1319      MOVE.W D1, D2
00001B44                          1320  * MASKING WITH OR UNIQUE CODE
00001B44  C47C F000               1321      AND.W #OR_M, D2
00001B48  0C42 8000               1322      CMPI.W #OR_OPCODE, D2
00001B4C  6600 00C0               1323      BNE OR_END
00001B50                          1324  
00001B50                          1325  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B50  3401                    1326      MOVE.W D1, D2 
00001B52  C43C 003F               1327      AND.B #OR_REG_M, D2 
00001B56  3F02                    1328      MOVE.W D2, -(SP)
00001B58  4EB8 11AC               1329      JSR CHECK_SUPPORT_REGISTER
00001B5C  544F                    1330      ADDQ #2, SP 
00001B5E                          1331  * from print_register to see if it is unsupported register 
00001B5E  3439 00009000           1332      MOVE.W (RETURN_ADDRESS), D2 
00001B64  0C42 0002               1333      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B68                          1334  
00001B68  4EB9 00001F70           1335      JSR PRINT_OR
00001B6E  3238 7006               1336      MOVE.W (OPCODE_ADDRESS), D1
00001B72  3401                    1337      MOVE.W D1, D2
00001B74                          1338  * MASKING TO GET SIZE OF OR
00001B74  C47C 00C0               1339      AND.W #OR_SIZE_M, D2
00001B78  EC42                    1340      ASR.W #6, D2
00001B7A  1C02                    1341      MOVE.B D2, D6
00001B7C  1F02                    1342      MOVE.B D2, -(SP)
00001B7E  4EB8 113A               1343      JSR PRINT_DATA
00001B82  548F                    1344      ADDQ.L #$02, SP 
00001B84  4EB8 10B4               1345      JSR PRINT_TAB
00001B88                          1346  * MASKING TO GET DIRECTION OF THIS OR
00001B88  3238 7006               1347      MOVE.W (OPCODE_ADDRESS), D1 
00001B8C  3401                    1348      MOVE.W D1, D2  
00001B8E  C47C 0100               1349      AND.W #OR_DIREC, D2 
00001B92  0C42 0100               1350      CMPI.W #OR_DIREC, D2 
00001B96  6600 003C               1351      BNE OR_TO_D  * DN V <EA> -> DN
00001B9A                          1352  
00001B9A                          1353  OR_TO_EA:  * DN V <EA> -> <EA>
00001B9A  3238 7006               1354      MOVE.W (OPCODE_ADDRESS), D1 
00001B9E  3401                    1355      MOVE.W D1, D2 
00001BA0  C47C 0E00               1356      AND.W #OR_DREG_M, D2 
00001BA4  E08A                    1357      LSR.L #8, D2 
00001BA6  E28A                    1358      LSR.L #1, D2 
00001BA8  843C 0000               1359      OR.B #%00000000, D2
00001BAC  3F02                    1360      MOVE.W D2, -(SP)
00001BAE  3F3C 0000               1361      MOVE.W #$0, -(SP)
00001BB2  4EB8 1252               1362      JSR PRINT_REGISTER 
00001BB6  5882                    1363      ADDQ.L #4, D2 
00001BB8  4EB8 10D2               1364      JSR PRINT_COMMA 
00001BBC                          1365      
00001BBC  3238 7006               1366      MOVE.W (OPCODE_ADDRESS), D1 
00001BC0  3401                    1367      MOVE.W D1, D2 
00001BC2  C43C 003F               1368      AND.B #OR_REG_M, D2 
00001BC6  3F02                    1369      MOVE.W D2, -(SP)
00001BC8  3F06                    1370      MOVE.W D6, -(SP)
00001BCA  4EB8 1252               1371      JSR PRINT_REGISTER
00001BCE  588F                    1372      ADDQ.L #4, SP 
00001BD0  6000 F476               1373      BRA FINISH_OPCODE
00001BD4                          1374  
00001BD4                          1375  OR_TO_D:   * <EA> V DN -> DN
00001BD4  3238 7006               1376      MOVE.W (OPCODE_ADDRESS), D1 
00001BD8  3401                    1377      MOVE.W D1, D2 
00001BDA                          1378  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BDA  C43C 003F               1379      AND.B #OR_REG_M, D2 
00001BDE  3F02                    1380      MOVE.W D2, -(SP)
00001BE0  3F06                    1381      MOVE.W D6, -(SP)
00001BE2  4EB8 1252               1382      JSR PRINT_REGISTER
00001BE6  588F                    1383      ADDQ.L #4, SP 
00001BE8  4EB8 10D2               1384      JSR PRINT_COMMA 
00001BEC                          1385  * MASKING TO GET THE DATA REGISTER 
00001BEC  3238 7006               1386      MOVE.W (OPCODE_ADDRESS), D1 
00001BF0  3401                    1387      MOVE.W D1, D2 
00001BF2  C47C 0E00               1388      AND.W #OR_DREG_M, D2 
00001BF6  E04A                    1389      LSR.W #8, D2 
00001BF8  E24A                    1390      LSR.W #1, D2 
00001BFA                          1391      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BFA  843C 0000               1392      OR.B #%00000000, D2 
00001BFE  3F02                    1393      MOVE.W D2, -(SP)
00001C00  3F3C 0000               1394      MOVE.W #$0, -(SP)
00001C04  4EB8 1252               1395      JSR PRINT_REGISTER
00001C08  588F                    1396      ADDQ.L #4, SP 
00001C0A  6000 F43C               1397      BRA FINISH_OPCODE
00001C0E                          1398  OR_END:
00001C0E  4E75                    1399      RTS
00001C10                          1400  
00001C10                          1401  ORI:
00001C10                          1402  * CONSTANT FOR ORI OPCODE
00001C10  =00000000               1403  ORI_OPCODE EQU %0000000000000000
00001C10  =0000FF00               1404  ORI_M      EQU %1111111100000000
00001C10  =0000003F               1405  ORI_REG_M  EQU %0000000000111111
00001C10  =000000C0               1406  ORI_SIZE_M EQU %0000000011000000
00001C10  3401                    1407      MOVE.W D1, D2
00001C12                          1408  * MASKING WITH ORI UNIQUE CODE
00001C12  C47C FF00               1409      AND.W #ORI_M, D2
00001C16  B47C 0000               1410      CMP.W #ORI_OPCODE, D2
00001C1A  6600 0048               1411      BNE ORI_END
00001C1E                          1412  
00001C1E                          1413  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C1E  3401                    1414      MOVE.W D1, D2 
00001C20  C43C 003F               1415      AND.B #ORI_REG_M, D2 
00001C24  3F02                    1416      MOVE.W D2, -(SP)
00001C26  4EB8 11AC               1417      JSR CHECK_SUPPORT_REGISTER
00001C2A  544F                    1418      ADDQ #2, SP 
00001C2C                          1419  * from print_register to see if it is unsupported register 
00001C2C  3439 00009000           1420      MOVE.W (RETURN_ADDRESS), D2 
00001C32  0C42 0002               1421      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C36  6700 F410               1422      BEQ FINISH_OPCODE
00001C3A                          1423  
00001C3A  4EB9 00001F7E           1424      JSR PRINT_ORI
00001C40  3238 7006               1425      MOVE.W (OPCODE_ADDRESS), D1
00001C44  3401                    1426      MOVE.W D1, D2
00001C46                          1427  * MASKING TO GET SIZE OF ORI
00001C46  C47C 00C0               1428      AND.W #ORI_SIZE_M, D2 
00001C4A  EC42                    1429      ASR.W #6, D2
00001C4C  1C02                    1430      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C4E  1F06                    1431      MOVE.B D6, -(SP)
00001C50  4EB8 113A               1432      JSR PRINT_DATA
00001C54  548F                    1433      ADDQ.L #$02, SP
00001C56  4EB8 10B4               1434      JSR PRINT_TAB
00001C5A                          1435   
00001C5A  3238 7006               1436      MOVE.W (OPCODE_ADDRESS), D1     
00001C5E  3401                    1437      MOVE.W D1, D2
00001C60                          1438      *------------------------------------
00001C60                          1439      * AND.W #ORI_REG_M, D2 
00001C60                          1440      * LSR.L #8, D2 
00001C60                          1441      * LSR.L #1, D2 
00001C60                          1442      * OR.B #%00000000, D2
00001C60                          1443      * MOVE.W D2, -(SP)
00001C60                          1444      * MOVE.W #$0, -(SP)
00001C60                          1445      * JSR PRINT_REGISTER 
00001C60                          1446      * ADDQ.L #4, D2 
00001C60                          1447      * JSR PRINT_COMMA 
00001C60                          1448      
00001C60                          1449      * AND.B #ORI_REG_M, D2 
00001C60                          1450      * MOVE.W D2, -(SP)
00001C60                          1451      * MOVE.W D6, -(SP)
00001C60                          1452      * JSR PRINT_REGISTER
00001C60                          1453      * ADDQ.L #4, SP 
00001C60                          1454      *------------------------------------
00001C60  6000 F3E6               1455      BRA FINISH_OPCODE
00001C64                          1456  ORI_END:
00001C64  4E75                    1457      RTS
00001C66                          1458  
00001C66                          1459  EOR:
00001C66                          1460  * CONSTANT FEOR EOR OPCODE
00001C66  =0000B100               1461  EOR_OPCODE EQU %1011000100000000
00001C66  =0000F100               1462  EOR_M      EQU %1111000100000000
00001C66  =00000E00               1463  EOR_DREG_M EQU %0000111000000000
00001C66  =000000C0               1464  EOR_SIZE_M EQU %0000000011000000
00001C66  =0000003F               1465  EOR_REG_M  EQU %0000000000111111
00001C66  =00000100               1466  EOR_DIREC  EQU %0000000100000000
00001C66                          1467  
00001C66  3401                    1468      MOVE.W D1, D2
00001C68                          1469  * MASKING WITH EOR UNIQUE CODE
00001C68  C47C F100               1470      AND.W #EOR_M, D2
00001C6C  B47C B100               1471      CMP.W #EOR_OPCODE, D2
00001C70  6600 0074               1472      BNE EOR_END
00001C74                          1473  
00001C74                          1474  * CHECK TO MAKE SURE WE SUPPEORT THE EA
00001C74  3401                    1475      MOVE.W D1, D2 
00001C76  C43C 003F               1476      AND.B #EOR_REG_M, D2 
00001C7A  3F02                    1477      MOVE.W D2, -(SP)
00001C7C  4EB8 11AC               1478      JSR CHECK_SUPPORT_REGISTER
00001C80  544F                    1479      ADDQ #2, SP 
00001C82                          1480  * from print_register to see if it is unsuppEorted register 
00001C82  3439 00009000           1481      MOVE.W (RETURN_ADDRESS), D2 
00001C88  0C42 0002               1482      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C8C                          1483  
00001C8C  4EB9 00001F8C           1484      JSR PRINT_EOR
00001C92  3238 7006               1485      MOVE.W (OPCODE_ADDRESS), D1
00001C96  3401                    1486      MOVE.W D1, D2
00001C98                          1487  * MASKING TO GET SIZE OF EOR
00001C98  C47C 00C0               1488      AND.W #EOR_SIZE_M, D2
00001C9C  EC42                    1489      ASR.W #6, D2
00001C9E  1C02                    1490      MOVE.B D2, D6
00001CA0  1F02                    1491      MOVE.B D2, -(SP)
00001CA2  4EB8 113A               1492      JSR PRINT_DATA
00001CA6  548F                    1493      ADDQ.L #$02, SP 
00001CA8  4EB8 10B4               1494      JSR PRINT_TAB
00001CAC                          1495  
00001CAC                          1496  * <EA> EOR DN -> <EA>
00001CAC  3238 7006               1497      MOVE.W (OPCODE_ADDRESS), D1 
00001CB0  3401                    1498      MOVE.W D1, D2 
00001CB2  C47C 0E00               1499      AND.W #EOR_DREG_M, D2 
00001CB6  E08A                    1500      LSR.L #8, D2 
00001CB8  E28A                    1501      LSR.L #1, D2 
00001CBA  843C 0000               1502      OR.B #%00000000, D2
00001CBE  3F02                    1503      MOVE.W D2, -(SP)
00001CC0  3F3C 0000               1504      MOVE.W #$0, -(SP)
00001CC4  4EB8 1252               1505      JSR PRINT_REGISTER 
00001CC8  5882                    1506      ADDQ.L #4, D2 
00001CCA  4EB8 10D2               1507      JSR PRINT_COMMA 
00001CCE                          1508      
00001CCE  3238 7006               1509      MOVE.W (OPCODE_ADDRESS), D1 
00001CD2  3401                    1510      MOVE.W D1, D2 
00001CD4  C43C 003F               1511      AND.B #EOR_REG_M, D2 
00001CD8  3F02                    1512      MOVE.W D2, -(SP)
00001CDA  3F06                    1513      MOVE.W D6, -(SP)
00001CDC  4EB8 1252               1514      JSR PRINT_REGISTER
00001CE0  588F                    1515      ADDQ.L #4, SP 
00001CE2  6000 F364               1516      BRA FINISH_OPCODE
00001CE6                          1517  
00001CE6                          1518  EOR_END:
00001CE6  4E75                    1519      RTS
00001CE8                          1520  
00001CE8                          1521  SUB:
00001CE8                          1522  * CONSTANT FOR SUB OPCODE
00001CE8  =00009000               1523  SUB_OPCODE EQU %1001000000000000
00001CE8  =0000F000               1524  SUB_M      EQU %1111000000000000
00001CE8  =00000E00               1525  SUB_DREG_M EQU %0000111000000000
00001CE8  =000000C0               1526  SUB_SIZE_M EQU %0000000011000000
00001CE8  =0000003F               1527  SUB_REG_M  EQU %0000000000111111
00001CE8  =00000100               1528  SUB_DIREC  EQU %0000000100000000
00001CE8                          1529  
00001CE8  3401                    1530      MOVE.W D1, D2
00001CEA                          1531  * MASKING WITH SUB UNIQUE CODE
00001CEA  C47C F000               1532      AND.W #SUB_M, D2
00001CEE  0C42 9000               1533      CMPI.W #SUB_OPCODE, D2
00001CF2  6600 00C0               1534      BNE SUB_END
00001CF6                          1535  
00001CF6                          1536  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001CF6  3401                    1537      MOVE.W D1, D2 
00001CF8  C43C 003F               1538      AND.B #SUB_REG_M, D2 
00001CFC  3F02                    1539      MOVE.W D2, -(SP)
00001CFE  4EB8 11AC               1540      JSR CHECK_SUPPORT_REGISTER
00001D02  544F                    1541      ADDQ #2, SP 
00001D04                          1542  * from print_register to see if it is unsupported register 
00001D04  3439 00009000           1543      MOVE.W (RETURN_ADDRESS), D2 
00001D0A  0C42 0002               1544      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001D0E                          1545  
00001D0E  4EB9 00001FF6           1546      JSR PRINT_SUB
00001D14  3238 7006               1547      MOVE.W (OPCODE_ADDRESS), D1
00001D18  3401                    1548      MOVE.W D1, D2
00001D1A                          1549  * MASKING TO GET SIZE OF SUB
00001D1A  C47C 00C0               1550      AND.W #SUB_SIZE_M, D2
00001D1E  EC42                    1551      ASR.W #6, D2
00001D20  1C02                    1552      MOVE.B D2, D6
00001D22  1F02                    1553      MOVE.B D2, -(SP)
00001D24  4EB8 113A               1554      JSR PRINT_DATA
00001D28  548F                    1555      ADDQ.L #$02, SP 
00001D2A  4EB8 10B4               1556      JSR PRINT_TAB
00001D2E                          1557  * MASKING TO GET DIRECTION OF THIS SUB
00001D2E  3238 7006               1558      MOVE.W (OPCODE_ADDRESS), D1 
00001D32  3401                    1559      MOVE.W D1, D2  
00001D34  C47C 0100               1560      AND.W #SUB_DIREC, D2 
00001D38  0C42 0100               1561      CMPI.W #SUB_DIREC, D2 
00001D3C  6600 003C               1562      BNE SUB_TO_D  * DN - <EA> -> DN
00001D40                          1563  
00001D40                          1564  SUB_TO_EA:  * <EA> - DN -> <EA>
00001D40  3238 7006               1565      MOVE.W (OPCODE_ADDRESS), D1 
00001D44  3401                    1566      MOVE.W D1, D2 
00001D46  C47C 0E00               1567      AND.W #SUB_DREG_M, D2 
00001D4A  E08A                    1568      LSR.L #8, D2 
00001D4C  E28A                    1569      LSR.L #1, D2 
00001D4E  843C 0000               1570      OR.B #%00000000, D2
00001D52  3F02                    1571      MOVE.W D2, -(SP)
00001D54  3F3C 0000               1572      MOVE.W #$0, -(SP)
00001D58  4EB8 1252               1573      JSR PRINT_REGISTER 
00001D5C  5882                    1574      ADDQ.L #4, D2 
00001D5E  4EB8 10D2               1575      JSR PRINT_COMMA 
00001D62                          1576      
00001D62  3238 7006               1577      MOVE.W (OPCODE_ADDRESS), D1 
00001D66  3401                    1578      MOVE.W D1, D2 
00001D68  C43C 003F               1579      AND.B #SUB_REG_M, D2 
00001D6C  3F02                    1580      MOVE.W D2, -(SP)
00001D6E  3F06                    1581      MOVE.W D6, -(SP)
00001D70  4EB8 1252               1582      JSR PRINT_REGISTER
00001D74  588F                    1583      ADDQ.L #4, SP 
00001D76  6000 F2D0               1584      BRA FINISH_OPCODE
00001D7A                          1585  
00001D7A                          1586  SUB_TO_D:   * DN - <EA> -> DN
00001D7A  3238 7006               1587      MOVE.W (OPCODE_ADDRESS), D1 
00001D7E  3401                    1588      MOVE.W D1, D2 
00001D80                          1589  * MASKING TO GET THE EFFECTIVE ADDRESS
00001D80  C43C 003F               1590      AND.B #SUB_REG_M, D2 
00001D84  3F02                    1591      MOVE.W D2, -(SP)
00001D86  3F06                    1592      MOVE.W D6, -(SP)
00001D88  4EB8 1252               1593      JSR PRINT_REGISTER
00001D8C  588F                    1594      ADDQ.L #4, SP 
00001D8E  4EB8 10D2               1595      JSR PRINT_COMMA 
00001D92                          1596  * MASKING TO GET THE DATA REGISTER 
00001D92  3238 7006               1597      MOVE.W (OPCODE_ADDRESS), D1 
00001D96  3401                    1598      MOVE.W D1, D2 
00001D98  C47C 0E00               1599      AND.W #SUB_DREG_M, D2 
00001D9C  E04A                    1600      LSR.W #8, D2 
00001D9E  E24A                    1601      LSR.W #1, D2 
00001DA0                          1602  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001DA0  843C 0000               1603      OR.B #%00000000, D2 
00001DA4  3F02                    1604      MOVE.W D2, -(SP)
00001DA6  3F3C 0000               1605      MOVE.W #$0, -(SP)
00001DAA  4EB8 1252               1606      JSR PRINT_REGISTER
00001DAE  588F                    1607      ADDQ.L #4, SP 
00001DB0  6000 F296               1608      BRA FINISH_OPCODE
00001DB4                          1609  SUB_END:
00001DB4  4E75                    1610      RTS
00001DB6                          1611  
00001DB6                          1612  DIVS:
00001DB6                          1613  * CONSTANT FOR DIVS OPCODE
00001DB6  =000081C0               1614  DIVS_OPCODE EQU %1000000111000000
00001DB6  =0000F1C0               1615  DIVS_M      EQU %1111000111000000
00001DB6  =00000E00               1616  DIVS_DREG_M EQU %0000111000000000
00001DB6  =0000003F               1617  DIVS_REG_M  EQU %0000000000111111
00001DB6                          1618  
00001DB6  3401                    1619      MOVE.W D1, D2
00001DB8                          1620  * MASKING WITH DIVS UNIQUE CODE
00001DB8  C47C F1C0               1621      AND.W #DIVS_M, D2
00001DBC  0C42 81C0               1622      CMPI.W #DIVS_OPCODE, D2
00001DC0  6600 006E               1623      BNE DIVS_END
00001DC4                          1624  
00001DC4                          1625  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001DC4  3401                    1626      MOVE.W D1, D2 
00001DC6  C43C 003F               1627      AND.B #DIVS_REG_M, D2 
00001DCA  3F02                    1628      MOVE.W D2, -(SP)
00001DCC  4EB8 11AC               1629      JSR CHECK_SUPPORT_REGISTER
00001DD0  544F                    1630      ADDQ #2, SP 
00001DD2                          1631  * from print_register to see if it is unsupported register 
00001DD2  3439 00009000           1632      MOVE.W (RETURN_ADDRESS), D2 
00001DD8  0C42 0002               1633      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001DDC                          1634  
00001DDC  4EB9 00002004           1635      JSR PRINT_DIVS
00001DE2  3238 7006               1636      MOVE.W (OPCODE_ADDRESS), D1
00001DE6                          1637  * GET SIZE OF DIVS
00001DE6  1C3C 0001               1638      MOVE.B #$01, D6
00001DEA  1F06                    1639      MOVE.B D6, -(SP)
00001DEC  4EB8 113A               1640      JSR PRINT_DATA
00001DF0  548F                    1641      ADDQ.L #$02, SP 
00001DF2  4EB8 10B4               1642      JSR PRINT_TAB
00001DF6                          1643  
00001DF6                          1644  * DN - <EA> -> DN
00001DF6  3238 7006               1645      MOVE.W (OPCODE_ADDRESS), D1 
00001DFA  3401                    1646      MOVE.W D1, D2 
00001DFC                          1647  * MASKING TO GET THE EFFECTIVE ADDRESS
00001DFC  C43C 003F               1648      AND.B #DIVS_REG_M, D2 
00001E00  3F02                    1649      MOVE.W D2, -(SP)
00001E02  3F06                    1650      MOVE.W D6, -(SP)
00001E04  4EB8 1252               1651      JSR PRINT_REGISTER
00001E08  588F                    1652      ADDQ.L #4, SP 
00001E0A  4EB8 10D2               1653      JSR PRINT_COMMA 
00001E0E                          1654  * MASKING TO GET THE DATA REGISTER 
00001E0E  3238 7006               1655      MOVE.W (OPCODE_ADDRESS), D1 
00001E12  3401                    1656      MOVE.W D1, D2 
00001E14  C47C 0E00               1657      AND.W #DIVS_DREG_M, D2 
00001E18  E04A                    1658      LSR.W #8, D2 
00001E1A  E24A                    1659      LSR.W #1, D2 
00001E1C                          1660  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001E1C  843C 0000               1661      OR.B #%00000000, D2 
00001E20  3F02                    1662      MOVE.W D2, -(SP)
00001E22  3F3C 0000               1663      MOVE.W #$0, -(SP)
00001E26  4EB8 1252               1664      JSR PRINT_REGISTER
00001E2A  588F                    1665      ADDQ.L #4, SP 
00001E2C  6000 F21A               1666      BRA FINISH_OPCODE
00001E30                          1667  DIVS_END:
00001E30  4E75                    1668      RTS    
00001E32                          1669  
00001E32                          1670  MULS:
00001E32                          1671  * CONSTANT FOR MULS OPCODE
00001E32  =0000C1C0               1672  MULS_OPCODE EQU %1100000111000000
00001E32  =0000F1C0               1673  MULS_M      EQU %1111000111000000
00001E32  =00000E00               1674  MULS_DREG_M EQU %0000111000000000
00001E32  =0000003F               1675  MULS_REG_M  EQU %0000000000111111
00001E32                          1676  
00001E32  3401                    1677      MOVE.W D1, D2
00001E34                          1678  * MASKING WITH MULS UNIQUE CODE
00001E34  C47C F1C0               1679      AND.W #MULS_M, D2
00001E38  0C42 C1C0               1680      CMPI.W #MULS_OPCODE, D2
00001E3C  6600 006E               1681      BNE MULS_END
00001E40                          1682  
00001E40                          1683  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001E40  3401                    1684      MOVE.W D1, D2 
00001E42  C43C 003F               1685      AND.B #MULS_REG_M, D2 
00001E46  3F02                    1686      MOVE.W D2, -(SP)
00001E48  4EB8 11AC               1687      JSR CHECK_SUPPORT_REGISTER
00001E4C  544F                    1688      ADDQ #2, SP 
00001E4E                          1689  * from print_register to see if it is unsupported register 
00001E4E  3439 00009000           1690      MOVE.W (RETURN_ADDRESS), D2 
00001E54  0C42 0002               1691      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001E58                          1692  
00001E58  4EB9 00002012           1693      JSR PRINT_MULS
00001E5E  3238 7006               1694      MOVE.W (OPCODE_ADDRESS), D1
00001E62                          1695  * GET SIZE OF MULS
00001E62  1C3C 0001               1696      MOVE.B #$01, D6
00001E66  1F06                    1697      MOVE.B D6, -(SP)
00001E68  4EB8 113A               1698      JSR PRINT_DATA
00001E6C  548F                    1699      ADDQ.L #$02, SP 
00001E6E  4EB8 10B4               1700      JSR PRINT_TAB
00001E72                          1701  
00001E72                          1702  * DN - <EA> -> DN
00001E72  3238 7006               1703      MOVE.W (OPCODE_ADDRESS), D1 
00001E76  3401                    1704      MOVE.W D1, D2 
00001E78                          1705  * MASKING TO GET THE EFFECTIVE ADDRESS
00001E78  C43C 003F               1706      AND.B #MULS_REG_M, D2 
00001E7C  3F02                    1707      MOVE.W D2, -(SP)
00001E7E  3F06                    1708      MOVE.W D6, -(SP)
00001E80  4EB8 1252               1709      JSR PRINT_REGISTER
00001E84  588F                    1710      ADDQ.L #4, SP 
00001E86  4EB8 10D2               1711      JSR PRINT_COMMA 
00001E8A                          1712  * MASKING TO GET THE DATA REGISTER 
00001E8A  3238 7006               1713      MOVE.W (OPCODE_ADDRESS), D1 
00001E8E  3401                    1714      MOVE.W D1, D2 
00001E90  C47C 0E00               1715      AND.W #MULS_DREG_M, D2 
00001E94  E04A                    1716      LSR.W #8, D2 
00001E96  E24A                    1717      LSR.W #1, D2 
00001E98                          1718  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001E98  843C 0000               1719      OR.B #%00000000, D2 
00001E9C  3F02                    1720      MOVE.W D2, -(SP)
00001E9E  3F3C 0000               1721      MOVE.W #$0, -(SP)
00001EA2  4EB8 1252               1722      JSR PRINT_REGISTER
00001EA6  588F                    1723      ADDQ.L #4, SP 
00001EA8  6000 F19E               1724      BRA FINISH_OPCODE
00001EAC                          1725  MULS_END:
00001EAC  4E75                    1726      RTS  
00001EAE                          1727  
00001EAE                          1728  CMP:
00001EAE                          1729  * CONSTANT FOR CMP OPCODE
00001EAE  =0000B000               1730  CMP_OPCODE EQU %1011000000000000
00001EAE  =0000F100               1731  CMP_M      EQU %1111000100000000
00001EAE  =00000E00               1732  CMP_DREG_M EQU %0000111000000000
00001EAE  =000000C0               1733  CMP_SIZE_M EQU %0000000011000000
00001EAE  =0000003F               1734  CMP_REG_M  EQU %0000000000111111
00001EAE                          1735  
00001EAE  3401                    1736      MOVE.W D1, D2
00001EB0                          1737  * MASKING WITH CMP UNIQUE CODE
00001EB0  C47C F100               1738      AND.W #CMP_M, D2
00001EB4  0C42 B000               1739      CMPI.W #CMP_OPCODE, D2
00001EB8  6600 0074               1740      BNE CMP_END
00001EBC                          1741  
00001EBC                          1742  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001EBC  3401                    1743      MOVE.W D1, D2 
00001EBE  C43C 003F               1744      AND.B #CMP_REG_M, D2 
00001EC2  3F02                    1745      MOVE.W D2, -(SP)
00001EC4  4EB8 11AC               1746      JSR CHECK_SUPPORT_REGISTER
00001EC8  544F                    1747      ADDQ #2, SP 
00001ECA                          1748  * from print_register to see if it is unsupported register 
00001ECA  3439 00009000           1749      MOVE.W (RETURN_ADDRESS), D2 
00001ED0  0C42 0002               1750      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001ED4                          1751  
00001ED4  4EB9 0000203C           1752      JSR PRINT_CMP
00001EDA  3238 7006               1753      MOVE.W (OPCODE_ADDRESS), D1
00001EDE  3401                    1754      MOVE.W D1, D2
00001EE0                          1755  * MASKING TO GET SIZE OF SUB
00001EE0  C47C 00C0               1756      AND.W #SUB_SIZE_M, D2
00001EE4  EC42                    1757      ASR.W #6, D2
00001EE6  1C02                    1758      MOVE.B D2, D6
00001EE8  1F02                    1759      MOVE.B D2, -(SP)
00001EEA  4EB8 113A               1760      JSR PRINT_DATA
00001EEE  548F                    1761      ADDQ.L #$02, SP 
00001EF0  4EB8 10B4               1762      JSR PRINT_TAB
00001EF4                          1763  
00001EF4                          1764  * DN - <EA> -> DN
00001EF4  3238 7006               1765      MOVE.W (OPCODE_ADDRESS), D1 
00001EF8  3401                    1766      MOVE.W D1, D2 
00001EFA                          1767  * MASKING TO GET THE EFFECTIVE ADDRESS
00001EFA  C43C 003F               1768      AND.B #CMP_REG_M, D2 
00001EFE  3F02                    1769      MOVE.W D2, -(SP)
00001F00  3F06                    1770      MOVE.W D6, -(SP)
00001F02  4EB8 1252               1771      JSR PRINT_REGISTER
00001F06  588F                    1772      ADDQ.L #4, SP 
00001F08  4EB8 10D2               1773      JSR PRINT_COMMA 
00001F0C                          1774  * MASKING TO GET THE DATA REGISTER 
00001F0C  3238 7006               1775      MOVE.W (OPCODE_ADDRESS), D1 
00001F10  3401                    1776      MOVE.W D1, D2 
00001F12  C47C 0E00               1777      AND.W #CMP_DREG_M, D2 
00001F16  E04A                    1778      LSR.W #8, D2 
00001F18  E24A                    1779      LSR.W #1, D2 
00001F1A                          1780  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001F1A  843C 0000               1781      OR.B #%00000000, D2 
00001F1E  3F02                    1782      MOVE.W D2, -(SP)
00001F20  3F3C 0000               1783      MOVE.W #$0, -(SP)
00001F24  4EB8 1252               1784      JSR PRINT_REGISTER
00001F28  588F                    1785      ADDQ.L #4, SP 
00001F2A  6000 F11C               1786      BRA FINISH_OPCODE
00001F2E                          1787  CMP_END:
00001F2E  4E75                    1788      RTS  
00001F30                          1789  
00001F30                          1790  * ROR:
00001F30                          1791  * * CONSTANT FOR ROR OPCODE
00001F30                          1792  * ROR_OPCODE EQU %
00001F30                          1793  * ROR_M      EQU %
00001F30                          1794  * ROR_SIZE_M EQU %
00001F30                          1795  *     CLR.W D2
00001F30                          1796  *     MOVE.W D1, D2
00001F30                          1797  * * MASKING WITH ROR UNIQUE CODE
00001F30                          1798  *     AND.W #ROR_M, D2
00001F30                          1799  *     CMP.W #ROR_OPCODE, D2
00001F30                          1800  *     BNE ROR_END
00001F30                          1801  *     JSR PRINT_ROR
00001F30                          1802  *     MOVE.W D1, D2
00001F30                          1803  *     MOVE.W D1, D3
00001F30                          1804  * * MASKING TO GET SIZE OF ROR
00001F30                          1805  *     CMP.W #ROR_SIZE_M, D2 
00001F30                          1806  * ROR_END:
00001F30                          1807  *     RTS
00001F30                          1808  
00001F30                          1809  * ROL:
00001F30                          1810  * * CONSTANT FROR ROL OPCODE
00001F30                          1811  * ROL_OPCODE EQU %
00001F30                          1812  * ROL_M      EQU %
00001F30                          1813  * ROL_SIZE_M EQU %
00001F30                          1814  *     CLR.W D2
00001F30                          1815  *     MOVE.W D1, D2
00001F30                          1816  * * MASKING WITH ROL UNIQUE CODE
00001F30                          1817  *     AND.W #ROL_M, D2
00001F30                          1818  *     CMP.W #ROL_OPCODE, D2
00001F30                          1819  *     BNE ROL_END
00001F30                          1820  *     JSR PRINT_ROL
00001F30                          1821  *     MOVE.W D1, D2
00001F30                          1822  *     MOVE.W D1, D3
00001F30                          1823  * * MASKING TO GET SIZE OF ROL
00001F30                          1824  *     CMP.W #ROL_SIZE_M, D2 
00001F30                          1825  * ROL_END:
00001F30                          1826  *     RTS
00001F30                          1827  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001F30                          1828  
00001F30                          1829  
00001F30                          1830  PRINT_RTS:
00001F30  43F9 00002058           1831      LEA P_RTS, A1
00001F36  103C 000E               1832      MOVE.B #14, D0
00001F3A  4E4F                    1833      TRAP #15
00001F3C  4EB8 10B4               1834      JSR PRINT_TAB
00001F40  6000 F106               1835      BRA FINISH_OPCODE
00001F44                          1836  PRINT_NOP:
00001F44  43F9 0000205C           1837      LEA P_NOP, A1
00001F4A  103C 000E               1838      MOVE.B #14, D0
00001F4E  4E4F                    1839      TRAP #15
00001F50  6000 F0F6               1840      BRA FINISH_OPCODE
00001F54                          1841  PRINT_NEG:
00001F54  43F9 00002098           1842      LEA P_NEG, A1
00001F5A  103C 000E               1843      MOVE.B #14, D0
00001F5E  4E4F                    1844      TRAP #15
00001F60  4E75                    1845      RTS 
00001F62                          1846  PRINT_BRA:
00001F62  43F9 000020D6           1847      LEA P_BRA, A1
00001F68  103C 000E               1848      MOVE.B #14, D0
00001F6C  4E4F                    1849      TRAP #15
00001F6E  4E75                    1850      RTS 
00001F70                          1851  PRINT_OR:
00001F70  43F9 00002091           1852      LEA P_OR, A1
00001F76  103C 000E               1853      MOVE.B #14, D0
00001F7A  4E4F                    1854      TRAP #15
00001F7C  4E75                    1855      RTS 
00001F7E                          1856  PRINT_ORI:
00001F7E  43F9 00002094           1857      LEA P_ORI, A1
00001F84  103C 000E               1858      MOVE.B #14, D0
00001F88  4E4F                    1859      TRAP #15
00001F8A  4E75                    1860      RTS
00001F8C                          1861  PRINT_EOR:
00001F8C  43F9 0000209C           1862      LEA P_EOR, A1
00001F92  103C 000E               1863      MOVE.B #14, D0
00001F96  4E4F                    1864      TRAP #15
00001F98  4E75                    1865      RTS 
00001F9A                          1866  PRINT_ROL:
00001F9A  43F9 000020B0           1867      LEA P_ROL, A1
00001FA0  103C 000E               1868      MOVE.B #14, D0
00001FA4  4E4F                    1869      TRAP #15
00001FA6  4E75                    1870      RTS 
00001FA8                          1871  PRINT_ROR:
00001FA8  43F9 000020B4           1872      LEA P_ROR, A1
00001FAE  103C 000E               1873      MOVE.B #14, D0
00001FB2  4E4F                    1874      TRAP #15
00001FB4  4E75                    1875      RTS 
00001FB6                          1876  PRINT_JSR:
00001FB6  43F9 000020DA           1877      LEA P_JSR, A1
00001FBC  103C 000E               1878      MOVE.B #14, D0
00001FC0  4E4F                    1879      TRAP #15
00001FC2  4EB8 10B4               1880      JSR PRINT_TAB
00001FC6  4E75                    1881      RTS 
00001FC8                          1882  PRINT_LEA:
00001FC8  43F9 0000208D           1883      LEA P_LEA, A1
00001FCE  103C 000E               1884      MOVE.B #14, D0
00001FD2  4E4F                    1885      TRAP #15
00001FD4  4EB8 10B4               1886      JSR PRINT_TAB
00001FD8  4E75                    1887      RTS 
00001FDA                          1888  PRINT_ADDA: 
00001FDA  43F9 00002075           1889      LEA P_ADDA, A1 
00001FE0  103C 000E               1890      MOVE.B #14, D0
00001FE4  4E4F                    1891      TRAP #15 
00001FE6  4E75                    1892      RTS
00001FE8                          1893  PRINT_ADD:
00001FE8  43F9 00002071           1894      LEA P_ADD, A1 
00001FEE  103C 000E               1895      MOVE.B #14, D0 
00001FF2  4E4F                    1896      TRAP #15
00001FF4  4E75                    1897      RTS
00001FF6                          1898  PRINT_SUB:
00001FF6  43F9 0000207A           1899      LEA P_SUB, A1 
00001FFC  103C 000E               1900      MOVE.B #14, D0 
00002000  4E4F                    1901      TRAP #15
00002002  4E75                    1902      RTS
00002004                          1903  PRINT_DIVS:
00002004  43F9 00002088           1904      LEA P_DIVS, A1 
0000200A  103C 000E               1905      MOVE.B #14, D0 
0000200E  4E4F                    1906      TRAP #15
00002010  4E75                    1907      RTS
00002012                          1908  PRINT_MULS:
00002012  43F9 00002083           1909      LEA P_MULS, A1 
00002018  103C 000E               1910      MOVE.B #14, D0 
0000201C  4E4F                    1911      TRAP #15
0000201E  4E75                    1912      RTS
00002020                          1913  PRINT_MOVEA: 
00002020  43F9 00002065           1914      LEA P_MOVEA, A1 
00002026  103C 000E               1915      MOVE.B #14, D0 
0000202A  4E4F                    1916      TRAP #15 
0000202C  4E75                    1917      RTS 
0000202E                          1918  PRINT_MOVE: 
0000202E  43F9 00002060           1919      LEA P_MOVE, A1 
00002034  103C 000E               1920      MOVE.B #14, D0 
00002038  4E4F                    1921      TRAP #15 
0000203A  4E75                    1922      RTS 
0000203C                          1923  PRINT_CMP: 
0000203C  43F9 000020BD           1924      LEA P_CMP, A1 
00002042  103C 000E               1925      MOVE.B #14, D0 
00002046  4E4F                    1926      TRAP #15 
00002048  4E75                    1927      RTS 
0000204A                          1928  PRINT_UNSUPPORTED: 
0000204A  43F9 000020DE           1929      LEA P_DATA, A1 
00002050  103C 000E               1930      MOVE.B #14, D0 
00002054  4E4F                    1931      TRAP #15 
00002056  4E75                    1932      RTS 
00002058                          1933  
00002058                          1934  
00002058                          1935  
00002058                          1936  
00002058                          1937  
00002058                          1938  
00002058                          1939  
00002058                          1940  
00002058                          1941  
00002058= 52 54 53 00             1942  P_RTS DC.B 'RTS',0          *-----------------DONE-----------------*
0000205C= 4E 4F 50 00             1943  P_NOP DC.B 'NOP',0          *-----------------DONE-----------------*
00002060= 4D 4F 56 45 00          1944  P_MOVE DC.B 'MOVE',0        *-----------------DONE-----------------*
00002065= 4D 4F 56 45 41 00       1945  P_MOVEA DC.B 'MOVEA', 0     *-----------------DONE-----------------*
0000206B= 4D 4F 56 45 4D 00       1946  P_MOVEM DC.B 'MOVEM', 0
00002071= 41 44 44 00             1947  P_ADD DC.B 'ADD', 0         *-----------------DONE-----------------*
00002075= 41 44 44 41 00          1948  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
0000207A= 53 55 42 00             1949  P_SUB DC.B 'SUB', 0         *-----------------DONE-----------------*
0000207E= 53 55 42 51 00          1950  P_SUBQ DC.B 'SUBQ',0
00002083= 4D 55 4C 53 00          1951  P_MULS DC.B 'MULS',0        *-----------------DONE-----------------*
00002088= 44 49 56 53 00          1952  P_DIVS DC.B 'DIVS',0        *-----------------DONE-----------------*
0000208D= 4C 45 41 00             1953  P_LEA DC.B 'LEA',0          *-----------------DONE-----------------*
00002091= 4F 52 00                1954  P_OR DC.B 'OR',0            *-----------------DONE-----------------*
00002094= 4F 52 49 00             1955  P_ORI DC.B 'ORI', 0         *------------IN PROGRESS---------------*
00002098= 4E 45 47 00             1956  P_NEG DC.B 'NEG', 0         *-----------------DONE-----------------*
0000209C= 45 4F 52 00             1957  P_EOR DC.B 'EOR', 0         *-----------------DONE-----------------*
000020A0= 4C 53 52 00             1958  P_LSR DC.B 'LSR',0
000020A4= 4C 53 4C 00             1959  P_LSL DC.B 'LSL', 0
000020A8= 41 53 52 00             1960  P_ASR DC.B 'ASR', 0
000020AC= 41 53 4C 00             1961  P_ASL DC.B 'ASL',0 
000020B0= 52 4F 4C 00             1962  P_ROL DC.B 'ROL', 0
000020B4= 52 4F 52 00             1963  P_ROR DC.B 'ROR', 0
000020B8= 42 43 4C 52 00          1964  P_BCLR DC.B 'BCLR',0
000020BD= 43 4D 50 00             1965  P_CMP DC.B 'CMP', 0
000020C1= 43 4D 50 49 00          1966  P_CMPI DC.B 'CMPI', 0
000020C6= 42 43 53 00             1967  P_BCS DC.B 'BCS', 0
000020CA= 42 47 45 00             1968  P_BGE DC.B 'BGE', 0
000020CE= 42 4C 54 00             1969  P_BLT DC.B 'BLT',0
000020D2= 42 56 43 00             1970  P_BVC DC.B 'BVC', 0
000020D6= 42 52 41 00             1971  P_BRA DC.B 'BRA',0          *------------IN PROGRESS---------------*
000020DA= 4A 53 52 00             1972  P_JSR DC.B 'JSR',0          *-----------------DONE-----------------*
000020DE= 44 41 54 41 00          1973  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
000020E3                          1974  
000020E3                          1975  
000020E3  =00000004               1976  WORD_LENGTH EQU $04
000020E3  =00000008               1977  LONG_LENGTH EQU $08
000020E3= 31 30 30 32 30 30 ...   1978  TEST_VAL DC.B '10020009'
000020EB  =0000000A               1979  LF EQU $0A
000020EB  =0000000D               1980  CR EQU $0D
000020EB  =00000009               1981  HT  EQU  $09 
000020EB= 20 0D 0A 00             1982  NEW_LINE DC.B ' ',CR,LF,0
000020EF                          1983  SIMHALT             ; halt simulator
000020EF                          1984  * Put variables and constants here
000020EF                          1985  
000020EF                          1986  
000020EF                          1987  
000020EF                          1988  
000020EF                          1989  
000020EF                          1990  
000020EF= 50 6C 65 61 73 65 ...   1991  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
0000211E= 50 6C 65 61 73 65 ...   1992  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
0000214B= 50 72 65 73 73 20 ...   1993  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00002165                          1994      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1854
ADDA                17D0
ADDA_AN_MASKING     E00
ADDA_END            1852
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             1924
ADD_FROM_D          18B0
ADD_TO_D            18EA
ASCII_TO_HEX        15D0
ASCII_TO_HEX_CHECK_GT_0  15FC
ASCII_TO_HEX_CHECK_GT_A  1610
ASCII_TO_HEX_CHECK_LT_9  1604
ASCII_TO_HEX_CHECK_LT_F  161C
ASCII_TO_HEX_CONVERT_LETTER  1642
ASCII_TO_HEX_CONVERT_NUMBER  1628
ASCII_TO_HEX_END_LOOP  165C
ASCII_TO_HEX_FAILED_0  1662
ASCII_TO_HEX_FAILED_2  1668
ASCII_TO_HEX_LOOP   15F0
ASCII_TO_HEX_RETURN_OK  1
BRA                 1B04
BRA_DISP_M          FF
BRA_END             1B40
BRA_M               FF00
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  15A2
CHECK_VALUE_IS_ODD_FAILED  15CA
CLR_SCREEN          1070
CMP                 1EAE
CMP_DREG_M          E00
CMP_END             1F2E
CMP_M               F100
CMP_OPCODE          B000
CMP_REG_M           3F
CMP_SIZE_M          C0
CONTINUE_PRINT_REGISTER  129A
CONTINUE_PRINT_RE_NUMBER  12B6
CONVERT_OPMODE_SIZE_B  1986
CONVERT_OPMODE_SIZE_W  198C
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DIVS                1DB6
DIVS_DREG_M         E00
DIVS_END            1E30
DIVS_M              F1C0
DIVS_OPCODE         81C0
DIVS_REG_M          3F
DONE_PRINT_NUMBER   12D4
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C8
END_FETCH_OPCODES   168C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1594
END_JUMP_TABLE      16FE
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       153C
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12FE
END_PRINT_TAB       10CA
EOR                 1C66
EOR_DIREC           100
EOR_DREG_M          E00
EOR_END             1CE6
EOR_M               F100
EOR_OPCODE          B100
EOR_REG_M           3F
EOR_SIZE_M          C0
FETCH_OPCODES       167A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  152A
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1556
HEX_MASKING         F
HEX_TO_ASCII        153E
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  158A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   155E
HEX_TO_ASCII_NUMBER  1580
HEX_TO_ASCII_ROR    159E
HEX_TO_ASCII_SWAP   159A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  166E
JSR                 1716
JSR_END             1760
JSR_OPCODE          4E80
JUMP_TABLE          168E
LEA                 1762
LEA_END             17CE
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVE                19DC
MOVEA               1926
MOVEA_DONE_CONVERT  1992
MOVEA_END           19DA
MOVEA_REGISTER_OK   1946
MOVEM               1AA0
MOVE_DONE_CONVERT   1A76
MOVE_END            19FA
MOVE_MATCH_PATTERN  19FC
MOVE_OPMODE_BYTE    1A6A
MOVE_OPMODE_WORD    1A70
MULS                1E32
MULS_DREG_M         E00
MULS_END            1EAC
MULS_M              F1C0
MULS_OPCODE         C1C0
MULS_REG_M          3F
NEG                 1AA0
NEG_END             1B02
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            20EB
NOP                 1702
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B42
ORI                 1C10
ORI_END             1C64
ORI_M               FF00
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1C0E
OR_M                F000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BD4
OR_TO_EA            1B9A
OUTPUT_ADDRESS      7010
PRINT_A             150C
PRINT_AB_LONG       1428
PRINT_AB_SHORT      13C6
PRINT_ADD           1FE8
PRINT_ADDA          1FDA
PRINT_BRA           1F62
PRINT_BYTE          1164
PRINT_CLOSE         14BE
PRINT_CLOSE_PLUS    14D8
PRINT_CMP           203C
PRINT_COMMA         10D2
PRINT_D             14F2
PRINT_DATA          113A
PRINT_DIVS          2004
PRINT_DOLLAR_SIGN   10EA
PRINT_EOR           1F8C
PRINT_HASH_SIGN     1102
PRINT_HEX           1526
PRINT_IMMEDIATE     1300
PRINT_IMMEDIATE_BYTE  133C
PRINT_IMMEDIATE_LONG  1392
PRINT_IMMEDIATE_WORD  1366
PRINT_JSR           1FB6
PRINT_LEA           1FC8
PRINT_LONG          117C
PRINT_MINUS_OPEN    14A4
PRINT_MOVE          202E
PRINT_MOVEA         2020
PRINT_MULS          2012
PRINT_NEG           1F54
PRINT_NEW_LINE      111A
PRINT_NOP           1F44
PRINT_OPEN          148A
PRINT_OR            1F70
PRINT_ORI           1F7E
PRINT_PC            1188
PRINT_REGISTER      1252
PRINT_ROL           1F9A
PRINT_ROR           1FA8
PRINT_RTS           1F30
PRINT_SUB           1FF6
PRINT_TAB           10B4
PRINT_UNSUPPORTED   204A
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  214B
PROMT_INPUT_END     211E
PROMT_INPUT_START   20EF
P_ADD               2071
P_ADDA              2075
P_ASL               20AC
P_ASR               20A8
P_BCLR              20B8
P_BCS               20C6
P_BGE               20CA
P_BLT               20CE
P_BRA               20D6
P_BVC               20D2
P_CMP               20BD
P_CMPI              20C1
P_DATA              20DE
P_DIVS              2088
P_EOR               209C
P_JSR               20DA
P_LEA               208D
P_LSL               20A4
P_LSR               20A0
P_MOVE              2060
P_MOVEA             2065
P_MOVEM             206B
P_MULS              2083
P_NEG               2098
P_NOP               205C
P_OR                2091
P_ORI               2094
P_ROL               20B0
P_ROR               20B4
P_RTS               2058
P_SUB               207A
P_SUBQ              207E
RETURN_ADDRESS      9000
RTS                 170C
SIMHALT             20EF
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
SUB                 1CE8
SUB_DIREC           100
SUB_DREG_M          E00
SUB_END             1DB4
SUB_M               F000
SUB_OPCODE          9000
SUB_REG_M           3F
SUB_SIZE_M          C0
SUB_TO_D            1D7A
SUB_TO_EA           1D40
TEST_VAL            20E3
UNSUPPORT_OPCODE    11E6
UNSUPPORT_REGISTER  121A
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
