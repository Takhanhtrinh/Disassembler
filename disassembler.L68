00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/3/2018 9:50:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                  9  OUTPUT_ADDRESS EQU $7010
00001000                            10  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 11  RETURN_ADDRESS EQU $9000
00001000                            12  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 13  START_ADDRESS EQU $09100
00001000                            14  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 15  END_ADDRESS EQU $7004
00001000                            16  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 17  OPCODE_ADDRESS EQU $7006
00001000                            18  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            19  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            20  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            21  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 22  OFFSET_OPC_ADDRES EQU $7008 
00001000                            23  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 24  SIZE_OPCODE EQU $700A
00001000                            25  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 26  STORE_REGISTER_ADDRESS EQU $700C
00001000                            27  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 28  STACK_ADDRESS EQU $8000
00001000                            29  START:                  ; first instruction of program
00001000                            30      * MOVE.L #$10AF241B, -(SP)
00001000                            31      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            32      * JSR PRINT_HEX
00001000                            33      * ADDQ.L #$08, SP
00001000                            34  
00001000                            35      * JSR PRINT_NEW_LINE
00001000                            36  
00001000                            37      * JSR PRINT_TAB
00001000                            38      * A0
00001000                            39  *     MOVE.L #%0000011100000100, D1
00001000                            40  *     MOVE.L D1, -(SP)
00001000                            41  *     JSR PRINT_REGISTER
00001000                            42  *     ADDQ.L #4, SP
00001000                            43  *     * A1
00001000                            44  *     MOVE.W #%0100, D1
00001000                            45  *     SWAP D1
00001000                            46  *     MOVE.W #$1, D1
00001000                            47  *     MOVE.L D1, -(SP)
00001000                            48  *     JSR PRINT_REGISTER
00001000                            49  *     ADDQ.L #4, SP
00001000                            50  * * A2
00001000                            51  *     MOVE.W #%0011, D1
00001000                            52  *     SWAP D1
00001000                            53  *     MOVE.W #$2, D1
00001000                            54  *     MOVE.L D1, -(SP)
00001000                            55  *     JSR PRINT_REGISTER
00001000                            56  *     ADDQ.L #4, SP
00001000                            57  * * A3
00001000                            58  *     MOVE.W #%0011, D1
00001000                            59  *     SWAP D1
00001000                            60  *     MOVE.W #$3, D1
00001000                            61  *     MOVE.L D1, -(SP)
00001000                            62  *     JSR PRINT_REGISTER
00001000                            63  *     ADDQ.L #4, SP
00001000                            64  * * A4
00001000                            65  *     MOVE.W #%0011, D1
00001000                            66  *     SWAP D1
00001000                            67  *     MOVE.W #$4, D1
00001000                            68  *     MOVE.L D1, -(SP)
00001000                            69  *     JSR PRINT_REGISTER
00001000                            70  *     ADDQ.L #4, SP
00001000                            71  * * A5
00001000                            72  *     MOVE.W #%0011, D1
00001000                            73  *     SWAP D1
00001000                            74  *     MOVE.W #$5, D1
00001000                            75  *     MOVE.L D1, -(SP)
00001000                            76  *     JSR PRINT_REGISTER
00001000                            77  *     ADDQ.L #4, SP
00001000                            78  * * A6
00001000                            79  *     MOVE.W #%0011, D1
00001000                            80  *     SWAP D1
00001000                            81  *     MOVE.W #$6, D1
00001000                            82  *     MOVE.L D1, -(SP)
00001000                            83  *     JSR PRINT_REGISTER
00001000                            84  *     ADDQ.L #4, SP
00001000                            85  * * A7
00001000                            86  *     MOVE.W #%0011, D1
00001000                            87  *     SWAP D1
00001000                            88  *     MOVE.W #$7, D1
00001000                            89  *     MOVE.L D1, -(SP)
00001000                            90  *     JSR PRINT_REGISTER
00001000                            91  *     ADDQ.L #4, SP
00001000                            92  
00001000                            93      * JSR PRINT_COMMA
00001000                            94      * JSR PRINT_DOLLAR_SIGN
00001000                            95      * JSR PRINT_HASH_SIGN
00001000                            96      * MOVE.B #$01, -(SP)
00001000                            97      * JSR PRINT_DATA
00001000                            98      * ADDQ.L #$2,SP
00001000                            99      * MOVE.B #$02, -(SP)
00001000                           100      * JSR PRINT_DATA
00001000                           101      * ADDQ.L #$2, SP
00001000                           102      * MOVE.B #$03, -(SP)
00001000                           103      * JSR PRINT_DATA
00001000                           104      * ADDQ.L #$2,SP
00001000                           105   
00001000  4207                     106      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            107      MOVE.L #START_ADDRESS, A0 
00001008  20BC 00010000            108      MOVE.L #$010000, (A0)
0000100E                           109  LOOP_START:
0000100E  2E7C 00008000            110      MOVE.L #STACK_ADDRESS, SP
00001014  2F39 00009100            111      MOVE.L (START_ADDRESS), -(SP)
0000101A  2F3C 00007006            112      MOVE.L #OPCODE_ADDRESS, -(SP)
00001020  2C7C 00007006            113      MOVE.L #OPCODE_ADDRESS, A6
00001026  4EB9 0000173E            114      JSR FETCH_OPCODES
0000102C  508F                     115      ADDQ.L #8, SP
0000102E  4EB9 00001182            116      JSR PRINT_PC
00001034  207C 00007006            117      MOVE.L #OPCODE_ADDRESS, A0
0000103A  3F10                     118      MOVE.W (A0), -(SP)
0000103C  4EB9 00001752            119      JSR JUMP_TABLE
00001042                           120  FINISH_OPCODE:
00001042  4280                     121      CLR.L D0
00001044  23FC 00000000 00009000   122      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
0000104E  3038 7008                123      MOVE.W (OFFSET_OPC_ADDRES), D0
00001052  D1B9 00009100            124      ADD.L D0, (START_ADDRESS)
00001058  4EB9 00001114            125      JSR PRINT_NEW_LINE
0000105E  5207                     126      ADDQ.B #1, D7 
00001060  0C07 001D                127      CMPI.B #29, D7 
00001064  6700 0004                128      BEQ CLR_SCREEN
00001068  60A4                     129      BRA LOOP_START
0000106A                           130  
0000106A                           131  CLR_SCREEN:
0000106A  43F9 000020AD            132      LEA PROMT_INPUT_CONTINUE, A1 
00001070  103C 000D                133      MOVE.B #13, D0 
00001074  4E4F                     134      TRAP #15 
00001076  4207                     135      CLR.B D7
00001078  103C 0005                136      MOVE.B #5, D0 
0000107C  4E4F                     137      TRAP #15 
0000107E  0C01 000D                138      CMPI.B #$0D, D1 
00001082  678A                     139      BEQ LOOP_START
00001084  6000 0002                140      BRA END_MAIN
00001088                           141  
00001088                           142  * Put program code here
00001088                           143  MAIN:
00001088                           144  
00001088                           145  END_MAIN:
00001088  103C 0009                146      MOVE.B #9, D0
0000108C  4E4F                     147      TRAP #15
0000108E  103C 000E                148      MOVE.B #14,D0
00001092  4E4F                     149      TRAP #15
00001094                           150  * get user input 
00001094                           151  GET_INPUT:
00001094  43F9 00002051            152      LEA PROMT_INPUT_START, A1
0000109A  103C 000D                153      MOVE.B #13, D0
0000109E  4E4F                     154      TRAP #15
000010A0  227C 00002000            155      MOVEA.L #$2000,A1
000010A6  103C 0002                156      MOVE.B #2, D0
000010AA  4E4F                     157      TRAP #15
000010AC                           158  END_GET_INPUT:
000010AC  4E75                     159      RTS   
000010AE                           160  
000010AE                           161  *--------------------------------------------------------------------
000010AE                           162  * PRINT_TAB 
000010AE                           163  PRINT_TAB: 
000010AE  227C 00007010            164      MOVE.L #OUTPUT_ADDRESS, A1
000010B4  22FC 20202020            165      MOVE.L #'    ', (A1)+
000010BA  12FC 0000                166      MOVE.B #0, (A1)+
000010BE  227C 00007010            167      MOVE.L #OUTPUT_ADDRESS, A1
000010C4                           168  END_PRINT_TAB:
000010C4  103C 000E                169      MOVE.B #14, D0
000010C8  4E4F                     170      TRAP #15
000010CA  4E75                     171      RTS
000010CC                           172  *--------------------------------------------------------------------
000010CC                           173  * PRINT_COMMA
000010CC                           174  PRINT_COMMA:
000010CC  227C 00007010            175      MOVE.L #OUTPUT_ADDRESS, A1
000010D2  32FC 2C20                176      MOVE.W #', ', (A1)+
000010D6  12BC 0000                177      MOVE.B #0, (A1)
000010DA  5589                     178      SUBQ.L #2, A1
000010DC                           179  END_PRINT_COMMA:
000010DC  103C 000E                180      MOVE.B #14, D0
000010E0  4E4F                     181      TRAP #15
000010E2  4E75                     182      RTS
000010E4                           183  *--------------------------------------------------------------------
000010E4                           184  * PRINT_DOLLAR_SIGN
000010E4                           185  PRINT_DOLLAR_SIGN:
000010E4  227C 00007010            186      MOVE.L #OUTPUT_ADDRESS, A1
000010EA  12BC 0024                187      MOVE.B #'$', (A1)
000010EE  137C 0000 0001           188      MOVE.B #0, 1(A1) 
000010F4                           189  END_PRINT_DOLLAR_SIGN:
000010F4  103C 000E                190      MOVE.B #14, D0
000010F8  4E4F                     191      TRAP #15
000010FA  4E75                     192      RTS
000010FC                           193  *--------------------------------------------------------------------
000010FC                           194  * PRINT_HASH_SIGN
000010FC                           195  PRINT_HASH_SIGN:
000010FC  227C 00007010            196      MOVE.L #OUTPUT_ADDRESS, A1
00001102  12BC 0023                197      MOVE.B #'#', (A1)
00001106  137C 0000 0001           198      MOVE.B #0, 1(A1) 
0000110C                           199  END_PRINT_HASH_SIGN:
0000110C  103C 000E                200      MOVE.B #14, D0
00001110  4E4F                     201      TRAP #15
00001112  4E75                     202      RTS
00001114                           203  
00001114                           204  *--------------------------------------------------------------------
00001114                           205  * PRINT A NEW LINE 
00001114                           206  PRINT_NEW_LINE: 
00001114  227C 00007010            207      MOVE.L #OUTPUT_ADDRESS, A1
0000111A  12FC 000D                208      MOVE.B #CR, (A1)+ 
0000111E  12FC 000A                209      MOVE.B #LF, (A1)+
00001122  12FC 0000                210      MOVE.B #0, (A1)+
00001126                           211  END_PRINT_NEW_LINE:
00001126  227C 00007010            212      MOVE.L #OUTPUT_ADDRESS, A1
0000112C  103C 000E                213      MOVE.B #14, D0
00001130  4E4F                     214      TRAP #15 
00001132  4E75                     215      RTS
00001134                           216  
00001134                           217  
00001134                           218  
00001134                           219  
00001134                           220  *--------------------------------------------------------------------
00001134                           221  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
00001134                           222  * PARAMETERS: 
00001134                           223   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
00001134                           224  *       00 - byte
00001134                           225  *       01 - word
00001134                           226  *       10 - long
00001134                           227  * NOTE:
00001134                           228  *   A1 USE FOR PRINT
00001134                           229  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
00001134                           230  PRINT_DATA:
00001134  227C 00007010            231      MOVE.L #OUTPUT_ADDRESS, A1
0000113A  122F 0004                232      MOVE.B 4(SP), D1
0000113E  0C01 0000                233      CMPI.B #$00, D1
00001142  6700 001A                234      BEQ PRINT_BYTE
00001146  0C01 0001                235      CMPI.B #$01, D1
0000114A  6700 001E                236      BEQ PRINT_WORD
0000114E  0C01 0002                237      CMPI.B #$02, D1 
00001152  6700 0022                238      BEQ PRINT_LONG
00001156                           239  END_PRINT_DATA:
00001156  103C 000E                240      MOVE.B #14, D0
0000115A  4E4F                     241      TRAP #15
0000115C  4E75                     242      RTS 
0000115E                           243  
0000115E                           244  PRINT_BYTE: 
0000115E  32BC 2E42                245      MOVE.W #'.B', (A1)
00001162  137C 0000 0002           246      MOVE.B #0, 2(A1)
00001168  60EC                     247      BRA END_PRINT_DATA
0000116A                           248  PRINT_WORD: 
0000116A  32BC 2E57                249      MOVE.W #'.W', (A1)
0000116E  137C 0000 0002           250      MOVE.B #0, 2(A1)
00001174  60E0                     251      BRA END_PRINT_DATA
00001176                           252  PRINT_LONG: 
00001176  32BC 2E4C                253      MOVE.W #'.L', (A1)
0000117A  137C 0000 0002           254      MOVE.B #0, 2(A1)
00001180  60D4                     255      BRA END_PRINT_DATA
00001182                           256  *--------------------------------------------------------------------
00001182                           257  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001182                           258  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001182                           259  * PARAMETERS:
00001182                           260  *   NONE
00001182                           261  * NOTES: 
00001182                           262  * A1 USE TO PRINT 
00001182                           263  * D0 FOR TRAP AND CONVERSION 
00001182                           264  PRINT_PC:
00001182  2039 00009100            265      MOVE.L (START_ADDRESS), D0 
00001188  2F00                     266      MOVE.L D0, -(SP)
0000118A  2F3C 00000008            267      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001190  4EB9 000015EA            268      JSR PRINT_HEX 
00001196  508F                     269      ADDQ.L #8, SP 
00001198  4EB8 10AE                270      JSR PRINT_TAB
0000119C  4EB8 10AE                271      JSR PRINT_TAB 
000011A0  4E75                     272      RTS 
000011A2                           273  
000011A2                           274  CHECK_SUPPORT_REGISTER:
000011A2  33FC 0000 00009000       275      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011AA  322F 0004                276      MOVE.W 4(SP), D1 
000011AE  3801                     277      MOVE.W D1,D4 
000011B0                           278     ; check to make sure we dont support the register 
000011B0  =00000028                279  DISPLACEMENT_REGISTER EQU %00101000
000011B0  =00000030                280  ADDRESS_WITH_INDEX EQU %00110000
000011B0  =0000003B                281  COUNTER_INDEX EQU %00111011 
000011B0  =0000003A                282  COUNTER_DISPLACEMENT EQU %00111010
000011B0  C83C 0038                283      AND.B #%00111000, D4 
000011B4  0C04 0028                284      CMPI.B #DISPLACEMENT_REGISTER, D4
000011B8  6700 0056                285      BEQ UNSUPPORT_REGISTER
000011BC  0C04 0030                286      CMPI.B #ADDRESS_WITH_INDEX, D4
000011C0  6700 004E                287      BEQ UNSUPPORT_REGISTER 
000011C4  3801                     288      MOVE D1, D4
000011C6  C83C 003F                289      AND.B #%00111111,D4
000011CA  0C04 003B                290      CMPI.B #COUNTER_INDEX, D4
000011CE  6700 0040                291      BEQ UNSUPPORT_REGISTER 
000011D2  0C04 003A                292      CMPI.B #COUNTER_DISPLACEMENT, D4
000011D6  6700 0038                293      BEQ UNSUPPORT_REGISTER
000011DA  4E75                     294      RTS
000011DC                           295  
000011DC                           296  UNSUPPORT_OPCODE: 
000011DC  267C 00009000            297      MOVE.L #RETURN_ADDRESS, A3
000011E2  4EB9 00001FAC            298      JSR PRINT_UNSUPPORTED
000011E8  4EB8 10AE                299      JSR PRINT_TAB 
000011EC  4EB8 10FC                300      JSR PRINT_HASH_SIGN 
000011F0  4EB8 10E4                301      JSR PRINT_DOLLAR_SIGN 
000011F4  4281                     302      CLR.L D1 
000011F6  3238 7006                303      MOVE.W (OPCODE_ADDRESS), D1 
000011FA  2F01                     304      MOVE.L D1, -(SP) 
000011FC  2F3C 00000004            305      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001202  4EB9 000015EA            306      JSR PRINT_HEX 
00001208  508F                     307      ADDQ.L #8, SP 
0000120A  36BC 0002                308      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000120E  4E75                     309      RTS 
00001210                           310  UNSUPPORT_REGISTER:
00001210  =00000002                311  C_UNSUPPORT_REGISTER EQU $2
00001210  267C 00009000            312      MOVE.L #RETURN_ADDRESS, A3
00001216  4EB9 00001FAC            313      JSR PRINT_UNSUPPORTED
0000121C  4EB8 10AE                314      JSR PRINT_TAB 
00001220  4EB8 10FC                315      JSR PRINT_HASH_SIGN 
00001224  4EB8 10E4                316      JSR PRINT_DOLLAR_SIGN 
00001228  4281                     317      CLR.L D1 
0000122A  3238 7006                318      MOVE.W (OPCODE_ADDRESS), D1 
0000122E  2F01                     319      MOVE.L D1, -(SP) 
00001230  2F3C 00000004            320      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001236  4EB9 000015EA            321      JSR PRINT_HEX 
0000123C  508F                     322      ADDQ.L #8, SP 
0000123E  36BC 0002                323      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001242  5478 7008                324      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001246  4E75                     325      RTS 
00001248                           326  
00001248                           327  
00001248                           328  *--------------------------------------------------------------------
00001248                           329  * PRINT_REGISTER
00001248                           330  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001248                           331  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001248                           332  * 2 - (4(sp)) byte value for how many byte for immediate value
00001248                           333  *      0 for a byte value
00001248                           334  *      1 for word value
00001248                           335  *      2 for long value 
00001248                           336  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001248                           337  * NOTE: 
00001248                           338  *   D1 FOR STORE THE PARAMETER
00001248                           339  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001248                           340  PRINT_REGISTER:
00001248  322F 0006                341     MOVE.W 6(SP), D1 
0000124C                           342     
0000124C  3401                     343     MOVE.W D1,D2
0000124E  0C01 003C                344     CMPI.B #%00111100, D1
00001252  6700 00A2                345     BEQ PRINT_IMMEDIATE
00001256  0C01 0038                346     CMPI.B #%00111000, D1
0000125A  6700 0160                347     BEQ PRINT_AB_SHORT
0000125E  0C01 0039                348     CMPI.B #%00111001, D1
00001262  6700 01BA                349     BEQ PRINT_AB_LONG 
00001266                           350  
00001266  1401                     351     MOVE.B D1,D2
00001268  C43C 0038                352     AND.B #%00111000, D2
0000126C  0C02 0010                353     CMPI.B #%00010000, D2
00001270  6700 020E                354     BEQ PRINT_OPEN
00001274                           355  
00001274  1401                     356     MOVE.B D1,D2
00001276  C43C 0038                357     AND.B #%00111000, D2
0000127A  0C02 0018                358     CMPI.B #%00011000, D2
0000127E  6700 0200                359     BEQ PRINT_OPEN
00001282                           360  
00001282  1401                     361     MOVE.B D1,D2
00001284  C43C 0038                362     AND.B #%00111000, D2
00001288  0C02 0020                363     CMPI.B #%00100000, D2
0000128C  6700 020C                364     BEQ PRINT_MINUS_OPEN
00001290                           365  
00001290                           366  CONTINUE_PRINT_REGISTER:
00001290  1401                     367     MOVE.B D1,D2
00001292  C43C 0038                368     AND.B #%00111000, D2
00001296  0C02 0000                369     CMPI.B #%00000000, D2
0000129A  6700 024C                370     BEQ PRINT_D
0000129E                           371  
0000129E  1401                     372     MOVE.B D1,D2
000012A0  C43C 0038                373     AND.B #%00111000, D2
000012A4  0C02 0008                374     CMPI.B #%00001000, D2
000012A8  6700 0258                375     BEQ PRINT_A 
000012AC                           376  
000012AC                           377  CONTINUE_PRINT_RE_NUMBER:
000012AC  227C 00007010            378      MOVE.L #OUTPUT_ADDRESS, A1
000012B2  1401                     379      MOVE.B D1,D2
000012B4  C43C 0007                380      AND.B #%00000111, D2
000012B8  0602 0030                381      ADD.B #48, D2 
000012BC  1282                     382      MOVE.B D2, (A1) 
000012BE  137C 0000 0001           383      MOVE.B #$0, 1(A1)
000012C4  103C 000E                384      MOVE.B #14, D0
000012C8  4E4F                     385      TRAP #15
000012CA                           386  DONE_PRINT_NUMBER:
000012CA  1401                     387     MOVE.B D1,D2
000012CC  C43C 0038                388     AND.B #%00111000, D2
000012D0  0C02 0010                389     CMPI.B #%00010000, D2
000012D4  6700 01DE                390     BEQ PRINT_CLOSE
000012D8                           391  
000012D8  1401                     392     MOVE.B D1,D2
000012DA  C43C 0038                393     AND.B #%00111000, D2
000012DE  0C02 0018                394     CMPI.B #%00011000, D2
000012E2  6700 01EA                395     BEQ PRINT_CLOSE_PLUS
000012E6                           396  
000012E6  1401                     397     MOVE.B D1,D2
000012E8  C43C 0038                398     AND.B #%00111000, D2
000012EC  0C02 0020                399     CMPI.B #%00100000, D2
000012F0  6700 01C2                400     BEQ PRINT_CLOSE
000012F4                           401  
000012F4                           402  END_PRINT_REGISTER:
000012F4  4E75                     403      RTS
000012F6                           404  
000012F6                           405  PRINT_IMMEDIATE:
000012F6  227C 00007010            406      MOVE.L #OUTPUT_ADDRESS, A1
000012FC  12BC 0023                407      MOVE.B #'#', (A1)
00001300  137C 0000 0001           408      MOVE.B #$0, 1(A1)
00001306  103C 000E                409      MOVE.B #14, D0
0000130A  4E4F                     410      TRAP #15
0000130C  4EB8 10E4                411      JSR PRINT_DOLLAR_SIGN
00001310  3038 7008                412      MOVE.W (OFFSET_OPC_ADDRES),D0
00001314  342F 0004                413      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001318  0C02 0000                414      CMPI.B #$00, D2
0000131C  6700 0014                415      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
00001320  0C02 0001                416      CMPI.B #$01, D2
00001324  6700 0036                417      BEQ PRINT_IMMEDIATE_WORD
00001328  0C02 0002                418      CMPI.B #$02, D2
0000132C  6700 005A                419      BEQ PRINT_IMMEDIATE_LONG
00001330  60C2                     420      BRA END_PRINT_REGISTER
00001332                           421  
00001332                           422  PRINT_IMMEDIATE_BYTE:
00001332  2479 00009100            423      MOVE.L (START_ADDRESS), A2
00001338  3432 0000                424      MOVE.W (A2, D0), D2 ; 
0000133C  48E7 E0C0                425      MOVEM.L D0-D2/A0-A1, -(SP)
00001340  2F02                     426      MOVE.L D2, -(SP)
00001342  2F3C 00000004            427      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001348  4EB9 000015EA            428      JSR PRINT_HEX
0000134E  508F                     429       ADDQ.L #$08, SP
00001350  4CDF 0307                430      MOVEM.L (SP)+, D0-D2/A0-A1
00001354  5440                     431      ADDQ.W #$2, D0
00001356  31C0 7008                432      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000135A  6098                     433      BRA END_PRINT_REGISTER
0000135C                           434  PRINT_IMMEDIATE_WORD:
0000135C  2479 00009100            435      MOVE.L (START_ADDRESS), A2
00001362  3432 0000                436      MOVE.W (A2, D0), D2 ; 
00001366  48E7 E0C0                437      MOVEM.L D0-D2/A0-A1, -(SP)
0000136A  2F02                     438      MOVE.L D2, -(SP)
0000136C  2F3C 00000004            439      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001372  4EB9 000015EA            440      JSR PRINT_HEX
00001378  508F                     441      ADDQ.L #$08, SP
0000137A  4CDF 0307                442      MOVEM.L (SP)+, D0-D2/A0-A1
0000137E  5440                     443      ADDQ.W #$2, D0
00001380  31C0 7008                444      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001384  6000 FF6E                445      BRA END_PRINT_REGISTER
00001388                           446  PRINT_IMMEDIATE_LONG:
00001388  3038 7008                447      MOVE.W (OFFSET_OPC_ADDRES),D0
0000138C  2479 00009100            448      MOVE.L (START_ADDRESS), A2
00001392  2432 0000                449      MOVE.L (A2, D0), D2 ; 
00001396  48E7 E0C0                450      MOVEM.L D0-D2/A0-A1, -(SP)
0000139A  2F02                     451      MOVE.L D2, -(SP)
0000139C                           452      ; offset to get immediate value from opcode
0000139C  3038 7008                453      MOVE.W (OFFSET_OPC_ADDRES),D0
000013A0  2F3C 00000008            454      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013A6  4EB9 000015EA            455      JSR PRINT_HEX
000013AC  508F                     456      ADDQ.L #$08, SP
000013AE  4CDF 0307                457      MOVEM.L (SP)+, D0-D2/A0-A1
000013B2  5840                     458      ADDQ.W #$4, D0
000013B4  31C0 7008                459      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013B8  6000 FF3A                460      BRA END_PRINT_REGISTER
000013BC                           461  PRINT_AB_SHORT:
000013BC  227C 00007010            462      MOVE.L #OUTPUT_ADDRESS, A1
000013C2  32BC 2824                463      MOVE.W #'($', (A1)
000013C6  137C 0000 0002           464      MOVE.B #0, 2(A1)
000013CC  103C 000E                465      MOVE.B #14, D0
000013D0  4E4F                     466      TRAP #15
000013D2                           467      ; offset to get immediate value from opcode
000013D2  2479 00009100            468      MOVE.L (START_ADDRESS), A2
000013D8  3038 7008                469      MOVE.W (OFFSET_OPC_ADDRES),D0
000013DC  3432 0000                470      MOVE.W (A2, D0), D2 ; 
000013E0  48E7 E0C0                471      MOVEM.L D0-D2/A0-A1, -(SP)
000013E4  2F02                     472      MOVE.L D2, -(SP)
000013E6  2F3C 00000004            473      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013EC  4EB9 000015EA            474      JSR PRINT_HEX
000013F2  508F                     475      ADDQ.L #$08, SP
000013F4  4CDF 0307                476      MOVEM.L (SP)+, D0-D2/A0-A1
000013F8  5440                     477      ADDQ.W #$2, D0
000013FA  31C0 7008                478      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013FE                           479      ; print close parathesis with W
000013FE  227C 00007010            480      MOVE.L #OUTPUT_ADDRESS, A1
00001404  32BC 292E                481      MOVE.W #').', (A1)
00001408  137C 0057 0002           482      MOVE.B #'W',2(A1)
0000140E  137C 0000 0003           483      MOVE.B #0, 3(A1)
00001414  103C 000E                484      MOVE.B #14, D0
00001418  4E4F                     485      TRAP #15
0000141A  6000 FED8                486      BRA END_PRINT_REGISTER
0000141E                           487  PRINT_AB_LONG:
0000141E                           488      ;print open parathesis
0000141E  227C 00007010            489      MOVE.L #OUTPUT_ADDRESS, A1
00001424  32BC 2824                490      MOVE.W #'($', (A1)
00001428  137C 0000 0002           491      MOVE.B #0, 2(A1)
0000142E  103C 000E                492      MOVE.B #14, D0
00001432  4E4F                     493      TRAP #15
00001434                           494      ; print value in long
00001434  2479 00009100            495      MOVE.L (START_ADDRESS), A2
0000143A                           496      ; offset to get value from opcode
0000143A  3038 7008                497      MOVE.W (OFFSET_OPC_ADDRES),D0
0000143E  2432 0000                498      MOVE.L (A2, D0), D2 ; 
00001442  48E7 E0C0                499      MOVEM.L D0-D2/A0-A1, -(SP)
00001446  2F02                     500      MOVE.L D2, -(SP)
00001448  2F3C 00000008            501      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
0000144E  4EB9 000015EA            502      JSR PRINT_HEX
00001454  508F                     503      ADDQ.L #$08, SP
00001456  4CDF 0307                504      MOVEM.L (SP)+, D0-D2/A0-A1
0000145A  5840                     505      ADDQ.W #$4, D0
0000145C  31C0 7008                506      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
00001460                           507      ; print close parathesis with W
00001460  227C 00007010            508      MOVE.L #OUTPUT_ADDRESS, A1
00001466  32BC 292E                509      MOVE.W #').', (A1)
0000146A  137C 004C 0002           510      MOVE.B #'L',2(A1)
00001470  137C 0000 0003           511      MOVE.B #0, 3(A1)
00001476  103C 000E                512      MOVE.B #14, D0
0000147A  4E4F                     513      TRAP #15
0000147C  6000 FE76                514      BRA END_PRINT_REGISTER
00001480                           515  
00001480                           516  PRINT_OPEN:
00001480  227C 00007010            517      MOVE.L #OUTPUT_ADDRESS, A1
00001486  12BC 0028                518      MOVE.B #'(', (A1)
0000148A  137C 0000 0001           519      MOVE.B #$0, 1(A1)
00001490  103C 000E                520      MOVE.B #14, D0
00001494  4E4F                     521      TRAP #15
00001496  6000 006A                522      BRA PRINT_A
0000149A                           523  PRINT_MINUS_OPEN: 
0000149A  227C 00007010            524      MOVE.L #OUTPUT_ADDRESS, A1
000014A0  32BC 2D28                525      MOVE.W #'-(', (A1)
000014A4  137C 0000 0002           526      MOVE.B #$0, 2(A1)
000014AA  103C 000E                527      MOVE.B #14, D0
000014AE  4E4F                     528      TRAP #15
000014B0  6000 0050                529      BRA PRINT_A
000014B4                           530  
000014B4                           531  PRINT_CLOSE:
000014B4  227C 00007010            532      MOVE.L #OUTPUT_ADDRESS, A1
000014BA  12BC 0029                533      MOVE.B #')', (A1)
000014BE  137C 0000 0001           534      MOVE.B #$0, 1(A1)
000014C4  103C 000E                535      MOVE.B #14, D0
000014C8  4E4F                     536      TRAP #15
000014CA  6000 FE28                537      BRA END_PRINT_REGISTER
000014CE                           538  PRINT_CLOSE_PLUS:
000014CE  227C 00007010            539      MOVE.L #OUTPUT_ADDRESS, A1
000014D4  32BC 292B                540      MOVE.W #')+', (A1)
000014D8  137C 0000 0002           541      MOVE.B #$0, 2(A1)
000014DE  103C 000E                542      MOVE.B #14, D0
000014E2  4E4F                     543      TRAP #15
000014E4  6000 FE0E                544      BRA END_PRINT_REGISTER
000014E8                           545  PRINT_D:
000014E8  227C 00007010            546      MOVE.L #OUTPUT_ADDRESS, A1 
000014EE  12BC 0044                547      MOVE.B #'D', (A1)
000014F2  137C 0000 0001           548      MOVE.B #$0, 1(A1)
000014F8  103C 000E                549      MOVE.B #14, D0
000014FC  4E4F                     550      TRAP #15
000014FE  6000 FDAC                551      BRA CONTINUE_PRINT_RE_NUMBER
00001502                           552  PRINT_A: 
00001502  227C 00007010            553      MOVE.L #OUTPUT_ADDRESS, A1 
00001508  12BC 0041                554      MOVE.B #'A', (A1)
0000150C  137C 0000 0001           555      MOVE.B #$0, 1(A1)
00001512  103C 000E                556      MOVE.B #14, D0
00001516  4E4F                     557      TRAP #15
00001518  6000 FD92                558      BRA CONTINUE_PRINT_RE_NUMBER
0000151C                           559  
0000151C                           560  *-----------------------------------------------------------
0000151C                           561  * PRINT_DISPLACEMENT FOR BRANCHES 
0000151C                           562  * PARAMETERS:
0000151C                           563  *   1- 4(SP): 1 BYTE FOR WHAT SIZE
0000151C                           564  *             0- FOR S 
0000151C                           565  *             1- FOR W
0000151C                           566  *  NOTE: D0 USE FOR STORE SIZE
0000151C                           567  *        A0 TO STORE PC 
0000151C                           568  *        D1 FOR 2 COMPLEMENT 
0000151C                           569  PRINT_DISPLACEMENT:
0000151C  2079 00009100            570      MOVE.L (START_ADDRESS), A0
00001522  102F 0004                571      MOVE.B 4(SP), D0 
00001526  0C00 0000                572      CMPI.B #0, D0 
0000152A  6600 0006                573      BNE PRINT_DISPLACEMENT_S
0000152E  6000 0058                574      BRA PRINT_DISPLACEMENT_M
00001532                           575  PRINT_DISPLACEMENT_S:
00001532  227C 00007010            576      MOVE.L #OUTPUT_ADDRESS, A1 
00001538                           577      ; print .S 
00001538  32BC 2E53                578      MOVE.W #'.S', (A1)
0000153C  137C 0000 0002           579      MOVE.B #0, 2(A1) 
00001542  103C 000E                580      MOVE.B #14, D0 
00001546  4E4F                     581      TRAP #15
00001548  4EB8 10AE                582      JSR PRINT_TAB
0000154C                           583      ; check if it is negative number
0000154C  4280                     584      CLR.L D0
0000154E  1028 0001                585      MOVE.B 1(A0), D0 
00001552  6B00 001A                586      BMI PRINT_DISPLACEMENT_S_N
00001556                           587      ; else it is positive 
00001556  2208                     588      MOVE.L A0, D1 
00001558  5481                     589      ADDQ.L #2, D1
0000155A  D280                     590      ADD.L D0, D1 
0000155C  2F01                     591      MOVE.L D1, -(SP)
0000155E  2F3C 00000008            592      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001564  4EB9 000015EA            593      JSR PRINT_HEX
0000156A  508F                     594      ADDQ.L #8, SP
0000156C  4E75                     595      RTS
0000156E                           596  PRINT_DISPLACEMENT_S_N:
0000156E  2208                     597      MOVE.L A0, D1 
00001570  5481                     598      ADDQ.L #2, D1
00001572  4400                     599      NEG.B D0 
00001574  9280                     600      SUB.L D0, D1 
00001576  2F01                     601      MOVE.L D1, -(SP)
00001578  2F3C 00000008            602      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
0000157E  4EB9 000015EA            603      JSR PRINT_HEX
00001584  508F                     604      ADDQ.L #8, SP
00001586  4E75                     605      RTS
00001588                           606  
00001588                           607  PRINT_DISPLACEMENT_M:
00001588  227C 00007010            608      MOVE.L #OUTPUT_ADDRESS, A1 
0000158E                           609      ; print .S 
0000158E  32BC 2E53                610      MOVE.W #'.S', (A1)
00001592  137C 0000 0002           611      MOVE.B #0, 2(A1) 
00001598  103C 000E                612      MOVE.B #14, D0 
0000159C  4E4F                     613      TRAP #15
0000159E  4EB8 10AE                614      JSR PRINT_TAB
000015A2  4280                     615      CLR.L D0
000015A4  3028 0002                616      MOVE.W 2(A0), D0
000015A8  6B00 0020                617      BMI PRINT_DISPLACEMENT_M_N
000015AC  2208                     618      MOVE.L A0, D1 
000015AE  5481                     619      ADDQ.L #2, D1 
000015B0  D280                     620      ADD.L D0, D1
000015B2  2F01                     621      MOVE.L D1, -(SP)
000015B4  2F3C 00000008            622      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
000015BA  4EB9 000015EA            623      JSR PRINT_HEX
000015C0  508F                     624      ADDQ.L #8, SP
000015C2  54B9 00009100            625      ADDQ.L #$2, (START_ADDRESS)
000015C8  4E75                     626      RTS
000015CA                           627  PRINT_DISPLACEMENT_M_N:
000015CA  2208                     628      MOVE.L A0 , D1 
000015CC  5481                     629      ADDQ.L #2, D1 
000015CE  4440                     630      NEG.W D0 
000015D0  9280                     631      SUB.L D0, D1 
000015D2  2F01                     632      MOVE.L D1, -(SP)
000015D4  2F3C 00000008            633      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
000015DA  4EB9 000015EA            634      JSR PRINT_HEX
000015E0  508F                     635      ADDQ.L #8, SP
000015E2  54B9 00009100            636      ADDQ.L #$2, (START_ADDRESS)
000015E8  4E75                     637      RTS
000015EA                           638  
000015EA                           639  
000015EA                           640      
000015EA                           641      
000015EA                           642  
000015EA                           643  
000015EA                           644  
000015EA                           645  
000015EA                           646  
000015EA                           647  
000015EA                           648  
000015EA                           649  
000015EA                           650  *-----------------------------------------------------------
000015EA                           651  * PRINT HEX 
000015EA                           652  * PARAMETERS:
000015EA                           653  *   1- (8(SP)): VALUE IN HEX
000015EA                           654  *   2- (4(SP)): HOW MANY BYTES
000015EA                           655  * RETURN NULL
000015EA                           656  *-----------------------------------------------------------
000015EA                           657  PRINT_HEX:
000015EA  6000 0016                658      BRA HEX_TO_ASCII
000015EE                           659  GET_ASCII_FROM_HEX:
000015EE  227C 00007010            660      MOVE.L #OUTPUT_ADDRESS, A1
000015F4  103C 000E                661      MOVE.B #14, D0
000015F8  4E4F                     662      TRAP #15
000015FA  227C 00007010            663      MOVE.L #OUTPUT_ADDRESS, A1
00001600                           664  END_PRINT_HEX:
00001600  4E75                     665      RTS
00001602                           666  *-----------------------------------------------------------
00001602                           667  * CONVERT HEX TO ASCII 
00001602                           668  * PARAMATERS:
00001602                           669  *   1- (8(SP)): VALUE IN HEX
00001602                           670  *   2- (4(SP)): HOW MANY BYTES
00001602                           671  * RETURN:
00001602                           672  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
00001602                           673  * D0 STORES HEX VALUE
00001602                           674  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
00001602                           675  * D1 COUNT LOOP
00001602                           676  * D2 CONVERT TO ASCII
00001602                           677  * D3 USE TO CALCULATE SHIFT
00001602                           678  HEX_TO_ASCII: 
00001602  202F 0008                679      MOVE.L 8(SP), D0 
00001606  282F 0004                680      MOVE.L 4(SP), D4
0000160A  0C44 0004                681      CMPI #HEX_TO_ASCII_WORD, D4 
0000160E  6700 004E                682      BEQ HEX_TO_ASCII_SWAP
00001612  0C44 0002                683      CMPI #HEX_TO_ASCII_BYTE, D4
00001616  6700 E9EA                684      BEQ HEX_TO_ASCII_BYTE
0000161A                           685  HEX2ASCII_DONE_CONVERT:
0000161A  4201                     686      CLR.B D1
0000161C  227C 00007010            687      MOVE.L #OUTPUT_ADDRESS, A1
00001622  =0000000F                688  HEX_MASKING EQU $0000000F
00001622  =00000002                689  HEX_TO_ASCII_BYTE EQU $02
00001622  =00000004                690  HEX_TO_ASCII_WORD EQU $04
00001622  =00000008                691  HEX_TO_ASCII_LONG EQU $08
00001622                           692  
00001622                           693  HEX_TO_ASCII_LOOP:
00001622  B204                     694      CMP.B D4, D1
00001624  6700 0032                695      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001628                           696  
00001628  E998                     697      ROL.L #4, D0 ; shift left 4 bits to get a hex value
0000162A  2600                     698      MOVE.L D0,D3 ; copy the value to mask
0000162C  C6BC 0000000F            699      AND.L #HEX_MASKING, D3  ; mask
00001632                           700  
00001632  0C03 000A                701      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001636  6D00 000C                702      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
0000163A                           703  
0000163A  0C03 0048                704      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000163E  6D00 000E                705      BLT HEX_TO_ASCII_LETTER
00001642                           706  
00001642  60DE                     707      BRA HEX_TO_ASCII_LOOP
00001644                           708  HEX_TO_ASCII_NUMBER:
00001644  0603 0030                709      ADD.B #48, D3  ; convert number to letter
00001648  12C3                     710      MOVE.B D3, (A1)+ ; push to return memory
0000164A  5201                     711      ADDQ.B #$1, D1 ; add for loop count
0000164C  60D4                     712      BRA HEX_TO_ASCII_LOOP ; loop back
0000164E                           713  HEX_TO_ASCII_LETTER:
0000164E  0603 0037                714      ADD.B #55, D3 ; convert A-F in ascii
00001652  12C3                     715      MOVE.B D3, (A1)+ ; push to return memory
00001654  5201                     716      ADDQ.B #$1, D1 ; add to for loop count
00001656  60CA                     717      BRA HEX_TO_ASCII_LOOP ;loop back
00001658                           718  END_HEX_TO_ASCII:
00001658  12FC 0000                719      MOVE.B #0, (A1)+ ; add null terminated value
0000165C  6090                     720      BRA GET_ASCII_FROM_HEX
0000165E                           721  HEX_TO_ASCII_SWAP:
0000165E  4840                     722      SWAP D0
00001660  60B8                     723      BRA HEX2ASCII_DONE_CONVERT
00001662                           724     
00001662                           725  HEX_TO_ASCII_ROR:
00001662  E098                     726      ROR.L #$08, D0
00001664  60B4                     727      BRA HEX2ASCII_DONE_CONVERT
00001666                           728  
00001666                           729  
00001666                           730  *-----------------------------------------------------------
00001666                           731  * CHECK IF THE VALUE IN HEX IS ODD 
00001666                           732  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
00001666                           733  * RETURN:
00001666                           734  *   0: IF IT IS EVEN
00001666                           735  *   1: IF IT IS ODD
00001666                           736  * NOTE:
00001666                           737  *   A0 IS FOR RETURN ADDRESS
00001666                           738  *   D0 IS FOR HEX VALUE
00001666                           739  CHECK_VALUE_IS_ODD:
00001666  =00000000                740  VALUE_IS_EVEN EQU $0
00001666  =00000001                741  VALUE_IS_ODD EQU $1
00001666  41F9 00009000            742      LEA RETURN_ADDRESS, A0
0000166C  202F 0004                743      MOVE.L 4(SP), D0
00001670  C0BC 0000FFFF            744      AND.L #$0000FFFF, D0
00001676  80FC 0002                745      DIVU.W #2, D0
0000167A  4840                     746      SWAP D0      
0000167C  0C40 0000                747      CMPI.W #0, D0
00001680  6700 000C                748      BEQ CHECK_VALUE_IS_ODD_FAILED
00001684  30BC 0001                749      MOVE.W #VALUE_IS_ODD, (A0)
00001688  6000 0002                750      BRA END_CHECK_VALUE_IS_ODD
0000168C                           751  END_CHECK_VALUE_IS_ODD:   
0000168C  4E75                     752      RTS
0000168E                           753  
0000168E                           754  CHECK_VALUE_IS_ODD_FAILED:
0000168E  30BC 0000                755      MOVE.W #VALUE_IS_EVEN, (A0)
00001692  60F8                     756      BRA END_CHECK_VALUE_IS_ODD
00001694                           757  *-----------------------------------------------------------
00001694                           758  * CONVERT ASCII TO HEX
00001694                           759  * PARAMETERS:
00001694                           760  *   1. LOCATION OF THE ASCII
00001694                           761  *   2. LENGTH OF THE ASCII
00001694                           762  *   3. MAXIMUM LENGTH (hex/ byte / long)
00001694                           763  * RETURN:
00001694                           764  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
00001694                           765  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
00001694                           766  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
00001694                           767  * NOTE:
00001694                           768  *    D0 FOR LENGTH OF ASCII
00001694                           769  *    D1 FOR LOOPING
00001694                           770  ; CURRENT INDEX
00001694                           771  *    D2 FOR THE VALUE IN ASCII OF THE DATA
00001694                           772  *    D3 FOR CONVERT FINAL RESULT
00001694                           773  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
00001694                           774  *    A0 LOCATION OF THE DATA   
00001694                           775  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
00001694                           776  ASCII_TO_HEX:
00001694  =00000001                777  ASCII_TO_HEX_RETURN_OK EQU $1
00001694  45F9 00009000            778      LEA RETURN_ADDRESS, A2
0000169A  4252                     779      CLR.W (A2)
0000169C  42AA 0002                780      CLR.L 2(A2)
000016A0  206F 000C                781      MOVE.L 12(SP),A0
000016A4                           782   ; LOCATION OF THE DATA
000016A4  202F 0008                783      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000016A8  222F 0004                784      MOVE.L 4(SP), D1  ; MAX LENGTH
000016AC  B280                     785      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000016AE  6D00 0076                786      BLT ASCII_TO_HEX_FAILED_0
000016B2  4281                     787      CLR.L D1 ; FOR LOOPING
000016B4                           788  ASCII_TO_HEX_LOOP:
000016B4  B081                     789     CMP.L D1, D0 ;COMPARE FOR LOOPING
000016B6  6700 0068                790     BEQ ASCII_TO_HEX_END_LOOP
000016BA                           791     ; D2 USE FOR STORE DATA 
000016BA  1418                     792      MOVE.B (A0)+, D2
000016BC  0C02 002F                793      CMPI.B #47, D2
000016C0                           794  ASCII_TO_HEX_CHECK_GT_0
000016C0  6E00 0006                795      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
000016C4  6000 0066                796      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
000016C8                           797  ASCII_TO_HEX_CHECK_LT_9:
000016C8  0C02 003A                798      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
000016CC  6D00 001E                799      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
000016D0                           800      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
000016D0  6000 0002                801      BRA ASCII_TO_HEX_CHECK_GT_A
000016D4                           802  ASCII_TO_HEX_CHECK_GT_A:
000016D4  0C02 0040                803      CMPI.B #64, D2
000016D8  6E00 0006                804      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
000016DC  6000 004E                805      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
000016E0                           806  ASCII_TO_HEX_CHECK_LT_F
000016E0  0C02 0047                807      CMPI.B #71, D2
000016E4  6D00 0020                808      BLT ASCII_TO_HEX_CONVERT_LETTER
000016E8  6000 0042                809      BRA ASCII_TO_HEX_FAILED_2
000016EC                           810  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
000016EC                           811  ASCII_TO_HEX_CONVERT_NUMBER:
000016EC  2800                     812       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
000016EE  0402 0030                813       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
000016F2  9881                     814       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
000016F4  5344                     815       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
000016F6  C8FC 0004                816       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
000016FA  E9A2                     817       ASL.L D4, D2 ; SHIFT DATA
000016FC  D5AA 0002                818       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
00001700  4282                     819       CLR.L D2
00001702  5241                     820       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001704  60AE                     821       BRA ASCII_TO_HEX_LOOP
00001706                           822  ASCII_TO_HEX_CONVERT_LETTER:
00001706  2800                     823      MOVE.L D0, D4
00001708  0402 0037                824      SUB.B #55, D2
0000170C  9881                     825      SUB.L D1,D4
0000170E  5344                     826      SUBQ #1, D4
00001710  C8FC 0004                827      MULU #4, D4
00001714  E9A2                     828      ASL.L D4,D2
00001716  D5AA 0002                829      ADD.L D2, 2(A2)
0000171A  4282                     830      CLR.L D2 
0000171C  5241                     831      ADDQ #1, D1
0000171E  6094                     832      BRA ASCII_TO_HEX_LOOP
00001720                           833  ASCII_TO_HEX_END_LOOP:
00001720  34BC 0001                834      MOVE.W #1, (A2)
00001724  4E75                     835      RTS
00001726                           836      
00001726                           837  ASCII_TO_HEX_FAILED_0:
00001726  34BC 0002                838      MOVE.W #2, (A2)
0000172A  4E75                     839      RTS
0000172C                           840  ASCII_TO_HEX_FAILED_2:
0000172C  34BC 0002                841      MOVE.W #2, (A2)
00001730  4E75                     842      RTS 
00001732                           843  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
00001732                           844  * PARAMETERS:
00001732                           845  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
00001732                           846  * RETURN:
00001732                           847  *   NULL
00001732                           848  * NOTE:
00001732                           849  *   A0 USE TO POINT TO THE ADDRESS
00001732                           850  *   d1 USE TO MATH 
00001732                           851  INCRASE_POINTER_START_ADDRESS: 
00001732  222F 0004                852      MOVE.L 4(SP), D1
00001736  D3B9 00009100            853      ADD.L D1, (START_ADDRESS)
0000173C  4E75                     854      RTS
0000173E                           855  
0000173E                           856  * FETCH 16 BIT FROM START_ADDRESS
0000173E                           857  * PARAMTERS: 
0000173E                           858  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000173E                           859  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000173E                           860  * RETURN:
0000173E                           861  *   NULL
0000173E                           862  * NOTE:
0000173E                           863  *     A0 USE TO STORE THE OPCODE LOCATION
0000173E                           864  *     A2 USES TO RETURN THE OPCODE
0000173E                           865  FETCH_OPCODES:
0000173E  206F 0008                866      MOVE.L 8(SP), A0 ; LOCATION
00001742  246F 0004                867      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001746  3050                     868      MOVE.W (A0), A0
00001748  3488                     869      MOVE.W A0,(A2)
0000174A  31FC 0002 7008           870      MOVE.W #$2, (OFFSET_OPC_ADDRES)
00001750                           871  END_FETCH_OPCODES:
00001750  4E75                     872      RTS
00001752                           873  *------------------------------------------------------------------------------------------------------------------------------------------------------
00001752                           874  * LETS DECODE
00001752                           875  * jump table uses to jump to decode subroutine
00001752                           876  * PARAMATERS:
00001752                           877  * 1-(4(Sp)) Word - opcode
00001752                           878  * NOTE: 
00001752                           879  *   D1 USES TO STORE OPCODE
00001752                           880  JUMP_TABLE:
00001752  322F 0004                881      MOVE.W 4(SP), D1
00001756  4EB9 000017AC            882      JSR RTS
0000175C  4EB9 000017A2            883      JSR NOP
00001762  4EB9 000017B6            884      JSR JSR
00001768  4EB9 00001802            885      JSR LEA
0000176E                           886      * JSR ORI
0000176E  4EB9 00001DA2            887      JSR NEG
00001774  4EB9 000017B6            888      JSR JSR
0000177A  4EB9 00001870            889      JSR ADDA
00001780  4EB9 000018F4            890      JSR ADD 
00001786  4EB9 000019C6            891      JSR MOVEA 
0000178C  4EB9 00001A7C            892      JSR MOVE
00001792  4EB9 00001B40            893      JSR MOVEM 
00001798  4EB9 00001E0A            894      JSR BRA
0000179E                           895  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
0000179E                           896  END_JUMP_TABLE:
0000179E  4EB8 11DC                897      JSR UNSUPPORT_OPCODE
000017A2                           898  
000017A2                           899  NOP:
000017A2                           900  * constant for NOP 
000017A2  =00004E71                901  C_NOP EQU $4E71
000017A2  B27C 4E71                902      CMP.W #C_NOP, D1
000017A6  6700 0752                903      BEQ PRINT_NOP
000017AA  4E75                     904      RTS
000017AC                           905  
000017AC                           906  RTS:
000017AC                           907  * constant for RTS 
000017AC  =00004E75                908  C_RTS EQU $4E75
000017AC  B27C 4E75                909      CMP.W #C_RTS, D1
000017B0  6700 0718                910      BEQ PRINT_RTS
000017B4  4E75                     911      RTS
000017B6                           912  
000017B6                           913  JSR:
000017B6  =00004E80                914  JSR_OPCODE EQU %0100111010000000
000017B6  3401                     915      MOVE.W D1,D2 
000017B8                           916  * MASKING WITH UNIQUE OPCODE
000017B8  C47C FFC0                917      AND.W #%1111111111000000, D2
000017BC  B47C 4E80                918      CMP.W #JSR_OPCODE, D2
000017C0  6600 003E                919      BNE JSR_END 
000017C4                           920      ; check to make sure we support this register 
000017C4  3401                     921      MOVE.W D1, D2 
000017C6  C43C 003F                922      AND.B #%00111111, D2 
000017CA  3F02                     923      MOVE.W D2, -(SP)
000017CC  4EB8 11A2                924      JSR CHECK_SUPPORT_REGISTER 
000017D0  544F                     925      ADDQ #2, SP 
000017D2                           926      ; check return value
000017D2                           927      *  from print_register to see if it is unsupported register 
000017D2  3439 00009000            928      MOVE.W (RETURN_ADDRESS), D2 
000017D8  0C42 0002                929      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017DC  6700 0022                930      BEQ JSR_END
000017E0                           931      ; done checking 
000017E0  4EB9 00001F42            932      JSR PRINT_JSR
000017E6                           933  * MASKING TO GET MODE AND REGISTER
000017E6  1401                     934      MOVE.B D1,D2
000017E8  C43C 003F                935      AND.B #%00111111, D2
000017EC  48A7 4000                936      MOVEM.W D1, -(SP)
000017F0  3F02                     937      MOVE.W D2, -(SP)
000017F2  3F3C 0000                938      MOVE.W #$0, -(SP)
000017F6  4EB8 1248                939      JSR PRINT_REGISTER
000017FA  5882                     940      ADDQ.L #4, D2
000017FC  4C9F 0002                941      MOVEM.W (SP)+, D1
00001800                           942  JSR_END:
00001800  4E75                     943      RTS
00001802                           944  
00001802                           945  LEA:
00001802  3401                     946      MOVE.W D1,D2 
00001804  C47C F1C0                947      AND.W  #%1111000111000000, D2
00001808  0C42 41C0                948      CMPI.W #%0100000111000000, D2
0000180C  6600 0060                949      BNE LEA_END
00001810                           950  
00001810                           951      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001810  3401                     952      MOVE.W D1, D2 
00001812  C43C 003F                953      AND.B #%00111111, D2 
00001816  3F02                     954      MOVE.W D2, -(SP)
00001818  4EB8 11A2                955      JSR CHECK_SUPPORT_REGISTER
0000181C  544F                     956      ADDQ #2, SP 
0000181E                           957      ; check return value
0000181E                           958      *  from print_register to see if it is unsupported register 
0000181E  3439 00009000            959      MOVE.W (RETURN_ADDRESS), D2 
00001824  0C42 0002                960      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001828  6700 F818                961      BEQ FINISH_OPCODE
0000182C                           962      * END CHECKING
0000182C  4EB9 00001F54            963      JSR PRINT_LEA
00001832  1401                     964      MOVE.B D1,D2 
00001834                           965      ; MASK TO GET MODE AND REGISTER
00001834  C43C 003F                966      AND.B #%0000000000111111, D2
00001838  48A7 4000                967      MOVEM.W D1, -(SP)
0000183C  3F02                     968      MOVE.W D2, -(SP)
0000183E  3F3C 0000                969      MOVE.W #$0, -(SP)
00001842  4EB8 1248                970      JSR PRINT_REGISTER
00001846  588F                     971      ADDQ.L #$4, SP
00001848  4C9F 0002                972      MOVEM.W (SP)+, D1
0000184C  4EB8 10CC                973      JSR PRINT_COMMA
00001850                           974      ; MASK TO GET DESTINATION REGISTER
00001850  3401                     975      MOVE.W D1,D2
00001852  C47C 0E00                976      AND.W #%0000111000000000, D2
00001856  E04A                     977      LSR.W #$08, D2
00001858  E24A                     978      LSR.W #$01, D2
0000185A  843C 0008                979      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
0000185E  3F02                     980      MOVE.W D2, -(SP)
00001860  3F3C 0000                981      MOVE.W #$0, -(SP) 
00001864  4EB8 1248                982      JSR PRINT_REGISTER
00001868  588F                     983      ADDQ.L #$04, SP
0000186A  6000 F7D6                984      BRA FINISH_OPCODE
0000186E                           985  LEA_END:
0000186E  4E75                     986      RTS
00001870                           987  
00001870                           988  ADDA:
00001870  =0000D0C0                989  C_ADDA EQU       %1101000011000000
00001870  =0000F0C0                990  ADDA_MASKING EQU %1111000011000000
00001870  =00000100                991  ADDA_SIZE_MASKING EQU %0000000100000000
00001870  =00000E00                992  ADDA_AN_MASKING EQU %0000111000000000
00001870  3401                     993      MOVE.W D1, D2
00001872  C47C F0C0                994      AND.W #ADDA_MASKING, D2 ; GET PATTERN
00001876  0C42 D0C0                995      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
0000187A  6600 0076                996      BNE ADDA_END 
0000187E                           997      ; CHECK TO MAKE SURE WE SUPPORT THE EA
0000187E  3401                     998      MOVE.W D1, D2 
00001880  C43C 003F                999      AND.B #%00111111, D2 
00001884  3F02                    1000      MOVE.W D2, -(SP)
00001886  4EB8 11A2               1001      JSR CHECK_SUPPORT_REGISTER
0000188A  544F                    1002      ADDQ #2, SP 
0000188C                          1003      ; check return value
0000188C                          1004      *  from print_register to see if it is unsupported register 
0000188C  3439 00009000           1005      MOVE.W (RETURN_ADDRESS), D2 
00001892  0C42 0002               1006      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001896  6700 F7AA               1007      BEQ FINISH_OPCODE
0000189A  4EB9 00001F66           1008      JSR PRINT_ADDA
000018A0  3401                    1009      MOVE.W D1, D2  ; START TO MASK SIZE 
000018A2  C47C 0100               1010      AND.W #ADDA_SIZE_MASKING,D2 
000018A6  E04A                    1011      LSR.W #8, D2 
000018A8  3C02                    1012      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
000018AA  5246                    1013      ADDQ #$1, D6
000018AC  1F06                    1014      MOVE.B D6 , -(SP)
000018AE  4EB8 1134               1015      JSR PRINT_DATA
000018B2  548F                    1016      ADDQ.L #$2, SP 
000018B4  4EB8 10AE               1017      JSR PRINT_TAB
000018B8                          1018      ; GET MODE AND REGISTER
000018B8  3238 7006               1019      MOVE.W (OPCODE_ADDRESS), D1 
000018BC  1401                    1020      MOVE.B D1, D2 
000018BE  C43C 003F               1021      AND.B #%00111111, D2 
000018C2  3F02                    1022      MOVE.W D2, -(SP)
000018C4  3F06                    1023      MOVE.W D6, -(SP)
000018C6  4EB8 1248               1024      JSR PRINT_REGISTER 
000018CA  588F                    1025      ADDQ.L #$04, SP 
000018CC  4EB8 10CC               1026      JSR PRINT_COMMA
000018D0  3238 7006               1027      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
000018D4  3401                    1028      MOVE.W D1, D2
000018D6  C47C 0E00               1029      AND.W #ADDA_AN_MASKING, D2
000018DA  E04A                    1030      LSR.W #8, D2 
000018DC  E24A                    1031      LSR.W #1, D2 
000018DE  843C 0008               1032      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
000018E2  3F02                    1033      MOVE.W D2, -(SP)
000018E4  3F3C 0000               1034      MOVE.W #$0, -(SP)
000018E8  4EB8 1248               1035      JSR PRINT_REGISTER 
000018EC  588F                    1036      ADDQ.L #$4, SP 
000018EE  6000 F752               1037      BRA FINISH_OPCODE
000018F2                          1038  ADDA_END:
000018F2  4E75                    1039      RTS
000018F4                          1040  
000018F4                          1041  ADD: 
000018F4  =0000D000               1042  C_ADD EQU           %1101000000000000 ; PATTERN
000018F4  =0000F000               1043  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
000018F4  =0000003F               1044  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
000018F4  =00000E00               1045  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
000018F4  =000000C0               1046  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
000018F4  =00000100               1047  C_ADD_DIRECTION EQU %0000000100000000
000018F4  =00000000               1048  C_ADD_TO_D EQU      %0000000000000000
000018F4  =00000100               1049  C_ADD_FROM_D EQU    %0000000100000000
000018F4  3401                    1050      MOVE.W D1, D2 
000018F6                          1051      ; CHECK PATTERN 
000018F6  C47C F000               1052      AND.W #C_ADD_MASKING, D2 
000018FA  0C42 D000               1053      CMPI.W #C_ADD, D2 
000018FE  6600 00C4               1054      BNE ADD_END 
00001902                          1055      ; CHECK SUPPORT REGISTER 
00001902  3401                    1056      MOVE.W D1, D2 
00001904  C43C 003F               1057      AND.B #%00111111, D2 
00001908  3F02                    1058      MOVE.W D2, -(SP)
0000190A  4EB8 11A2               1059      JSR CHECK_SUPPORT_REGISTER
0000190E  544F                    1060      ADDQ #2, SP 
00001910                          1061      ; check return value
00001910                          1062      *  from print_register to see if it is unsupported register 
00001910  3439 00009000           1063      MOVE.W (RETURN_ADDRESS), D2 
00001916  0C42 0002               1064      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000191A  6700 F726               1065      BEQ FINISH_OPCODE
0000191E                          1066      
0000191E  4EB9 00001F74           1067      JSR PRINT_ADD 
00001924  3238 7006               1068      MOVE.W (OPCODE_ADDRESS), D1 
00001928  3401                    1069      MOVE.W D1, D2 
0000192A  C47C 00C0               1070      AND.W #C_ADD_SIZE, D2 
0000192E  EC4A                    1071      LSR.W #6, D2
00001930  1C02                    1072      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001932                          1073  
00001932  1F02                    1074      MOVE.B D2, -(SP)
00001934  4EB8 1134               1075      JSR PRINT_DATA
00001938  548F                    1076      ADDQ.L #$02, SP 
0000193A  4EB8 10AE               1077      JSR PRINT_TAB 
0000193E                          1078      ; CHECK DIRECTION
0000193E  3238 7006               1079      MOVE.W (OPCODE_ADDRESS), D1 
00001942  3401                    1080      MOVE.W D1, D2  
00001944  C47C 0100               1081      AND.W #C_ADD_DIRECTION, D2 
00001948  0C42 0000               1082      CMPI.W #C_ADD_TO_D, D2 
0000194C  6700 003C               1083      BEQ ADD_TO_D ; DN <EA> -> DN
00001950                          1084      ; otherwise from d 
00001950                          1085  ADD_FROM_D:
00001950  3238 7006               1086      MOVE.W (OPCODE_ADDRESS), D1 
00001954  3401                    1087      MOVE.W D1, D2 
00001956  C47C 0E00               1088      AND.W #C_ADD_REGISTER, D2 
0000195A  E08A                    1089      LSR.L #8, D2 
0000195C  E28A                    1090      LSR.L #1, D2 
0000195E  843C 0000               1091      OR.B #%00000000, D2
00001962  3F02                    1092      MOVE.W D2, -(SP)
00001964  3F3C 0000               1093      MOVE.W #$0, -(SP)
00001968  4EB8 1248               1094      JSR PRINT_REGISTER 
0000196C  5882                    1095      ADDQ.L #4, D2 
0000196E  4EB8 10CC               1096      JSR PRINT_COMMA 
00001972                          1097      
00001972  3238 7006               1098      MOVE.W (OPCODE_ADDRESS), D1 
00001976  3401                    1099      MOVE.W D1, D2 
00001978  C43C 003F               1100      AND.B #C_ADD_EA, D2 
0000197C  3F02                    1101      MOVE.W D2, -(SP)
0000197E  3F06                    1102      MOVE.W D6, -(SP)
00001980  4EB8 1248               1103      JSR PRINT_REGISTER
00001984  588F                    1104      ADDQ.L #4, SP 
00001986  6000 F6BA               1105      BRA FINISH_OPCODE
0000198A                          1106      
0000198A                          1107  ADD_TO_D:
0000198A  3238 7006               1108      MOVE.W (OPCODE_ADDRESS), D1 
0000198E  3401                    1109      MOVE.W D1, D2 
00001990                          1110      ; GET SOURCE REGISTER 
00001990  C43C 003F               1111      AND.B #C_ADD_EA, D2 
00001994  3F02                    1112      MOVE.W D2, -(SP)
00001996  3F06                    1113      MOVE.W D6, -(SP)
00001998  4EB8 1248               1114      JSR PRINT_REGISTER
0000199C  588F                    1115      ADDQ.L #4, SP 
0000199E  4EB8 10CC               1116      JSR PRINT_COMMA 
000019A2                          1117      ; PRINT DATA REGISTER 
000019A2  3238 7006               1118      MOVE.W (OPCODE_ADDRESS), D1 
000019A6  3401                    1119      MOVE.W D1, D2 
000019A8  C47C 0E00               1120      AND.W #C_ADD_REGISTER, D2 
000019AC  E04A                    1121      LSR.W #8, D2 
000019AE  E24A                    1122      LSR.W #1, D2 
000019B0                          1123      ; APPEND MODE TO D2 FOR PRINT_REGISTER
000019B0  843C 0000               1124      OR.B #%00000000, D2 
000019B4  3F02                    1125      MOVE.W D2, -(SP)
000019B6  3F3C 0000               1126      MOVE.W #$0, -(SP)
000019BA  4EB8 1248               1127      JSR PRINT_REGISTER
000019BE  588F                    1128      ADDQ.L #4, SP 
000019C0  6000 F680               1129      BRA FINISH_OPCODE
000019C4                          1130  ADD_END:
000019C4  4E75                    1131      RTS
000019C6                          1132  
000019C6                          1133  MOVEA: 
000019C6  =00001040               1134  C_MOVEA_PATTERN1 EQU  %0001000001000000
000019C6  =00003040               1135  C_MOVEA_PATTERN2 EQU  %0011000001000000
000019C6  =00002040               1136  C_MOVEA_PATTERN3 EQU  %0010000001000000
000019C6  =0000F1C0               1137  C_MOVEA_P_MASKING EQU %1111000111000000
000019C6  =00003000               1138  C_MOVEA_SIZE      EQU %0011000000000000
000019C6  =00000E00               1139  C_MOVEA_AN        EQU %0000111000000000
000019C6  =0000003F               1140  C_MOVEA_REGISTER  EQU %00111111
000019C6  3401                    1141      MOVE.W D1, D2 
000019C8  0242 F1C0               1142      ANDI.W #C_MOVEA_P_MASKING, D2 
000019CC  0C42 1040               1143      CMPI.W #C_MOVEA_PATTERN1, D2 
000019D0  6700 0014               1144      BEQ MOVEA_REGISTER_OK
000019D4  0C42 3040               1145      CMPI.W #C_MOVEA_PATTERN2, D2 
000019D8  6700 000C               1146      BEQ MOVEA_REGISTER_OK
000019DC  0C42 2040               1147      CMPI.W #C_MOVEA_PATTERN3, D2 
000019E0  6700 0004               1148      BEQ MOVEA_REGISTER_OK
000019E4  4E75                    1149      RTS
000019E6                          1150  MOVEA_REGISTER_OK:
000019E6                          1151      ; CHECK SUPPORT THE REGISTER 
000019E6  3401                    1152      MOVE.W D1, D2 
000019E8  C43C 003F               1153      AND.B #C_MOVEA_REGISTER, D2 
000019EC  3F02                    1154      MOVE.W D2, -(SP) 
000019EE  4EB8 11A2               1155      JSR CHECK_SUPPORT_REGISTER
000019F2  548F                    1156      ADDQ.L #2, SP 
000019F4  3439 00009000           1157      MOVE.W (RETURN_ADDRESS), D2 
000019FA  0C42 0002               1158      CMPI.W #C_UNSUPPORT_REGISTER, D2 
000019FE  6700 F642               1159      BEQ FINISH_OPCODE
00001A02                          1160      ; DONE CHECKING, NOW DECODE 
00001A02  4EB9 00001F82           1161      JSR PRINT_MOVEA 
00001A08                          1162      ; GET SIZE 
00001A08  3401                    1163      MOVE.W D1, D2 
00001A0A  C47C 3000               1164      AND.W #C_MOVEA_SIZE, D2 
00001A0E                          1165      ; SHIFT TO LSB 
00001A0E  E04A                    1166      LSR.W #8, D2 
00001A10  E84A                    1167      LSR.W #4, D2 
00001A12  0C02 0001               1168      CMPI.B #%00000001, D2
00001A16  6700 000E               1169      BEQ CONVERT_OPMODE_SIZE_B
00001A1A  0C02 0003               1170      CMPI.B #%00000011, D2 
00001A1E  6700 000C               1171      BEQ CONVERT_OPMODE_SIZE_W
00001A22  6000 000E               1172      BRA MOVEA_DONE_CONVERT
00001A26                          1173  CONVERT_OPMODE_SIZE_B:
00001A26  5302                    1174      SUBQ.B #1, D2 
00001A28  6000 0008               1175      BRA MOVEA_DONE_CONVERT
00001A2C                          1176  CONVERT_OPMODE_SIZE_W: 
00001A2C  5502                    1177      SUBQ.B #2, D2 
00001A2E  6000 0002               1178      BRA MOVEA_DONE_CONVERT
00001A32                          1179  
00001A32                          1180  MOVEA_DONE_CONVERT:
00001A32  3C02                    1181      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001A34  1F06                    1182      MOVE.B D6, -(SP)
00001A36  4EB8 1134               1183      JSR PRINT_DATA 
00001A3A  548F                    1184      ADDQ.L #2, SP 
00001A3C  4EB8 10AE               1185      JSR PRINT_TAB
00001A40                          1186      ; GET SOURCE REGISTER 
00001A40  3238 7006               1187      MOVE.W (OPCODE_ADDRESS), D1 
00001A44  3401                    1188      MOVE.W D1, D2 
00001A46  C43C 003F               1189      AND.B #C_MOVEA_REGISTER,D2 
00001A4A  3F02                    1190      MOVE.W D2, -(SP)
00001A4C  3F06                    1191      MOVE.W D6, -(SP)
00001A4E  4EB8 1248               1192      JSR PRINT_REGISTER
00001A52  588F                    1193      ADDQ.L #4, SP 
00001A54  4EB8 10CC               1194      JSR PRINT_COMMA
00001A58                          1195  
00001A58  3238 7006               1196      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
00001A5C  3401                    1197      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
00001A5E  C47C 0E00               1198      AND.W #C_MOVEA_AN, D2 
00001A62  E04A                    1199      LSR.W #8, D2 
00001A64  E24A                    1200      LSR.W #1, D2 
00001A66                          1201      ; ADD MODE FOR PRINT_REGISTER 
00001A66  0002 0008               1202      ORI.B #%00001000, D2 
00001A6A  3F02                    1203      MOVE.W D2, -(SP)
00001A6C  3F3C 0000               1204      MOVE.W #0, -(SP)
00001A70  4EB8 1248               1205      JSR PRINT_REGISTER ; PRINT AN 
00001A74  588F                    1206      ADDQ.L #4, SP 
00001A76  6000 F5CA               1207      BRA FINISH_OPCODE   
00001A7A                          1208  
00001A7A                          1209  MOVEA_END: 
00001A7A  4E75                    1210      RTS 
00001A7C                          1211  
00001A7C                          1212  MOVE: 
00001A7C  =00001000               1213  C_MOVE_PATTERN EQU   %0001000000000000
00001A7C  =00003000               1214  C_MOVE_PATTERN1 EQU  %0011000000000000
00001A7C  =00002000               1215  C_MOVE_PATTERN2 EQU  %0010000000000000
00001A7C  =0000F000               1216  C_MOVE_MASKING EQU   %1111000000000000
00001A7C  =00003000               1217  C_MOVE_SIZE EQU      %0011000000000000
00001A7C  =00000E00               1218  C_MOVE_DES_XN EQU    %0000111000000000
00001A7C  =000001C0               1219  C_MOVE_DES_MOD EQU   %0000000111000000
00001A7C  =0000003F               1220  C_MOVE_SRC_RE EQU    %00111111 
00001A7C  3401                    1221      MOVE.W D1, D2 
00001A7E  C47C F000               1222      AND.W #C_MOVE_MASKING, D2 
00001A82  0C42 1000               1223      CMPI.W #C_MOVE_PATTERN, D2 
00001A86  6700 0014               1224      BEQ MOVE_MATCH_PATTERN 
00001A8A  0C42 3000               1225      CMPI.W #C_MOVE_PATTERN1, D2 
00001A8E  6700 000C               1226      BEQ MOVE_MATCH_PATTERN 
00001A92  0C42 2000               1227      CMPI.W #C_MOVE_PATTERN2, D2 
00001A96  6700 0004               1228      BEQ MOVE_MATCH_PATTERN
00001A9A                          1229  MOVE_END:
00001A9A  4E75                    1230      RTS
00001A9C                          1231  MOVE_MATCH_PATTERN: 
00001A9C  3401                    1232      MOVE.W D1, D2 
00001A9E                          1233      ; CHECK IF WE SUPPORT THE REGISTER 
00001A9E                          1234      ; SOURCE REGISTER 
00001A9E  C43C 003F               1235      AND.B #C_MOVE_SRC_RE, D2
00001AA2  3A42                    1236      MOVE.W D2, A5 ; COPY FOR LATER USE
00001AA4  3F02                    1237      MOVE.W D2, -(SP)
00001AA6  4EB8 11A2               1238      JSR CHECK_SUPPORT_REGISTER 
00001AAA  548F                    1239      ADDQ.L #2, SP 
00001AAC  0C79 0002 00009000      1240      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001AB4  6700 F58C               1241      BEQ FINISH_OPCODE
00001AB8                          1242      ; DES REGISTER 
00001AB8                          1243      ;GET XN 
00001AB8  3238 7006               1244      MOVE.W (OPCODE_ADDRESS), D1 
00001ABC  3401                    1245      MOVE.W D1,D2 
00001ABE  C47C 0E00               1246      AND.W #C_MOVE_DES_XN, D2 
00001AC2  EC4A                    1247      LSR.W #6, D2 
00001AC4  C27C 01C0               1248      AND.W #C_MOVE_DES_MOD, D1 
00001AC8  8441                    1249      OR.W D1, D2 
00001ACA  E64A                    1250      LSR.W #3, D2 
00001ACC  3842                    1251      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001ACE  3F02                    1252      MOVE.W D2, -(SP)
00001AD0  4EB8 11A2               1253      JSR CHECK_SUPPORT_REGISTER
00001AD4  548F                    1254      ADDQ.L #2, SP 
00001AD6  0C79 11A2 00009000      1255      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001ADE  6700 F562               1256      BEQ FINISH_OPCODE
00001AE2                          1257      ; EVERYTHING IS OK 
00001AE2                          1258      
00001AE2  4EB9 00001F90           1259      JSR PRINT_MOVE
00001AE8  3238 7006               1260      MOVE.W (OPCODE_ADDRESS), D1 
00001AEC  3401                    1261      MOVE.W D1, D2 
00001AEE  C47C 3000               1262      AND.W #C_MOVE_SIZE, D2 
00001AF2  E04A                    1263      LSR.W #8, D2 
00001AF4  E80A                    1264      LSR.B #4, D2 
00001AF6  0C02 0001               1265      CMPI.B #1, D2 
00001AFA  6700 000E               1266      BEQ MOVE_OPMODE_BYTE
00001AFE  0C02 0003               1267      CMPI.B #3, D2 
00001B02  6700 000C               1268      BEQ MOVE_OPMODE_WORD
00001B06  6000 000E               1269      BRA MOVE_DONE_CONVERT
00001B0A                          1270  MOVE_OPMODE_BYTE:
00001B0A  5302                    1271      SUBQ.B #1, D2
00001B0C  6000 0008               1272      BRA MOVE_DONE_CONVERT
00001B10                          1273  MOVE_OPMODE_WORD:
00001B10  5502                    1274      SUBQ.B #2, D2 
00001B12  6000 0002               1275      BRA MOVE_DONE_CONVERT
00001B16                          1276  MOVE_DONE_CONVERT:
00001B16  3C02                    1277      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001B18  1F06                    1278      MOVE.B D6, -(SP) 
00001B1A  4EB8 1134               1279      JSR PRINT_DATA 
00001B1E  548F                    1280      ADDQ.L #2, SP
00001B20  4EB8 10AE               1281      JSR PRINT_TAB 
00001B24                          1282      ; PRINT SOURCE
00001B24  3F0D                    1283      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001B26  3F06                    1284      MOVE.W D6, -(SP) ; SIZE 
00001B28  4EB8 1248               1285      JSR PRINT_REGISTER
00001B2C  588F                    1286      ADDQ.L #4, SP 
00001B2E                          1287      ; PRINT DES 
00001B2E  4EB8 10CC               1288      JSR PRINT_COMMA 
00001B32  3F0C                    1289      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001B34  3F06                    1290      MOVE.W D6, -(SP) ; SIZE 
00001B36  4EB8 1248               1291      JSR PRINT_REGISTER 
00001B3A  588F                    1292      ADDQ.L #4, SP 
00001B3C  6000 F504               1293      BRA FINISH_OPCODE 
00001B40                          1294  
00001B40                          1295  MOVEM: 
00001B40  =00004880               1296  C_MOVEM_PATTERN EQU     %0100100010000000
00001B40  =0000FB80               1297  C_MOVEM_MASKING EQU     %1111101110000000
00001B40  =00000400               1298  C_MOVEM_DIR EQU         %0000010000000000
00001B40  =00000000               1299  C_MOVEM_TO_MEM EQU      %0000000000000000
00001B40  =00000400               1300  C_MOVEM_TO_REGISTER   EQU      %0000010000000000
00001B40  =00000040               1301  C_MOVEM_SIZE EQU        %0000000001000000
00001B40  =0000003F               1302  C_MOVEM_REGISTER EQU    %00111111
00001B40  3401                    1303      MOVE.W D1, D2 
00001B42  C47C FB80               1304      AND.W #C_MOVEM_MASKING, D2 
00001B46  0C42 4880               1305      CMPI.W #C_MOVEM_PATTERN, D2 
00001B4A  6600 0254               1306      BNE MOVEM_END 
00001B4E                          1307      ; CHECK IF THE VALID REGISTER 
00001B4E  C47C 003F               1308      AND.W #C_MOVEM_REGISTER, D2 
00001B52  3F02                    1309      MOVE.W D2, -(SP)
00001B54  4EB8 11A2               1310      JSR CHECK_SUPPORT_REGISTER
00001B58  548F                    1311      ADDQ.L #2, SP 
00001B5A  0C79 0002 00009000      1312      CMPI.W #C_UNSUPPORT_REGISTER,(RETURN_ADDRESS)
00001B62  6700 F4DE               1313      BEQ FINISH_OPCODE
00001B66                          1314  
00001B66  4EB9 00001F9E           1315      JSR PRINT_MOVEM 
00001B6C                          1316      ; print size 
00001B6C  3238 7006               1317      MOVE.W (OPCODE_ADDRESS), D1 
00001B70  3401                    1318      MOVE.W D1, D2 
00001B72  C47C 0040               1319      AND.W #C_MOVEM_SIZE, D2 
00001B76  EC4A                    1320      LSR.W #6, D2 
00001B78  5202                    1321      ADD.B #1, D2 ; convert to Size for print_register
00001B7A  3C42                    1322      MOVE.W D2, A6 ; save to for later use 
00001B7C  1F02                    1323      MOVE.B D2, -(SP) 
00001B7E  4EB8 1134               1324      JSR PRINT_DATA 
00001B82  548F                    1325      ADDQ.L #2, SP 
00001B84  4EB8 10AE               1326      JSR PRINT_TAB
00001B88                          1327      ; GET DIRECTION
00001B88  3238 7006               1328      MOVE.W (OPCODE_ADDRESS), D1 
00001B8C  3401                    1329      MOVE.W D1, D2 
00001B8E  C47C 0400               1330      AND.W #C_MOVEM_DIR, D2 
00001B92  0C42 0000               1331      CMPI.W #C_MOVEM_TO_MEM, D2 
00001B96  6700 000A               1332      BEQ MOVEM_TO_MEM 
00001B9A  0C42 0400               1333      CMPI.W #C_MOVEM_TO_REGISTER, D2 
00001B9E  6700 0158               1334      BEQ MOVEM_TO_REGISTER
00001BA2                          1335  MOVEM_TO_MEM:
00001BA2                          1336      ; CHECK TO SEE IF IT IS PREDECREMENT 
00001BA2  3238 7006               1337      MOVE.W (OPCODE_ADDRESS), D1 
00001BA6  3401                    1338      MOVE.W D1, D2 
00001BA8  183C 0000               1339      MOVE.B #0, D4 ; FOR LOOP 
00001BAC  C43C 0038               1340      AND.B  #%00111000, D2 
00001BB0  0C02 0020               1341      CMPI.B #%00100000, D2 
00001BB4  6700 0006               1342      BEQ MTM_PRED_LOOP
00001BB8  6000 00A2               1343      BRA MTM_POST_LOOP
00001BBC                          1344  ; PREDECREMENT 
00001BBC                          1345  MTM_PRED_LOOP:
00001BBC  5204                    1346      ADDQ.B #1, D4 
00001BBE  0C04 0010               1347      CMPI.B #16, D4 
00001BC2  6700 0072               1348      BEQ MTM_PRED_LOOP_END 
00001BC6  207C 00009100           1349      MOVE.L #START_ADDRESS, A0 
00001BCC  2050                    1350      MOVE.L (A0), A0 
00001BCE  3428 0002               1351      MOVE.W 2(A0), D2 ; THIS IS WORD REGISTERS 
00001BD2  E97A                    1352      ROL.W D4, D2 
00001BD4  =00000001               1353  IS_ON EQU %00000001
00001BD4  C43C 0001               1354      AND.B #IS_ON, D2 
00001BD8  0C02 0001               1355      CMPI.B #IS_ON, D2 
00001BDC  66DE                    1356      BNE MTM_PRED_LOOP
00001BDE                          1357      ; OK LET PRINT 
00001BDE  0C04 0008               1358      CMPI.B #8, D4 
00001BE2  6E00 0006               1359      BGT MOVEM_PRINT_A ; TIME TO PRINT An
00001BE6  6000 001E               1360      BRA MOVEM_PRINT_D
00001BEA                          1361  MOVEM_PRINT_A: 
00001BEA  3A04                    1362      MOVE.W D4, D5 
00001BEC  5305                    1363      SUBQ.B #1, D5 
00001BEE  CA3C 0007               1364      AND.B #%00000111, D5 
00001BF2  8A3C 0008               1365      OR.B  #%00001000, D5 
00001BF6  3F05                    1366      MOVE.W D5, -(SP)
00001BF8  3F3C 0000               1367      MOVE.W #0, -(SP) 
00001BFC  4EB8 1248               1368      JSR PRINT_REGISTER
00001C00  588F                    1369      ADDQ.L #4, SP 
00001C02  6000 001A               1370      BRA DONE_PRINT_MOVEM_M
00001C06                          1371  MOVEM_PRINT_D:
00001C06  3A04                    1372      MOVE.W D4, D5 
00001C08  5305                    1373      SUBQ.B #1, D5 
00001C0A  CA3C 0007               1374      AND.B #%00000111, D5 
00001C0E  3F05                    1375      MOVE.W D5, -(SP)
00001C10  3F3C 0000               1376      MOVE.W #0, -(SP) 
00001C14  4EB8 1248               1377      JSR PRINT_REGISTER
00001C18  588F                    1378      ADDQ.L #4, SP 
00001C1A  6000 0002               1379      BRA DONE_PRINT_MOVEM_M
00001C1E                          1380  
00001C1E                          1381  DONE_PRINT_MOVEM_M:
00001C1E                          1382      ; PRINT / 
00001C1E  227C 00007010           1383      MOVE.L #OUTPUT_ADDRESS, A1 
00001C24  12BC 002F               1384      MOVE.B #'/', (A1) 
00001C28  137C 0000 0001          1385      MOVE.B #0, 1(A1)
00001C2E  103C 000E               1386      MOVE.B #14, D0 
00001C32  4E4F                    1387      TRAP #15
00001C34  6086                    1388      BRA MTM_PRED_LOOP
00001C36                          1389    
00001C36                          1390      
00001C36                          1391  MTM_PRED_LOOP_END:
00001C36  207C 00007006           1392      MOVE.L #OPCODE_ADDRESS,A0 
00001C3C  5468 0002               1393      ADDQ.W #2, 2(A0)
00001C40  4EB8 10CC               1394      JSR PRINT_COMMA 
00001C44                          1395      ; PRINT_REGISTER FOR DESTINATION 
00001C44  3238 7006               1396      MOVE.W (OPCODE_ADDRESS), D1 
00001C48  3401                    1397      MOVE.W D1,D2 
00001C4A  C43C 003F               1398      AND.B #C_MOVEM_REGISTER, D2 
00001C4E  3F02                    1399      MOVE.W D2, -(SP)
00001C50  3F0E                    1400      MOVE.W A6, -(SP)
00001C52  4EB8 1248               1401      JSR PRINT_REGISTER
00001C56  588F                    1402      ADDQ.L #4, SP
00001C58  6000 F3E8               1403      BRA FINISH_OPCODE
00001C5C                          1404  
00001C5C                          1405   MTM_POST_LOOP:
00001C5C  0C04 000F               1406      CMPI.B #15, D4 
00001C60  6700 0040               1407      BEQ MTM_POST_LOOP_END 
00001C64  207C 00009100           1408      MOVE.L #START_ADDRESS, A0 
00001C6A  2050                    1409      MOVE.L (A0), A0 
00001C6C  3428 0002               1410      MOVE.W 2(A0), D2 ; THIS IS WORD REGISTERS 
00001C70  E87A                    1411      ROR.W D4, D2 
00001C72  5204                    1412      ADDQ.B #1, D4 
00001C74  =00000001               1413  IS_ON EQU %00000001
00001C74  C43C 0001               1414      AND.B #IS_ON, D2 
00001C78  0C02 0001               1415      CMPI.B #IS_ON, D2 
00001C7C  66DE                    1416      BNE MTM_POST_LOOP
00001C7E                          1417      ; OK LET PRINT 
00001C7E  0C04 0008               1418      CMPI.B #8, D4 
00001C82  6E00 0044               1419      BGT MOVEM_PPRINT_A ; TIME TO PRINT An
00001C86  6000 005A               1420      BRA MOVEM_PPRINT_D
00001C8A                          1421  DONE_PRINT_MOVEM_P:
00001C8A  227C 00007010           1422      MOVE.L #OUTPUT_ADDRESS, A1 
00001C90  12BC 002F               1423      MOVE.B #'/', (A1) 
00001C94  137C 0000 0001          1424      MOVE.B #0, 1(A1)
00001C9A  103C 000E               1425      MOVE.B #14, D0 
00001C9E  4E4F                    1426      TRAP #15
00001CA0  60BA                    1427      BRA MTM_POST_LOOP
00001CA2                          1428  
00001CA2                          1429   MTM_POST_LOOP_END:
00001CA2  207C 00007006           1430      MOVE.L #OPCODE_ADDRESS,A0 
00001CA8  5468 0002               1431      ADDQ.W #2, 2(A0)
00001CAC  4EB8 10CC               1432      JSR PRINT_COMMA 
00001CB0                          1433      ; PRINT_REGISTER FOR DESTINATION 
00001CB0  3238 7006               1434      MOVE.W (OPCODE_ADDRESS), D1 
00001CB4  3401                    1435      MOVE.W D1,D2 
00001CB6  C43C 003F               1436      AND.B #C_MOVEM_REGISTER, D2 
00001CBA  3F02                    1437      MOVE.W D2, -(SP)
00001CBC  3F0E                    1438      MOVE.W A6, -(SP)
00001CBE  4EB8 1248               1439      JSR PRINT_REGISTER
00001CC2  588F                    1440      ADDQ.L #4, SP
00001CC4  6000 F37C               1441      BRA FINISH_OPCODE 
00001CC8                          1442  MOVEM_PPRINT_A: 
00001CC8  3A04                    1443      MOVE.W D4, D5 
00001CCA  5305                    1444      SUBQ.B #1, D5 
00001CCC  CA3C 0007               1445      AND.B #%00000111, D5 
00001CD0  8A3C 0008               1446      OR.B  #%00001000, D5 
00001CD4  3F05                    1447      MOVE.W D5, -(SP)
00001CD6  3F3C 0000               1448      MOVE.W #0, -(SP) 
00001CDA  4EB8 1248               1449      JSR PRINT_REGISTER
00001CDE  588F                    1450      ADDQ.L #4, SP 
00001CE0  60A8                    1451      BRA DONE_PRINT_MOVEM_P
00001CE2                          1452  MOVEM_PPRINT_D:
00001CE2  3A04                    1453      MOVE.W D4, D5 
00001CE4  5305                    1454      SUBQ.B #1, D5 
00001CE6  CA3C 0007               1455      AND.B #%00000111, D5 
00001CEA  3F05                    1456      MOVE.W D5, -(SP)
00001CEC  3F3C 0000               1457      MOVE.W #0, -(SP) 
00001CF0  4EB8 1248               1458      JSR PRINT_REGISTER
00001CF4  588F                    1459      ADDQ.L #4, SP 
00001CF6  6092                    1460      BRA DONE_PRINT_MOVEM_P
00001CF8                          1461  
00001CF8                          1462  MOVEM_TO_REGISTER:
00001CF8  3238 7006               1463      MOVE.W (OPCODE_ADDRESS), D1 
00001CFC  3401                    1464      MOVE.W D1,D2 
00001CFE  C43C 003F               1465      AND.B #C_MOVEM_REGISTER, D2 
00001D02  3F02                    1466      MOVE.W D2, -(SP) 
00001D04  3F0E                    1467      MOVE.W A6, -(SP) 
00001D06  5478 7008               1468      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001D0A  4EB8 1248               1469      JSR PRINT_REGISTER
00001D0E  5578 7008               1470      SUBQ.W #2, (OFFSET_OPC_ADDRES)
00001D12  588F                    1471      ADDQ.L #4, SP 
00001D14  4EB8 10CC               1472      JSR PRINT_COMMA
00001D18  183C 0000               1473      MOVE.B #0, D4 
00001D1C                          1474  MOVEM_TO_R_LOOP:
00001D1C  0C04 000F               1475      CMPI.B #15, D4 
00001D20  6700 0070               1476      BEQ MTR_POST_LOOP_END 
00001D24  207C 00009100           1477      MOVE.L #START_ADDRESS, A0 
00001D2A  2050                    1478      MOVE.L (A0), A0 
00001D2C  3428 0002               1479      MOVE.W 2(A0), D2 ; THIS IS WORD REGISTERS 
00001D30  E87A                    1480      ROR.W D4, D2 
00001D32  5204                    1481      ADDQ.B #1, D4 
00001D34  =00000001               1482  IS_ON EQU %00000001
00001D34  C43C 0001               1483      AND.B #IS_ON, D2 
00001D38  0C02 0001               1484      CMPI.B #IS_ON, D2 
00001D3C  66DE                    1485      BNE MOVEM_TO_R_LOOP
00001D3E                          1486      ; OK LET PRINT 
00001D3E  0C04 0008               1487      CMPI.B #8, D4 
00001D42  6E00 001E               1488      BGT MOVEM_RPRINT_A ; TIME TO PRINT An
00001D46  6000 0034               1489      BRA MOVEM_RPRINT_D
00001D4A                          1490  DONE_PRINT_MOVEM_R:
00001D4A  227C 00007010           1491      MOVE.L #OUTPUT_ADDRESS, A1 
00001D50  12BC 002F               1492      MOVE.B #'/', (A1) 
00001D54  137C 0000 0001          1493      MOVE.B #0, 1(A1)
00001D5A  103C 000E               1494      MOVE.B #14, D0 
00001D5E  4E4F                    1495      TRAP #15
00001D60  60BA                    1496      BRA MOVEM_TO_R_LOOP
00001D62                          1497  MOVEM_RPRINT_A: 
00001D62  3A04                    1498      MOVE.W D4, D5 
00001D64  5305                    1499      SUBQ.B #1, D5 
00001D66  CA3C 0007               1500      AND.B #%00000111, D5 
00001D6A  8A3C 0008               1501      OR.B  #%00001000, D5 
00001D6E  3F05                    1502      MOVE.W D5, -(SP)
00001D70  3F3C 0000               1503      MOVE.W #0, -(SP) 
00001D74  4EB8 1248               1504      JSR PRINT_REGISTER
00001D78  588F                    1505      ADDQ.L #4, SP 
00001D7A  60CE                    1506      BRA DONE_PRINT_MOVEM_R
00001D7C                          1507  MOVEM_RPRINT_D:
00001D7C  3A04                    1508      MOVE.W D4, D5 
00001D7E  5305                    1509      SUBQ.B #1, D5 
00001D80  CA3C 0007               1510      AND.B #%00000111, D5 
00001D84  3F05                    1511      MOVE.W D5, -(SP)
00001D86  3F3C 0000               1512      MOVE.W #0, -(SP) 
00001D8A  4EB8 1248               1513      JSR PRINT_REGISTER
00001D8E  588F                    1514      ADDQ.L #4, SP 
00001D90  60B8                    1515      BRA DONE_PRINT_MOVEM_R
00001D92                          1516      
00001D92                          1517  MTR_POST_LOOP_END:
00001D92  207C 00007006           1518      MOVE.L #OPCODE_ADDRESS,A0 
00001D98  5468 0002               1519      ADDQ.W #2, 2(A0)
00001D9C  6000 F2A4               1520      BRA FINISH_OPCODE 
00001DA0                          1521  
00001DA0                          1522  MOVEM_END:
00001DA0  4E75                    1523      RTS 
00001DA2                          1524  
00001DA2                          1525  
00001DA2                          1526  
00001DA2                          1527  
00001DA2                          1528  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001DA2                          1529  NEG:
00001DA2                          1530  * CONSTANT FOR NEG OPCODE
00001DA2  =00004400               1531  NEG_OPCODE EQU %0100010000000000
00001DA2  =0000FF00               1532  NEG_M      EQU %1111111100000000
00001DA2  =0000003F               1533  NEG_REG_M  EQU %0000000000111111
00001DA2  =000000C0               1534  NEG_SIZE_M EQU %0000000011000000
00001DA2  3401                    1535      MOVE.W D1, D2
00001DA4                          1536  * MASKING WITH NEG UNIQUE CODE
00001DA4  C47C FF00               1537      AND.W #NEG_M, D2
00001DA8  B47C 4400               1538      CMP.W #NEG_OPCODE, D2
00001DAC  6600 0056               1539      BNE NEG_END
00001DB0                          1540  
00001DB0                          1541  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001DB0  3401                    1542      MOVE.W D1, D2 
00001DB2  C43C 003F               1543      AND.B #NEG_REG_M, D2 
00001DB6  3F02                    1544      MOVE.W D2, -(SP)
00001DB8  4EB8 11A2               1545      JSR CHECK_SUPPORT_REGISTER
00001DBC  544F                    1546      ADDQ #2, SP 
00001DBE                          1547  * from print_register to see if it is unsupported register 
00001DBE  3439 00009000           1548      MOVE.W (RETURN_ADDRESS), D2 
00001DC4  0C42 0002               1549      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001DC8  6700 F278               1550      BEQ FINISH_OPCODE
00001DCC                          1551  
00001DCC  4EB9 00001EDE           1552      JSR PRINT_NEG
00001DD2  3238 7006               1553      MOVE.W (OPCODE_ADDRESS), D1 
00001DD6  3401                    1554      MOVE.W D1, D2
00001DD8                          1555  * MASKING TO GET NEG SIZE
00001DD8  C47C 00C0               1556      AND.W #NEG_SIZE_M, D2
00001DDC  EC42                    1557      ASR.W #6, D2
00001DDE  3C02                    1558      MOVE.W D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001DE0  1F06                    1559      MOVE.B D6, -(SP)
00001DE2  4EB8 1134               1560      JSR PRINT_DATA
00001DE6  548F                    1561      ADDQ.L #2, SP
00001DE8  4EB8 10AE               1562      JSR PRINT_TAB
00001DEC                          1563  
00001DEC  3238 7006               1564      MOVE.W (OPCODE_ADDRESS), D1     
00001DF0  3401                    1565      MOVE.W D1, D2
00001DF2                          1566  * MASKING TO GET MODE AND REGISTER
00001DF2  C47C 003F               1567      AND.W #NEG_REG_M, D2
00001DF6  3F02                    1568      MOVE.W D2, -(SP)
00001DF8  3F06                    1569      MOVE.W D6, -(SP)
00001DFA  4EB8 1248               1570      JSR PRINT_REGISTER
00001DFE  588F                    1571      ADDQ.L #$04, SP
00001E00  6000 F240               1572      BRA FINISH_OPCODE
00001E04                          1573  NEG_END: 
00001E04  4242                    1574      CLR.W D2
00001E06  4246                    1575      CLR.W D6
00001E08  4E75                    1576      RTS
00001E0A                          1577  
00001E0A                          1578  BRA:
00001E0A                          1579  * CONSTANT FOR BRA OPCODE
00001E0A  =00006000               1580  BRA_OPCODE EQU %0110000000000000
00001E0A  =00006000               1581  BRA_M      EQU %0110000000000000
00001E0A  =000000FF               1582  BRA_SIZE_M EQU %0000000011111111
00001E0A  3401                    1583      MOVE.W D1, D2
00001E0C                          1584  * MASKING WITH BRA UNIQUE CODE
00001E0C  C47C 6000               1585      AND.W #BRA_M, D2
00001E10  B47C 6000               1586      CMP.W #BRA_OPCODE, D2
00001E14  6600 0020               1587      BNE BRA_END
00001E18                          1588      ; displacement 
00001E18  4EB9 00001EEC           1589      JSR PRINT_BRA
00001E1E  3401                    1590      MOVE.W D1, D2
00001E20  3601                    1591      MOVE.W D1, D3
00001E22                          1592  * MASKING TO GET SIZE OF BRA
00001E22  C43C 00FF               1593      AND.B #BRA_SIZE_M, D2 
00001E26  B43C 0000               1594      CMP.B #0, D2
00001E2A  1F02                    1595      MOVE.B D2, -(SP)
00001E2C  4EB8 151C               1596      JSR PRINT_DISPLACEMENT
00001E30  548F                    1597      ADDQ.L #2, SP
00001E32  6000 F20E               1598      BRA FINISH_OPCODE
00001E36                          1599  BRA_END:
00001E36  4E75                    1600      RTS
00001E38                          1601  
00001E38                          1602      
00001E38                          1603  
00001E38                          1604  
00001E38                          1605  
00001E38                          1606  * OR:
00001E38                          1607  * * CONSTANT FOR OR OPCODE
00001E38                          1608  * OR_OPCODE EQU %
00001E38                          1609  * OR_M      EQU %
00001E38                          1610  * OR_SIZE_M EQU %
00001E38                          1611  *     MOVE.W D1, D2
00001E38                          1612  * * MASKING WITH OR UNIQUE CODE
00001E38                          1613  *     AND.W #OR_M, D2
00001E38                          1614  *     CMP.W #OR_OPCODE, D2
00001E38                          1615  *     BNE OR_END
00001E38                          1616  *     JSR PRINT_OR
00001E38                          1617  *     MOVE.W D1, D2
00001E38                          1618  *     MOVE.W D1, D3
00001E38                          1619  * * MASKING TO GET SIZE OF OR
00001E38                          1620  *     CMP.W #OR_SIZE_M, D2 
00001E38                          1621  * OR_END:
00001E38                          1622  *     RTS
00001E38                          1623  
00001E38                          1624  ORI:
00001E38                          1625  * CONSTANT FOR ORI OPCODE
00001E38  =00000000               1626  ORI_OPCODE EQU %0000000000000000
00001E38  =00000000               1627  ORI_M      EQU %0000000000000000
00001E38  =0000003F               1628  ORI_REG_M  EQU %0000000000111111
00001E38  =000000C0               1629  ORI_SIZE_M EQU %0000000011000000
00001E38  3401                    1630      MOVE.W D1, D2
00001E3A                          1631  * MASKING WITH ORI UNIQUE CODE
00001E3A  C47C 0000               1632      AND.W #ORI_M, D2
00001E3E  B47C 0000               1633      CMP.W #ORI_OPCODE, D2
00001E42  6600 007A               1634      BNE ORI_END
00001E46                          1635  
00001E46                          1636  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001E46  3401                    1637      MOVE.W D1, D2 
00001E48  C43C 003F               1638      AND.B #ORI_REG_M, D2 
00001E4C  3F02                    1639      MOVE.W D2, -(SP)
00001E4E  4EB8 11A2               1640      JSR CHECK_SUPPORT_REGISTER
00001E52  544F                    1641      ADDQ #2, SP 
00001E54                          1642  * from print_register to see if it is unsupported register 
00001E54  3439 00009000           1643      MOVE.W (RETURN_ADDRESS), D2 
00001E5A  0C42 0002               1644      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001E5E  6700 F1E2               1645      BEQ FINISH_OPCODE
00001E62                          1646  
00001E62  4EB9 00001F18           1647      JSR PRINT_ORI
00001E68                          1648      
00001E68  3238 7006               1649      MOVE.W (OPCODE_ADDRESS), D1
00001E6C  3401                    1650      MOVE.W D1, D2
00001E6E                          1651  * MASKING TO GET SIZE OF ORI
00001E6E  C47C 00C0               1652      AND.W #ORI_SIZE_M, D2 
00001E72  EC42                    1653      ASR.W #6, D2
00001E74  3C02                    1654      MOVE.W D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001E76  1F06                    1655      MOVE.B D6, -(SP)
00001E78  4EB8 1134               1656      JSR PRINT_DATA
00001E7C  548F                    1657      ADDQ.L #2, SP
00001E7E  4EB8 10AE               1658      JSR PRINT_TAB
00001E82                          1659  
00001E82                          1660   ORI_CONT:   
00001E82  3236 4000               1661      MOVE.W (A6, D4.W), D1     
00001E86  3401                    1662      MOVE.W D1, D2
00001E88  3A01                    1663      MOVE.W D1, D5
00001E8A                          1664  * MASKING WITH ORI UNIQUE CODE TO CHECK IF IT IS STILL ORI INSTRUCTION
00001E8A  C47C 0000               1665      AND.W #ORI_M, D2
00001E8E  B47C 0000               1666      CMP.W #ORI_OPCODE, D2
00001E92  6600 002A               1667      BNE ORI_END
00001E96                          1668  * MASKING TO GET MODE AND REGISTER
00001E96  3205                    1669      MOVE.W D5, D1
00001E98  3405                    1670      MOVE.W D5, D2
00001E9A  C47C 003F               1671      AND.W #ORI_REG_M, D2
00001E9E  3F02                    1672      MOVE.W D2, -(SP)
00001EA0  3F06                    1673      MOVE.W D6, -(SP)
00001EA2  4EB8 1248               1674      JSR PRINT_REGISTER
00001EA6  588F                    1675      ADDQ.L #$04, SP
00001EA8  5444                    1676      ADDQ.W #2, D4 * FOR INCREMENTING OFFSET IN THE OPCODE
00001EAA                          1677  
00001EAA  5203                    1678      ADDQ.B #1, D3 * FOR PRINTING COMMA ONCE
00001EAC  0C03 0001               1679      CMPI.B #1, D3
00001EB0  6F00 0008               1680      BLE PRINT_1_COMMA
00001EB4  60CC                    1681      BRA ORI_CONT
00001EB6  6000 F18A               1682      BRA FINISH_OPCODE
00001EBA                          1683  PRINT_1_COMMA:
00001EBA  4EB8 10CC               1684      JSR PRINT_COMMA
00001EBE                          1685  ORI_END:
00001EBE  4242                    1686      CLR.W D2
00001EC0  4243                    1687      CLR.W D3
00001EC2  4244                    1688      CLR.W D4
00001EC4  4245                    1689      CLR.W D5
00001EC6  4246                    1690      CLR.W D6
00001EC8  4E75                    1691      RTS
00001ECA                          1692  
00001ECA                          1693  * ROR:
00001ECA                          1694  * * CONSTANT FOR ROR OPCODE
00001ECA                          1695  * ROR_OPCODE EQU %
00001ECA                          1696  * ROR_M      EQU %
00001ECA                          1697  * ROR_SIZE_M EQU %
00001ECA                          1698  *     CLR.W D2
00001ECA                          1699  *     MOVE.W D1, D2
00001ECA                          1700  * * MASKING WITH ROR UNIQUE CODE
00001ECA                          1701  *     AND.W #ROR_M, D2
00001ECA                          1702  *     CMP.W #ROR_OPCODE, D2
00001ECA                          1703  *     BNE ROR_END
00001ECA                          1704  *     JSR PRINT_ROR
00001ECA                          1705  *     MOVE.W D1, D2
00001ECA                          1706  *     MOVE.W D1, D3
00001ECA                          1707  * * MASKING TO GET SIZE OF ROR
00001ECA                          1708  *     CMP.W #ROR_SIZE_M, D2 
00001ECA                          1709  * ROR_END:
00001ECA                          1710  *     RTS
00001ECA                          1711  
00001ECA                          1712  * ROL:
00001ECA                          1713  * * CONSTANT FROR ROL OPCODE
00001ECA                          1714  * ROL_OPCODE EQU %
00001ECA                          1715  * ROL_M      EQU %
00001ECA                          1716  * ROL_SIZE_M EQU %
00001ECA                          1717  *     CLR.W D2
00001ECA                          1718  *     MOVE.W D1, D2
00001ECA                          1719  * * MASKING WITH ROL UNIQUE CODE
00001ECA                          1720  *     AND.W #ROL_M, D2
00001ECA                          1721  *     CMP.W #ROL_OPCODE, D2
00001ECA                          1722  *     BNE ROL_END
00001ECA                          1723  *     JSR PRINT_ROL
00001ECA                          1724  *     MOVE.W D1, D2
00001ECA                          1725  *     MOVE.W D1, D3
00001ECA                          1726  * * MASKING TO GET SIZE OF ROL
00001ECA                          1727  *     CMP.W #ROL_SIZE_M, D2 
00001ECA                          1728  * ROL_END:
00001ECA                          1729  *     RTS
00001ECA                          1730  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001ECA                          1731  
00001ECA                          1732  
00001ECA                          1733  PRINT_RTS:
00001ECA  43F9 00001FBA           1734      LEA P_RTS, A1
00001ED0  103C 000E               1735      MOVE.B #14, D0
00001ED4  4E4F                    1736      TRAP #15
00001ED6  4EB8 10AE               1737      JSR PRINT_TAB
00001EDA  6000 F166               1738      BRA FINISH_OPCODE
00001EDE                          1739  PRINT_NEG:
00001EDE  43F9 00001FFA           1740      LEA P_NEG, A1
00001EE4  103C 000E               1741      MOVE.B #14, D0
00001EE8  4E4F                    1742      TRAP #15
00001EEA  4E75                    1743      RTS 
00001EEC                          1744  PRINT_BRA:
00001EEC  43F9 00002038           1745      LEA P_BRA, A1
00001EF2  103C 000E               1746      MOVE.B #14, D0
00001EF6  4E4F                    1747      TRAP #15
00001EF8  4E75                    1748      RTS 
00001EFA                          1749  PRINT_NOP:
00001EFA  43F9 00001FBE           1750      LEA P_NOP, A1
00001F00  103C 000E               1751      MOVE.B #14, D0
00001F04  4E4F                    1752      TRAP #15
00001F06  6000 F13A               1753      BRA FINISH_OPCODE
00001F0A                          1754  PRINT_OR:
00001F0A  43F9 00001FF3           1755      LEA P_OR, A1
00001F10  103C 000E               1756      MOVE.B #14, D0
00001F14  4E4F                    1757      TRAP #15
00001F16  4E75                    1758      RTS 
00001F18                          1759  PRINT_ORI:
00001F18  43F9 00001FF6           1760      LEA P_ORI, A1
00001F1E  103C 000E               1761      MOVE.B #14, D0
00001F22  4E4F                    1762      TRAP #15
00001F24  4E75                    1763      RTS
00001F26                          1764  PRINT_ROL:
00001F26  43F9 00002012           1765      LEA P_ROL, A1
00001F2C  103C 000E               1766      MOVE.B #14, D0
00001F30  4E4F                    1767      TRAP #15
00001F32  4E75                    1768      RTS 
00001F34                          1769  PRINT_ROR:
00001F34  43F9 00002016           1770      LEA P_ROR, A1
00001F3A  103C 000E               1771      MOVE.B #14, D0
00001F3E  4E4F                    1772      TRAP #15
00001F40  4E75                    1773      RTS 
00001F42                          1774  PRINT_JSR:
00001F42  43F9 0000203C           1775      LEA P_JSR, A1
00001F48  103C 000E               1776      MOVE.B #14, D0
00001F4C  4E4F                    1777      TRAP #15
00001F4E  4EB8 10AE               1778      JSR PRINT_TAB
00001F52  4E75                    1779      RTS 
00001F54                          1780  PRINT_LEA:
00001F54  43F9 00001FEF           1781      LEA P_LEA, A1
00001F5A  103C 000E               1782      MOVE.B #14, D0
00001F5E  4E4F                    1783      TRAP #15
00001F60  4EB8 10AE               1784      JSR PRINT_TAB
00001F64  4E75                    1785      RTS 
00001F66                          1786  PRINT_ADDA: 
00001F66  43F9 00001FD7           1787      LEA P_ADDA, A1 
00001F6C  103C 000E               1788      MOVE.B #14, D0
00001F70  4E4F                    1789      TRAP #15 
00001F72  4E75                    1790      RTS
00001F74                          1791  PRINT_ADD:
00001F74  43F9 00001FD3           1792      LEA P_ADD, A1 
00001F7A  103C 000E               1793      MOVE.B #14, D0 
00001F7E  4E4F                    1794      TRAP #15
00001F80  4E75                    1795      RTS
00001F82                          1796  PRINT_MOVEA: 
00001F82  43F9 00001FC7           1797      LEA P_MOVEA, A1 
00001F88  103C 000E               1798      MOVE.B #14, D0 
00001F8C  4E4F                    1799      TRAP #15 
00001F8E  4E75                    1800      RTS 
00001F90                          1801  PRINT_MOVE: 
00001F90  43F9 00001FC2           1802      LEA P_MOVE, A1 
00001F96  103C 000E               1803      MOVE.B #14, D0 
00001F9A  4E4F                    1804      TRAP #15 
00001F9C  4E75                    1805      RTS 
00001F9E                          1806  PRINT_MOVEM: 
00001F9E  43F9 00001FCD           1807      LEA P_MOVEM, A1 
00001FA4  103C 000E               1808      MOVE.B #14, D0
00001FA8  4E4F                    1809      TRAP #15
00001FAA  4E75                    1810      RTS 
00001FAC                          1811  PRINT_UNSUPPORTED: 
00001FAC  43F9 00002040           1812      LEA P_DATA, A1 
00001FB2  103C 000E               1813      MOVE.B #14, D0 
00001FB6  4E4F                    1814      TRAP #15 
00001FB8  4E75                    1815      RTS 
00001FBA                          1816  
00001FBA                          1817  
00001FBA                          1818  
00001FBA                          1819  
00001FBA                          1820  
00001FBA                          1821  
00001FBA                          1822  
00001FBA                          1823  
00001FBA                          1824  
00001FBA= 52 54 53 00             1825  P_RTS DC.B 'RTS',0
00001FBE= 4E 4F 50 00             1826  P_NOP DC.B 'NOP',0
00001FC2= 4D 4F 56 45 00          1827  P_MOVE DC.B 'MOVE',0
00001FC7= 4D 4F 56 45 41 00       1828  P_MOVEA DC.B 'MOVEA', 0
00001FCD= 4D 4F 56 45 4D 00       1829  P_MOVEM DC.B 'MOVEM', 0
00001FD3= 41 44 44 00             1830  P_ADD DC.B 'ADD', 0
00001FD7= 41 44 44 41 00          1831  P_ADDA DC.B 'ADDA',0
00001FDC= 53 55 42 00             1832  P_SUB DC.B 'SUB', 0
00001FE0= 53 55 42 51 00          1833  P_SUBQ DC.B 'SUBQ',0
00001FE5= 4D 55 4C 53 00          1834  P_MULS DC.B 'MULS',0
00001FEA= 44 49 56 53 00          1835  P_DIVS DC.B 'DIVS',0
00001FEF= 4C 45 41 00             1836  P_LEA DC.B 'LEA',0
00001FF3= 4F 52 00                1837  P_OR DC.B 'OR',0
00001FF6= 4F 52 49 00             1838  P_ORI DC.B 'ORI', 0
00001FFA= 4E 45 47 00             1839  P_NEG DC.B 'NEG', 0
00001FFE= 45 4F 52 00             1840  P_EOR DC.B 'EOR', 0
00002002= 4C 53 52 00             1841  P_LSR DC.B 'LSR',0
00002006= 4C 53 4C 00             1842  P_LSL DC.B 'LSL', 0
0000200A= 41 53 52 00             1843  P_ASR DC.B 'ASR', 0
0000200E= 41 53 4C 00             1844  P_ASL DC.B 'ASL',0 
00002012= 52 4F 4C 00             1845  P_ROL DC.B 'ROL', 0
00002016= 52 4F 52 00             1846  P_ROR DC.B 'ROR', 0
0000201A= 42 43 4C 52 00          1847  P_BCLR DC.B 'BCLR',0
0000201F= 43 4D 50 00             1848  P_CMP DC.B 'CMP', 0
00002023= 43 4D 50 49 00          1849  P_CMPI DC.B 'CMPI', 0
00002028= 42 43 53 00             1850  P_BCS DC.B 'BCS', 0
0000202C= 42 47 45 00             1851  P_BGE DC.B 'BGE', 0
00002030= 42 4C 54 00             1852  P_BLT DC.B 'BLT',0
00002034= 42 56 43 00             1853  P_BVC DC.B 'BVC', 0
00002038= 42 52 41 00             1854  P_BRA DC.B 'BRA',0
0000203C= 4A 53 52 00             1855  P_JSR DC.B 'JSR',0
00002040= 44 41 54 41 00          1856  P_DATA DC.B 'DATA',0
00002045                          1857  * P_RTS DC.B 'RTS',0
00002045  =00000004               1858  WORD_LENGTH EQU $04
00002045  =00000008               1859  LONG_LENGTH EQU $08
00002045= 31 30 30 32 30 30 ...   1860  TEST_VAL DC.B '10020009'
0000204D  =0000000A               1861  LF EQU $0A
0000204D  =0000000D               1862  CR EQU $0D
0000204D  =00000009               1863  HT  EQU  $09 
0000204D= 20 0D 0A 00             1864  NEW_LINE DC.B ' ',CR,LF,0
00002051                          1865  SIMHALT             ; halt simulator
00002051                          1866  * Put variables and constants here
00002051                          1867  
00002051                          1868  
00002051                          1869  
00002051                          1870  
00002051                          1871  
00002051                          1872  
00002051= 50 6C 65 61 73 65 ...   1873  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00002080= 50 6C 65 61 73 65 ...   1874  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
000020AD= 50 72 65 73 73 20 ...   1875  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
000020C7                          1876      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 18F4
ADDA                1870
ADDA_AN_MASKING     E00
ADDA_END            18F2
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             19C4
ADD_FROM_D          1950
ADD_TO_D            198A
ASCII_TO_HEX        1694
ASCII_TO_HEX_CHECK_GT_0  16C0
ASCII_TO_HEX_CHECK_GT_A  16D4
ASCII_TO_HEX_CHECK_LT_9  16C8
ASCII_TO_HEX_CHECK_LT_F  16E0
ASCII_TO_HEX_CONVERT_LETTER  1706
ASCII_TO_HEX_CONVERT_NUMBER  16EC
ASCII_TO_HEX_END_LOOP  1720
ASCII_TO_HEX_FAILED_0  1726
ASCII_TO_HEX_FAILED_2  172C
ASCII_TO_HEX_LOOP   16B4
ASCII_TO_HEX_RETURN_OK  1
BRA                 1E0A
BRA_END             1E36
BRA_M               6000
BRA_OPCODE          6000
BRA_SIZE_M          FF
CHECK_SUPPORT_REGISTER  11A2
CHECK_VALUE_IS_ODD  1666
CHECK_VALUE_IS_ODD_FAILED  168E
CLR_SCREEN          106A
CONTINUE_PRINT_REGISTER  1290
CONTINUE_PRINT_RE_NUMBER  12AC
CONVERT_OPMODE_SIZE_B  1A26
CONVERT_OPMODE_SIZE_W  1A2C
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_REGISTER    3F
C_MOVEM_SIZE        40
C_MOVEM_TO_MEM      0
C_MOVEM_TO_REGISTER  400
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_PRINT_MOVEM_M  1C1E
DONE_PRINT_MOVEM_P  1C8A
DONE_PRINT_MOVEM_R  1D4A
DONE_PRINT_NUMBER   12CA
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  168C
END_FETCH_OPCODES   1750
END_GET_INPUT       10AC
END_HEX_TO_ASCII    1658
END_JUMP_TABLE      179E
END_MAIN            1088
END_PRINT_COMMA     10DC
END_PRINT_DATA      1156
END_PRINT_DOLLAR_SIGN  10F4
END_PRINT_HASH_SIGN  110C
END_PRINT_HEX       1600
END_PRINT_NEW_LINE  1126
END_PRINT_REGISTER  12F4
END_PRINT_TAB       10C4
FETCH_OPCODES       173E
FINISH_OPCODE       1042
GET_ASCII_FROM_HEX  15EE
GET_INPUT           1094
HEX2ASCII_DONE_CONVERT  161A
HEX_MASKING         F
HEX_TO_ASCII        1602
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  164E
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   1622
HEX_TO_ASCII_NUMBER  1644
HEX_TO_ASCII_ROR    1662
HEX_TO_ASCII_SWAP   165E
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  1732
IS_ON               1
JSR                 17B6
JSR_END             1800
JSR_OPCODE          4E80
JUMP_TABLE          1752
LEA                 1802
LEA_END             186E
LF                  A
LONG_LENGTH         8
LOOP_START          100E
MAIN                1088
MOVE                1A7C
MOVEA               19C6
MOVEA_DONE_CONVERT  1A32
MOVEA_END           1A7A
MOVEA_REGISTER_OK   19E6
MOVEM               1B40
MOVEM_END           1DA0
MOVEM_PPRINT_A      1CC8
MOVEM_PPRINT_D      1CE2
MOVEM_PRINT_A       1BEA
MOVEM_PRINT_D       1C06
MOVEM_RPRINT_A      1D62
MOVEM_RPRINT_D      1D7C
MOVEM_TO_MEM        1BA2
MOVEM_TO_REGISTER   1CF8
MOVEM_TO_R_LOOP     1D1C
MOVE_DONE_CONVERT   1B16
MOVE_END            1A9A
MOVE_MATCH_PATTERN  1A9C
MOVE_OPMODE_BYTE    1B0A
MOVE_OPMODE_WORD    1B10
MTM_POST_LOOP       1C5C
MTM_POST_LOOP_END   1CA2
MTM_PRED_LOOP       1BBC
MTM_PRED_LOOP_END   1C36
MTR_POST_LOOP_END   1D92
NEG                 1DA2
NEG_END             1E04
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            204D
NOP                 17A2
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
ORI                 1E38
ORI_CONT            1E82
ORI_END             1EBE
ORI_M               0
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OUTPUT_ADDRESS      7010
PRINT_1_COMMA       1EBA
PRINT_A             1502
PRINT_AB_LONG       141E
PRINT_AB_SHORT      13BC
PRINT_ADD           1F74
PRINT_ADDA          1F66
PRINT_BRA           1EEC
PRINT_BYTE          115E
PRINT_CLOSE         14B4
PRINT_CLOSE_PLUS    14CE
PRINT_COMMA         10CC
PRINT_D             14E8
PRINT_DATA          1134
PRINT_DISPLACEMENT  151C
PRINT_DISPLACEMENT_M  1588
PRINT_DISPLACEMENT_M_N  15CA
PRINT_DISPLACEMENT_S  1532
PRINT_DISPLACEMENT_S_N  156E
PRINT_DOLLAR_SIGN   10E4
PRINT_HASH_SIGN     10FC
PRINT_HEX           15EA
PRINT_IMMEDIATE     12F6
PRINT_IMMEDIATE_BYTE  1332
PRINT_IMMEDIATE_LONG  1388
PRINT_IMMEDIATE_WORD  135C
PRINT_JSR           1F42
PRINT_LEA           1F54
PRINT_LONG          1176
PRINT_MINUS_OPEN    149A
PRINT_MOVE          1F90
PRINT_MOVEA         1F82
PRINT_MOVEM         1F9E
PRINT_NEG           1EDE
PRINT_NEW_LINE      1114
PRINT_NOP           1EFA
PRINT_OPEN          1480
PRINT_OR            1F0A
PRINT_ORI           1F18
PRINT_PC            1182
PRINT_REGISTER      1248
PRINT_ROL           1F26
PRINT_ROR           1F34
PRINT_RTS           1ECA
PRINT_TAB           10AE
PRINT_UNSUPPORTED   1FAC
PRINT_WORD          116A
PROMT_INPUT_CONTINUE  20AD
PROMT_INPUT_END     2080
PROMT_INPUT_START   2051
P_ADD               1FD3
P_ADDA              1FD7
P_ASL               200E
P_ASR               200A
P_BCLR              201A
P_BCS               2028
P_BGE               202C
P_BLT               2030
P_BRA               2038
P_BVC               2034
P_CMP               201F
P_CMPI              2023
P_DATA              2040
P_DIVS              1FEA
P_EOR               1FFE
P_JSR               203C
P_LEA               1FEF
P_LSL               2006
P_LSR               2002
P_MOVE              1FC2
P_MOVEA             1FC7
P_MOVEM             1FCD
P_MULS              1FE5
P_NEG               1FFA
P_NOP               1FBE
P_OR                1FF3
P_ORI               1FF6
P_ROL               2012
P_ROR               2016
P_RTS               1FBA
P_SUB               1FDC
P_SUBQ              1FE0
RETURN_ADDRESS      9000
RTS                 17AC
SIMHALT             2051
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
TEST_VAL            2045
UNSUPPORT_OPCODE    11DC
UNSUPPORT_REGISTER  1210
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
