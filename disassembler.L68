00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 11:19:00 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : HEX DUMP Disassembler
00000000                             3  * Written by : Trinh Ta and Leo Le
00000000                             4  * Date       : 11/20/2018
00000000                             5  * Description: This is the final project of CSS 422
00000000                             6  *              This disassembler will take in the starting address
00000000                             7  *              and ending address of the user, then will start 
00000000                             8  *              disassemble the data within that specific section
00000000                             9  *              into assembly code and output back to the user.
00000000                            10  *              Each page will have a limit of offset in the 
00000000                            11  *              memory, so to move forward, press ENTER to get
00000000                            12  *              the next data page.
00000000                            13  *              The program will go on until it reaches the end
00000000                            14  *              of the ending address provided.
00000000                            15  *-----------------------------------------------------------
00001000                            16      ORG    $1000
00001000                            17  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                 18  OUTPUT_ADDRESS EQU $7010
00001000                            19  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 20  RETURN_ADDRESS EQU $9000
00001000                            21  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 22  START_ADDRESS EQU $09100
00001000                            23  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 24  END_ADDRESS EQU $7004
00001000                            25  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 26  OPCODE_ADDRESS EQU $7006
00001000                            27  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            28  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            29  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            30  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 31  OFFSET_OPC_ADDRES EQU $7008 
00001000                            32  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 33  SIZE_OPCODE EQU $700A
00001000                            34  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 35  STORE_REGISTER_ADDRESS EQU $700C
00001000                            36  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 37  STACK_ADDRESS EQU $8000
00001000                            38  START:                  ; first instruction of program
00001000                            39      * MOVE.L #$10AF241B, -(SP)
00001000                            40      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            41      * JSR PRINT_HEX
00001000                            42      * ADDQ.L #$08, SP
00001000                            43  
00001000                            44      * JSR PRINT_NEW_LINE
00001000                            45  
00001000                            46      * JSR PRINT_TAB
00001000                            47      * A0
00001000                            48  *     MOVE.L #%0000011100000100, D1
00001000                            49  *     MOVE.L D1, -(SP)
00001000                            50  *     JSR PRINT_REGISTER
00001000                            51  *     ADDQ.L #4, SP
00001000                            52  *     * A1
00001000                            53  *     MOVE.W #%0100, D1
00001000                            54  *     SWAP D1
00001000                            55  *     MOVE.W #$1, D1
00001000                            56  *     MOVE.L D1, -(SP)
00001000                            57  *     JSR PRINT_REGISTER
00001000                            58  *     ADDQ.L #4, SP
00001000                            59  * * A2
00001000                            60  *     MOVE.W #%0011, D1
00001000                            61  *     SWAP D1
00001000                            62  *     MOVE.W #$2, D1
00001000                            63  *     MOVE.L D1, -(SP)
00001000                            64  *     JSR PRINT_REGISTER
00001000                            65  *     ADDQ.L #4, SP
00001000                            66  * * A3
00001000                            67  *     MOVE.W #%0011, D1
00001000                            68  *     SWAP D1
00001000                            69  *     MOVE.W #$3, D1
00001000                            70  *     MOVE.L D1, -(SP)
00001000                            71  *     JSR PRINT_REGISTER
00001000                            72  *     ADDQ.L #4, SP
00001000                            73  * * A4
00001000                            74  *     MOVE.W #%0011, D1
00001000                            75  *     SWAP D1
00001000                            76  *     MOVE.W #$4, D1
00001000                            77  *     MOVE.L D1, -(SP)
00001000                            78  *     JSR PRINT_REGISTER
00001000                            79  *     ADDQ.L #4, SP
00001000                            80  * * A5
00001000                            81  *     MOVE.W #%0011, D1
00001000                            82  *     SWAP D1
00001000                            83  *     MOVE.W #$5, D1
00001000                            84  *     MOVE.L D1, -(SP)
00001000                            85  *     JSR PRINT_REGISTER
00001000                            86  *     ADDQ.L #4, SP
00001000                            87  * * A6
00001000                            88  *     MOVE.W #%0011, D1
00001000                            89  *     SWAP D1
00001000                            90  *     MOVE.W #$6, D1
00001000                            91  *     MOVE.L D1, -(SP)
00001000                            92  *     JSR PRINT_REGISTER
00001000                            93  *     ADDQ.L #4, SP
00001000                            94  * * A7
00001000                            95  *     MOVE.W #%0011, D1
00001000                            96  *     SWAP D1
00001000                            97  *     MOVE.W #$7, D1
00001000                            98  *     MOVE.L D1, -(SP)
00001000                            99  *     JSR PRINT_REGISTER
00001000                           100  *     ADDQ.L #4, SP
00001000                           101  
00001000                           102      * JSR PRINT_COMMA
00001000                           103      * JSR PRINT_DOLLAR_SIGN
00001000                           104      * JSR PRINT_HASH_SIGN
00001000                           105      * MOVE.B #$01, -(SP)
00001000                           106      * JSR PRINT_DATA
00001000                           107      * ADDQ.L #$2,SP
00001000                           108      * MOVE.B #$02, -(SP)
00001000                           109      * JSR PRINT_DATA
00001000                           110      * ADDQ.L #$2, SP
00001000                           111      * MOVE.B #$03, -(SP)
00001000                           112      * JSR PRINT_DATA
00001000                           113      * ADDQ.L #$2,SP
00001000                           114   
00001000  4207                     115      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            116      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            117      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            118      MOVE.L #$010000, (A0)
00001014                           119  LOOP_START:
00001014  2E7C 00008000            120      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            121      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            122      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000167A            123      JSR FETCH_OPCODES
0000102C  508F                     124      ADDQ.L #8, SP
0000102E  4EB9 000010B4            125      JSR PRINT_TAB
00001034  4EB9 00001188            126      JSR PRINT_PC
0000103A  207C 00007006            127      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     128      MOVE.W (A0), -(SP)
00001042  4EB9 0000168E            129      JSR JUMP_TABLE
00001048                           130  FINISH_OPCODE:
00001048  4280                     131      CLR.L D0
0000104A  23FC 00000000 00009000   132      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                133      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            134      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            135      JSR PRINT_NEW_LINE
00001064  5207                     136      ADDQ.B #1, D7 
00001066  0C07 001D                137      CMPI.B #29, D7 
0000106A  6700 0004                138      BEQ CLR_SCREEN
0000106E  60A4                     139      BRA LOOP_START
00001070                           140  
00001070                           141  CLR_SCREEN:
00001070  43F9 00001F9B            142      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                143      MOVE.B #13, D0 
0000107A  4E4F                     144      TRAP #15 
0000107C  4207                     145      CLR.B D7
0000107E  103C 0005                146      MOVE.B #5, D0 
00001082  4E4F                     147      TRAP #15 
00001084  0C01 000D                148      CMPI.B #$0D, D1 
00001088  678A                     149      BEQ LOOP_START
0000108A  6000 0002                150      BRA END_MAIN
0000108E                           151  
0000108E                           152  * Put program code here
0000108E                           153  MAIN:
0000108E                           154  
0000108E                           155  END_MAIN:
0000108E  103C 0009                156      MOVE.B #9, D0
00001092  4E4F                     157      TRAP #15
00001094  103C 000E                158      MOVE.B #14,D0
00001098  4E4F                     159      TRAP #15
0000109A                           160  * get user input 
0000109A                           161  GET_INPUT:
0000109A  43F9 00001F3F            162      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                163      MOVE.B #13, D0
000010A4  4E4F                     164      TRAP #15
000010A6  227C 00002000            165      MOVEA.L #$2000,A1
000010AC  103C 0002                166      MOVE.B #2, D0
000010B0  4E4F                     167      TRAP #15
000010B2                           168  END_GET_INPUT:
000010B2  4E75                     169      RTS   
000010B4                           170  
000010B4                           171  *--------------------------------------------------------------------
000010B4                           172  * PRINT_TAB 
000010B4                           173  PRINT_TAB: 
000010B4  227C 00007010            174      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            175      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                176      MOVE.B #0, (A1)+
000010C4  227C 00007010            177      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           178  END_PRINT_TAB:
000010CA  103C 000E                179      MOVE.B #14, D0
000010CE  4E4F                     180      TRAP #15
000010D0  4E75                     181      RTS
000010D2                           182  *--------------------------------------------------------------------
000010D2                           183  * PRINT_COMMA
000010D2                           184  PRINT_COMMA:
000010D2  227C 00007010            185      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                186      MOVE.W #', ', (A1)+
000010DC  12BC 0000                187      MOVE.B #0, (A1)
000010E0  5589                     188      SUBQ.L #2, A1
000010E2                           189  END_PRINT_COMMA:
000010E2  103C 000E                190      MOVE.B #14, D0
000010E6  4E4F                     191      TRAP #15
000010E8  4E75                     192      RTS
000010EA                           193  *--------------------------------------------------------------------
000010EA                           194  * PRINT_DOLLAR_SIGN
000010EA                           195  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            196      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                197      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           198      MOVE.B #0, 1(A1) 
000010FA                           199  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                200      MOVE.B #14, D0
000010FE  4E4F                     201      TRAP #15
00001100  4E75                     202      RTS
00001102                           203  *--------------------------------------------------------------------
00001102                           204  * PRINT_HASH_SIGN
00001102                           205  PRINT_HASH_SIGN:
00001102  227C 00007010            206      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                207      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           208      MOVE.B #0, 1(A1) 
00001112                           209  END_PRINT_HASH_SIGN:
00001112  103C 000E                210      MOVE.B #14, D0
00001116  4E4F                     211      TRAP #15
00001118  4E75                     212      RTS
0000111A                           213  
0000111A                           214  *--------------------------------------------------------------------
0000111A                           215  * PRINT A NEW LINE 
0000111A                           216  PRINT_NEW_LINE: 
0000111A  227C 00007010            217      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                218      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                219      MOVE.B #LF, (A1)+
00001128  12FC 0000                220      MOVE.B #0, (A1)+
0000112C                           221  END_PRINT_NEW_LINE:
0000112C  227C 00007010            222      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                223      MOVE.B #14, D0
00001136  4E4F                     224      TRAP #15 
00001138  4E75                     225      RTS
0000113A                           226  
0000113A                           227  
0000113A                           228  
0000113A                           229  
0000113A                           230  *--------------------------------------------------------------------
0000113A                           231  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           232  * PARAMETERS: 
0000113A                           233   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           234  *       00 - byte
0000113A                           235  *       01 - word
0000113A                           236  *       10 - long
0000113A                           237  * NOTE:
0000113A                           238  *   A1 USE FOR PRINT
0000113A                           239  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           240  PRINT_DATA:
0000113A  227C 00007010            241      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                242      MOVE.B 4(SP), D1
00001144  0C01 0000                243      CMPI.B #$00, D1
00001148  6700 001A                244      BEQ PRINT_BYTE
0000114C  0C01 0001                245      CMPI.B #$01, D1
00001150  6700 001E                246      BEQ PRINT_WORD
00001154  0C01 0002                247      CMPI.B #$02, D1 
00001158  6700 0022                248      BEQ PRINT_LONG
0000115C                           249  END_PRINT_DATA:
0000115C  103C 000E                250      MOVE.B #14, D0
00001160  4E4F                     251      TRAP #15
00001162  4E75                     252      RTS 
00001164                           253  
00001164                           254  PRINT_BYTE: 
00001164  32BC 2E42                255      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           256      MOVE.B #0, 2(A1)
0000116E  60EC                     257      BRA END_PRINT_DATA
00001170                           258  PRINT_WORD: 
00001170  32BC 2E57                259      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           260      MOVE.B #0, 2(A1)
0000117A  60E0                     261      BRA END_PRINT_DATA
0000117C                           262  PRINT_LONG: 
0000117C  32BC 2E4C                263      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           264      MOVE.B #0, 2(A1)
00001186  60D4                     265      BRA END_PRINT_DATA
00001188                           266  *--------------------------------------------------------------------
00001188                           267  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           268  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           269  * PARAMETERS:
00001188                           270  *   NONE
00001188                           271  * NOTES: 
00001188                           272  * A1 USE TO PRINT 
00001188                           273  * D0 FOR TRAP AND CONVERSION 
00001188                           274  PRINT_PC:
00001188  2039 00009100            275      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     276      MOVE.L D0, -(SP)
00001190  2F3C 00000008            277      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 00001526            278      JSR PRINT_HEX 
0000119C  508F                     279      ADDQ.L #8, SP 
0000119E  4EB8 10B4                280      JSR PRINT_TAB
000011A2  4EB8 10B4                281      JSR PRINT_TAB 
000011A6  4EB8 10B4                282      JSR PRINT_TAB
000011AA  4E75                     283      RTS 
000011AC                           284  
000011AC                           285  CHECK_SUPPORT_REGISTER:
000011AC  33FC 0000 00009000       286      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011B4  322F 0004                287      MOVE.W 4(SP), D1 
000011B8  3801                     288      MOVE.W D1,D4 
000011BA                           289     ; check to make sure we dont support the register 
000011BA  =00000028                290  DISPLACEMENT_REGISTER EQU %00101000
000011BA  =00000030                291  ADDRESS_WITH_INDEX EQU %00110000
000011BA  =0000003B                292  COUNTER_INDEX EQU %00111011 
000011BA  =0000003A                293  COUNTER_DISPLACEMENT EQU %00111010
000011BA  C83C 0038                294      AND.B #%00111000, D4 
000011BE  0C04 0028                295      CMPI.B #DISPLACEMENT_REGISTER, D4
000011C2  6700 0056                296      BEQ UNSUPPORT_REGISTER
000011C6  0C04 0030                297      CMPI.B #ADDRESS_WITH_INDEX, D4
000011CA  6700 004E                298      BEQ UNSUPPORT_REGISTER 
000011CE  3801                     299      MOVE D1, D4
000011D0  C83C 003F                300      AND.B #%00111111,D4
000011D4  0C04 003B                301      CMPI.B #COUNTER_INDEX, D4
000011D8  6700 0040                302      BEQ UNSUPPORT_REGISTER 
000011DC  0C04 003A                303      CMPI.B #COUNTER_DISPLACEMENT, D4
000011E0  6700 0038                304      BEQ UNSUPPORT_REGISTER
000011E4  4E75                     305      RTS
000011E6                           306  
000011E6                           307  UNSUPPORT_OPCODE: 
000011E6  267C 00009000            308      MOVE.L #RETURN_ADDRESS, A3
000011EC  4EB9 00001E9A            309      JSR PRINT_UNSUPPORTED
000011F2  4EB8 10B4                310      JSR PRINT_TAB 
000011F6  4EB8 1102                311      JSR PRINT_HASH_SIGN 
000011FA  4EB8 10EA                312      JSR PRINT_DOLLAR_SIGN 
000011FE  4281                     313      CLR.L D1 
00001200  3238 7006                314      MOVE.W (OPCODE_ADDRESS), D1 
00001204  2F01                     315      MOVE.L D1, -(SP) 
00001206  2F3C 00000004            316      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000120C  4EB9 00001526            317      JSR PRINT_HEX 
00001212  508F                     318      ADDQ.L #8, SP 
00001214  36BC 0002                319      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001218  4E75                     320      RTS 
0000121A                           321  UNSUPPORT_REGISTER:
0000121A  =00000002                322  C_UNSUPPORT_REGISTER EQU $2
0000121A  267C 00009000            323      MOVE.L #RETURN_ADDRESS, A3
00001220  4EB9 00001E9A            324      JSR PRINT_UNSUPPORTED
00001226  4EB8 10B4                325      JSR PRINT_TAB 
0000122A  4EB8 1102                326      JSR PRINT_HASH_SIGN 
0000122E  4EB8 10EA                327      JSR PRINT_DOLLAR_SIGN 
00001232  4281                     328      CLR.L D1 
00001234  3238 7006                329      MOVE.W (OPCODE_ADDRESS), D1 
00001238  2F01                     330      MOVE.L D1, -(SP) 
0000123A  2F3C 00000004            331      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001240  4EB9 00001526            332      JSR PRINT_HEX 
00001246  508F                     333      ADDQ.L #8, SP 
00001248  36BC 0002                334      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000124C  5478 7008                335      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001250  4E75                     336      RTS 
00001252                           337  
00001252                           338  
00001252                           339  *--------------------------------------------------------------------
00001252                           340  * PRINT_REGISTER
00001252                           341  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001252                           342  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001252                           343  * 2 - (4(sp)) byte value for how many byte for immediate value
00001252                           344  *      0 for a byte value
00001252                           345  *      1 for word value
00001252                           346  *      2 for long value 
00001252                           347  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001252                           348  * NOTE: 
00001252                           349  *   D1 FOR STORE THE PARAMETER
00001252                           350  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001252                           351  PRINT_REGISTER:
00001252  322F 0006                352     MOVE.W 6(SP), D1 
00001256                           353     
00001256  3401                     354     MOVE.W D1,D2
00001258  0C01 003C                355     CMPI.B #%00111100, D1
0000125C  6700 00A2                356     BEQ PRINT_IMMEDIATE
00001260  0C01 0038                357     CMPI.B #%00111000, D1
00001264  6700 0160                358     BEQ PRINT_AB_SHORT
00001268  0C01 0039                359     CMPI.B #%00111001, D1
0000126C  6700 01BA                360     BEQ PRINT_AB_LONG 
00001270                           361  
00001270  1401                     362     MOVE.B D1,D2
00001272  C43C 0038                363     AND.B #%00111000, D2
00001276  0C02 0010                364     CMPI.B #%00010000, D2
0000127A  6700 020E                365     BEQ PRINT_OPEN
0000127E                           366  
0000127E  1401                     367     MOVE.B D1,D2
00001280  C43C 0038                368     AND.B #%00111000, D2
00001284  0C02 0018                369     CMPI.B #%00011000, D2
00001288  6700 0200                370     BEQ PRINT_OPEN
0000128C                           371  
0000128C  1401                     372     MOVE.B D1,D2
0000128E  C43C 0038                373     AND.B #%00111000, D2
00001292  0C02 0020                374     CMPI.B #%00100000, D2
00001296  6700 020C                375     BEQ PRINT_MINUS_OPEN
0000129A                           376  
0000129A                           377  CONTINUE_PRINT_REGISTER:
0000129A  1401                     378     MOVE.B D1,D2
0000129C  C43C 0038                379     AND.B #%00111000, D2
000012A0  0C02 0000                380     CMPI.B #%00000000, D2
000012A4  6700 024C                381     BEQ PRINT_D
000012A8                           382  
000012A8  1401                     383     MOVE.B D1,D2
000012AA  C43C 0038                384     AND.B #%00111000, D2
000012AE  0C02 0008                385     CMPI.B #%00001000, D2
000012B2  6700 0258                386     BEQ PRINT_A 
000012B6                           387  
000012B6                           388  CONTINUE_PRINT_RE_NUMBER:
000012B6  227C 00007010            389      MOVE.L #OUTPUT_ADDRESS, A1
000012BC  1401                     390      MOVE.B D1,D2
000012BE  C43C 0007                391      AND.B #%00000111, D2
000012C2  0602 0030                392      ADD.B #48, D2 
000012C6  1282                     393      MOVE.B D2, (A1) 
000012C8  137C 0000 0001           394      MOVE.B #$0, 1(A1)
000012CE  103C 000E                395      MOVE.B #14, D0
000012D2  4E4F                     396      TRAP #15
000012D4                           397  DONE_PRINT_NUMBER:
000012D4  1401                     398     MOVE.B D1,D2
000012D6  C43C 0038                399     AND.B #%00111000, D2
000012DA  0C02 0010                400     CMPI.B #%00010000, D2
000012DE  6700 01DE                401     BEQ PRINT_CLOSE
000012E2                           402  
000012E2  1401                     403     MOVE.B D1,D2
000012E4  C43C 0038                404     AND.B #%00111000, D2
000012E8  0C02 0018                405     CMPI.B #%00011000, D2
000012EC  6700 01EA                406     BEQ PRINT_CLOSE_PLUS
000012F0                           407  
000012F0  1401                     408     MOVE.B D1,D2
000012F2  C43C 0038                409     AND.B #%00111000, D2
000012F6  0C02 0020                410     CMPI.B #%00100000, D2
000012FA  6700 01C2                411     BEQ PRINT_CLOSE
000012FE                           412  
000012FE                           413  END_PRINT_REGISTER:
000012FE  4E75                     414      RTS
00001300                           415  
00001300                           416  PRINT_IMMEDIATE:
00001300  227C 00007010            417      MOVE.L #OUTPUT_ADDRESS, A1
00001306  12BC 0023                418      MOVE.B #'#', (A1)
0000130A  137C 0000 0001           419      MOVE.B #$0, 1(A1)
00001310  103C 000E                420      MOVE.B #14, D0
00001314  4E4F                     421      TRAP #15
00001316  4EB8 10EA                422      JSR PRINT_DOLLAR_SIGN
0000131A  3038 7008                423      MOVE.W (OFFSET_OPC_ADDRES),D0
0000131E  342F 0004                424      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001322  0C02 0000                425      CMPI.B #$00, D2
00001326  6700 0014                426      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
0000132A  0C02 0001                427      CMPI.B #$01, D2
0000132E  6700 0036                428      BEQ PRINT_IMMEDIATE_WORD
00001332  0C02 0002                429      CMPI.B #$02, D2
00001336  6700 005A                430      BEQ PRINT_IMMEDIATE_LONG
0000133A  60C2                     431      BRA END_PRINT_REGISTER
0000133C                           432  
0000133C                           433  PRINT_IMMEDIATE_BYTE:
0000133C  2479 00009100            434      MOVE.L (START_ADDRESS), A2
00001342  3432 0000                435      MOVE.W (A2, D0), D2 ; 
00001346  48E7 E0C0                436      MOVEM.L D0-D2/A0-A1, -(SP)
0000134A  2F02                     437      MOVE.L D2, -(SP)
0000134C  2F3C 00000004            438      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001352  4EB9 00001526            439      JSR PRINT_HEX
00001358  508F                     440       ADDQ.L #$08, SP
0000135A  4CDF 0307                441      MOVEM.L (SP)+, D0-D2/A0-A1
0000135E  5440                     442      ADDQ.W #$2, D0
00001360  31C0 7008                443      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001364  6098                     444      BRA END_PRINT_REGISTER
00001366                           445  PRINT_IMMEDIATE_WORD:
00001366  2479 00009100            446      MOVE.L (START_ADDRESS), A2
0000136C  3432 0000                447      MOVE.W (A2, D0), D2 ; 
00001370  48E7 E0C0                448      MOVEM.L D0-D2/A0-A1, -(SP)
00001374  2F02                     449      MOVE.L D2, -(SP)
00001376  2F3C 00000004            450      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000137C  4EB9 00001526            451      JSR PRINT_HEX
00001382  508F                     452      ADDQ.L #$08, SP
00001384  4CDF 0307                453      MOVEM.L (SP)+, D0-D2/A0-A1
00001388  5440                     454      ADDQ.W #$2, D0
0000138A  31C0 7008                455      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000138E  6000 FF6E                456      BRA END_PRINT_REGISTER
00001392                           457  PRINT_IMMEDIATE_LONG:
00001392  3038 7008                458      MOVE.W (OFFSET_OPC_ADDRES),D0
00001396  2479 00009100            459      MOVE.L (START_ADDRESS), A2
0000139C  2432 0000                460      MOVE.L (A2, D0), D2 ; 
000013A0  48E7 E0C0                461      MOVEM.L D0-D2/A0-A1, -(SP)
000013A4  2F02                     462      MOVE.L D2, -(SP)
000013A6                           463      ; offset to get immediate value from opcode
000013A6  3038 7008                464      MOVE.W (OFFSET_OPC_ADDRES),D0
000013AA  2F3C 00000008            465      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013B0  4EB9 00001526            466      JSR PRINT_HEX
000013B6  508F                     467      ADDQ.L #$08, SP
000013B8  4CDF 0307                468      MOVEM.L (SP)+, D0-D2/A0-A1
000013BC  5840                     469      ADDQ.W #$4, D0
000013BE  31C0 7008                470      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C2  6000 FF3A                471      BRA END_PRINT_REGISTER
000013C6                           472  PRINT_AB_SHORT:
000013C6  227C 00007010            473      MOVE.L #OUTPUT_ADDRESS, A1
000013CC  32BC 2824                474      MOVE.W #'($', (A1)
000013D0  137C 0000 0002           475      MOVE.B #0, 2(A1)
000013D6  103C 000E                476      MOVE.B #14, D0
000013DA  4E4F                     477      TRAP #15
000013DC                           478      ; offset to get immediate value from opcode
000013DC  2479 00009100            479      MOVE.L (START_ADDRESS), A2
000013E2  3038 7008                480      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E6  3432 0000                481      MOVE.W (A2, D0), D2 ; 
000013EA  48E7 E0C0                482      MOVEM.L D0-D2/A0-A1, -(SP)
000013EE  2F02                     483      MOVE.L D2, -(SP)
000013F0  2F3C 00000004            484      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F6  4EB9 00001526            485      JSR PRINT_HEX
000013FC  508F                     486      ADDQ.L #$08, SP
000013FE  4CDF 0307                487      MOVEM.L (SP)+, D0-D2/A0-A1
00001402  5440                     488      ADDQ.W #$2, D0
00001404  31C0 7008                489      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001408                           490      ; print close parathesis with W
00001408  227C 00007010            491      MOVE.L #OUTPUT_ADDRESS, A1
0000140E  32BC 292E                492      MOVE.W #').', (A1)
00001412  137C 0057 0002           493      MOVE.B #'W',2(A1)
00001418  137C 0000 0003           494      MOVE.B #0, 3(A1)
0000141E  103C 000E                495      MOVE.B #14, D0
00001422  4E4F                     496      TRAP #15
00001424  6000 FED8                497      BRA END_PRINT_REGISTER
00001428                           498  PRINT_AB_LONG:
00001428                           499      ;print open parathesis
00001428  227C 00007010            500      MOVE.L #OUTPUT_ADDRESS, A1
0000142E  32BC 2824                501      MOVE.W #'($', (A1)
00001432  137C 0000 0002           502      MOVE.B #0, 2(A1)
00001438  103C 000E                503      MOVE.B #14, D0
0000143C  4E4F                     504      TRAP #15
0000143E                           505      ; print value in long
0000143E  2479 00009100            506      MOVE.L (START_ADDRESS), A2
00001444                           507      ; offset to get value from opcode
00001444  3038 7008                508      MOVE.W (OFFSET_OPC_ADDRES),D0
00001448  2432 0000                509      MOVE.L (A2, D0), D2 ; 
0000144C  48E7 E0C0                510      MOVEM.L D0-D2/A0-A1, -(SP)
00001450  2F02                     511      MOVE.L D2, -(SP)
00001452  2F3C 00000008            512      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001458  4EB9 00001526            513      JSR PRINT_HEX
0000145E  508F                     514      ADDQ.L #$08, SP
00001460  4CDF 0307                515      MOVEM.L (SP)+, D0-D2/A0-A1
00001464  5840                     516      ADDQ.W #$4, D0
00001466  31C0 7008                517      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000146A                           518      ; print close parathesis with W
0000146A  227C 00007010            519      MOVE.L #OUTPUT_ADDRESS, A1
00001470  32BC 292E                520      MOVE.W #').', (A1)
00001474  137C 004C 0002           521      MOVE.B #'L',2(A1)
0000147A  137C 0000 0003           522      MOVE.B #0, 3(A1)
00001480  103C 000E                523      MOVE.B #14, D0
00001484  4E4F                     524      TRAP #15
00001486  6000 FE76                525      BRA END_PRINT_REGISTER
0000148A                           526  
0000148A                           527  PRINT_OPEN:
0000148A  227C 00007010            528      MOVE.L #OUTPUT_ADDRESS, A1
00001490  12BC 0028                529      MOVE.B #'(', (A1)
00001494  137C 0000 0001           530      MOVE.B #$0, 1(A1)
0000149A  103C 000E                531      MOVE.B #14, D0
0000149E  4E4F                     532      TRAP #15
000014A0  6000 006A                533      BRA PRINT_A
000014A4                           534  PRINT_MINUS_OPEN: 
000014A4  227C 00007010            535      MOVE.L #OUTPUT_ADDRESS, A1
000014AA  32BC 2D28                536      MOVE.W #'-(', (A1)
000014AE  137C 0000 0002           537      MOVE.B #$0, 2(A1)
000014B4  103C 000E                538      MOVE.B #14, D0
000014B8  4E4F                     539      TRAP #15
000014BA  6000 0050                540      BRA PRINT_A
000014BE                           541  
000014BE                           542  PRINT_CLOSE:
000014BE  227C 00007010            543      MOVE.L #OUTPUT_ADDRESS, A1
000014C4  12BC 0029                544      MOVE.B #')', (A1)
000014C8  137C 0000 0001           545      MOVE.B #$0, 1(A1)
000014CE  103C 000E                546      MOVE.B #14, D0
000014D2  4E4F                     547      TRAP #15
000014D4  6000 FE28                548      BRA END_PRINT_REGISTER
000014D8                           549  PRINT_CLOSE_PLUS:
000014D8  227C 00007010            550      MOVE.L #OUTPUT_ADDRESS, A1
000014DE  32BC 292B                551      MOVE.W #')+', (A1)
000014E2  137C 0000 0002           552      MOVE.B #$0, 2(A1)
000014E8  103C 000E                553      MOVE.B #14, D0
000014EC  4E4F                     554      TRAP #15
000014EE  6000 FE0E                555      BRA END_PRINT_REGISTER
000014F2                           556  PRINT_D:
000014F2  227C 00007010            557      MOVE.L #OUTPUT_ADDRESS, A1 
000014F8  12BC 0044                558      MOVE.B #'D', (A1)
000014FC  137C 0000 0001           559      MOVE.B #$0, 1(A1)
00001502  103C 000E                560      MOVE.B #14, D0
00001506  4E4F                     561      TRAP #15
00001508  6000 FDAC                562      BRA CONTINUE_PRINT_RE_NUMBER
0000150C                           563  PRINT_A: 
0000150C  227C 00007010            564      MOVE.L #OUTPUT_ADDRESS, A1 
00001512  12BC 0041                565      MOVE.B #'A', (A1)
00001516  137C 0000 0001           566      MOVE.B #$0, 1(A1)
0000151C  103C 000E                567      MOVE.B #14, D0
00001520  4E4F                     568      TRAP #15
00001522  6000 FD92                569      BRA CONTINUE_PRINT_RE_NUMBER
00001526                           570  
00001526                           571  *-----------------------------------------------------------
00001526                           572  * PRINT HEX 
00001526                           573  * PARAMETERS:
00001526                           574  *   1- (8(SP)): VALUE IN HEX
00001526                           575  *   2- (4(SP)): HOW MANY BYTES
00001526                           576  * RETURN NULL
00001526                           577  *-----------------------------------------------------------
00001526                           578  PRINT_HEX:
00001526  6000 0016                579      BRA HEX_TO_ASCII
0000152A                           580  GET_ASCII_FROM_HEX:
0000152A  227C 00007010            581      MOVE.L #OUTPUT_ADDRESS, A1
00001530  103C 000E                582      MOVE.B #14, D0
00001534  4E4F                     583      TRAP #15
00001536  227C 00007010            584      MOVE.L #OUTPUT_ADDRESS, A1
0000153C                           585  END_PRINT_HEX:
0000153C  4E75                     586      RTS
0000153E                           587  *-----------------------------------------------------------
0000153E                           588  * CONVERT HEX TO ASCII 
0000153E                           589  * PARAMATERS:
0000153E                           590  *   1- (8(SP)): VALUE IN HEX
0000153E                           591  *   2- (4(SP)): HOW MANY BYTES
0000153E                           592  * RETURN:
0000153E                           593  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
0000153E                           594  * D0 STORES HEX VALUE
0000153E                           595  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
0000153E                           596  * D1 COUNT LOOP
0000153E                           597  * D2 CONVERT TO ASCII
0000153E                           598  * D3 USE TO CALCULATE SHIFT
0000153E                           599  HEX_TO_ASCII: 
0000153E  202F 0008                600      MOVE.L 8(SP), D0 
00001542  282F 0004                601      MOVE.L 4(SP), D4
00001546  0C44 0004                602      CMPI #HEX_TO_ASCII_WORD, D4 
0000154A  6700 004E                603      BEQ HEX_TO_ASCII_SWAP
0000154E  0C44 0002                604      CMPI #HEX_TO_ASCII_BYTE, D4
00001552  6700 EAAE                605      BEQ HEX_TO_ASCII_BYTE
00001556                           606  HEX2ASCII_DONE_CONVERT:
00001556  4201                     607      CLR.B D1
00001558  227C 00007010            608      MOVE.L #OUTPUT_ADDRESS, A1
0000155E  =0000000F                609  HEX_MASKING EQU $0000000F
0000155E  =00000002                610  HEX_TO_ASCII_BYTE EQU $02
0000155E  =00000004                611  HEX_TO_ASCII_WORD EQU $04
0000155E  =00000008                612  HEX_TO_ASCII_LONG EQU $08
0000155E                           613  
0000155E                           614  HEX_TO_ASCII_LOOP:
0000155E  B204                     615      CMP.B D4, D1
00001560  6700 0032                616      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001564                           617  
00001564  E998                     618      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001566  2600                     619      MOVE.L D0,D3 ; copy the value to mask
00001568  C6BC 0000000F            620      AND.L #HEX_MASKING, D3  ; mask
0000156E                           621  
0000156E  0C03 000A                622      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001572  6D00 000C                623      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001576                           624  
00001576  0C03 0048                625      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000157A  6D00 000E                626      BLT HEX_TO_ASCII_LETTER
0000157E                           627  
0000157E  60DE                     628      BRA HEX_TO_ASCII_LOOP
00001580                           629  HEX_TO_ASCII_NUMBER:
00001580  0603 0030                630      ADD.B #48, D3  ; convert number to letter
00001584  12C3                     631      MOVE.B D3, (A1)+ ; push to return memory
00001586  5201                     632      ADDQ.B #$1, D1 ; add for loop count
00001588  60D4                     633      BRA HEX_TO_ASCII_LOOP ; loop back
0000158A                           634  HEX_TO_ASCII_LETTER:
0000158A  0603 0037                635      ADD.B #55, D3 ; convert A-F in ascii
0000158E  12C3                     636      MOVE.B D3, (A1)+ ; push to return memory
00001590  5201                     637      ADDQ.B #$1, D1 ; add to for loop count
00001592  60CA                     638      BRA HEX_TO_ASCII_LOOP ;loop back
00001594                           639  END_HEX_TO_ASCII:
00001594  12FC 0000                640      MOVE.B #0, (A1)+ ; add null terminated value
00001598  6090                     641      BRA GET_ASCII_FROM_HEX
0000159A                           642  HEX_TO_ASCII_SWAP:
0000159A  4840                     643      SWAP D0
0000159C  60B8                     644      BRA HEX2ASCII_DONE_CONVERT
0000159E                           645     
0000159E                           646  HEX_TO_ASCII_ROR:
0000159E  E098                     647      ROR.L #$08, D0
000015A0  60B4                     648      BRA HEX2ASCII_DONE_CONVERT
000015A2                           649  
000015A2                           650  
000015A2                           651  *-----------------------------------------------------------
000015A2                           652  * CHECK IF THE VALUE IN HEX IS ODD 
000015A2                           653  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
000015A2                           654  * RETURN:
000015A2                           655  *   0: IF IT IS EVEN
000015A2                           656  *   1: IF IT IS ODD
000015A2                           657  * NOTE:
000015A2                           658  *   A0 IS FOR RETURN ADDRESS
000015A2                           659  *   D0 IS FOR HEX VALUE
000015A2                           660  CHECK_VALUE_IS_ODD:
000015A2  =00000000                661  VALUE_IS_EVEN EQU $0
000015A2  =00000001                662  VALUE_IS_ODD EQU $1
000015A2  41F9 00009000            663      LEA RETURN_ADDRESS, A0
000015A8  202F 0004                664      MOVE.L 4(SP), D0
000015AC  C0BC 0000FFFF            665      AND.L #$0000FFFF, D0
000015B2  80FC 0002                666      DIVU.W #2, D0
000015B6  4840                     667      SWAP D0      
000015B8  0C40 0000                668      CMPI.W #0, D0
000015BC  6700 000C                669      BEQ CHECK_VALUE_IS_ODD_FAILED
000015C0  30BC 0001                670      MOVE.W #VALUE_IS_ODD, (A0)
000015C4  6000 0002                671      BRA END_CHECK_VALUE_IS_ODD
000015C8                           672  END_CHECK_VALUE_IS_ODD:   
000015C8  4E75                     673      RTS
000015CA                           674  
000015CA                           675  CHECK_VALUE_IS_ODD_FAILED:
000015CA  30BC 0000                676      MOVE.W #VALUE_IS_EVEN, (A0)
000015CE  60F8                     677      BRA END_CHECK_VALUE_IS_ODD
000015D0                           678  *-----------------------------------------------------------
000015D0                           679  * CONVERT ASCII TO HEX
000015D0                           680  * PARAMETERS:
000015D0                           681  *   1. LOCATION OF THE ASCII
000015D0                           682  *   2. LENGTH OF THE ASCII
000015D0                           683  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015D0                           684  * RETURN:
000015D0                           685  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015D0                           686  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015D0                           687  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015D0                           688  * NOTE:
000015D0                           689  *    D0 FOR LENGTH OF ASCII
000015D0                           690  *    D1 FOR LOOPING
000015D0                           691  ; CURRENT INDEX
000015D0                           692  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015D0                           693  *    D3 FOR CONVERT FINAL RESULT
000015D0                           694  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015D0                           695  *    A0 LOCATION OF THE DATA   
000015D0                           696  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015D0                           697  ASCII_TO_HEX:
000015D0  =00000001                698  ASCII_TO_HEX_RETURN_OK EQU $1
000015D0  45F9 00009000            699      LEA RETURN_ADDRESS, A2
000015D6  4252                     700      CLR.W (A2)
000015D8  42AA 0002                701      CLR.L 2(A2)
000015DC  206F 000C                702      MOVE.L 12(SP),A0
000015E0                           703   ; LOCATION OF THE DATA
000015E0  202F 0008                704      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015E4  222F 0004                705      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E8  B280                     706      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015EA  6D00 0076                707      BLT ASCII_TO_HEX_FAILED_0
000015EE  4281                     708      CLR.L D1 ; FOR LOOPING
000015F0                           709  ASCII_TO_HEX_LOOP:
000015F0  B081                     710     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015F2  6700 0068                711     BEQ ASCII_TO_HEX_END_LOOP
000015F6                           712     ; D2 USE FOR STORE DATA 
000015F6  1418                     713      MOVE.B (A0)+, D2
000015F8  0C02 002F                714      CMPI.B #47, D2
000015FC                           715  ASCII_TO_HEX_CHECK_GT_0
000015FC  6E00 0006                716      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
00001600  6000 0066                717      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
00001604                           718  ASCII_TO_HEX_CHECK_LT_9:
00001604  0C02 003A                719      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001608  6D00 001E                720      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
0000160C                           721      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
0000160C  6000 0002                722      BRA ASCII_TO_HEX_CHECK_GT_A
00001610                           723  ASCII_TO_HEX_CHECK_GT_A:
00001610  0C02 0040                724      CMPI.B #64, D2
00001614  6E00 0006                725      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001618  6000 004E                726      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
0000161C                           727  ASCII_TO_HEX_CHECK_LT_F
0000161C  0C02 0047                728      CMPI.B #71, D2
00001620  6D00 0020                729      BLT ASCII_TO_HEX_CONVERT_LETTER
00001624  6000 0042                730      BRA ASCII_TO_HEX_FAILED_2
00001628                           731  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001628                           732  ASCII_TO_HEX_CONVERT_NUMBER:
00001628  2800                     733       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
0000162A  0402 0030                734       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
0000162E  9881                     735       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
00001630  5344                     736       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
00001632  C8FC 0004                737       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001636  E9A2                     738       ASL.L D4, D2 ; SHIFT DATA
00001638  D5AA 0002                739       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
0000163C  4282                     740       CLR.L D2
0000163E  5241                     741       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001640  60AE                     742       BRA ASCII_TO_HEX_LOOP
00001642                           743  ASCII_TO_HEX_CONVERT_LETTER:
00001642  2800                     744      MOVE.L D0, D4
00001644  0402 0037                745      SUB.B #55, D2
00001648  9881                     746      SUB.L D1,D4
0000164A  5344                     747      SUBQ #1, D4
0000164C  C8FC 0004                748      MULU #4, D4
00001650  E9A2                     749      ASL.L D4,D2
00001652  D5AA 0002                750      ADD.L D2, 2(A2)
00001656  4282                     751      CLR.L D2 
00001658  5241                     752      ADDQ #1, D1
0000165A  6094                     753      BRA ASCII_TO_HEX_LOOP
0000165C                           754  ASCII_TO_HEX_END_LOOP:
0000165C  34BC 0001                755      MOVE.W #1, (A2)
00001660  4E75                     756      RTS
00001662                           757      
00001662                           758  ASCII_TO_HEX_FAILED_0:
00001662  34BC 0002                759      MOVE.W #2, (A2)
00001666  4E75                     760      RTS
00001668                           761  ASCII_TO_HEX_FAILED_2:
00001668  34BC 0002                762      MOVE.W #2, (A2)
0000166C  4E75                     763      RTS 
0000166E                           764  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000166E                           765  * PARAMETERS:
0000166E                           766  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000166E                           767  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000166E                           768  * RETURN:
0000166E                           769  *   NULL
0000166E                           770  * NOTE:
0000166E                           771  *   A0 USE TO POINT TO THE ADDRESS
0000166E                           772  *   d1 USE TO MATH 
0000166E                           773  INCRASE_POINTER_START_ADDRESS: 
0000166E  206F 0008                774      MOVE.L 8(SP), A0
00001672  222F 0004                775      MOVE.L 4(SP), D1
00001676  D390                     776      ADD.L D1, (A0)
00001678  4E75                     777      RTS
0000167A                           778  
0000167A                           779  * FETCH 16 BIT FROM START_ADDRESS
0000167A                           780  * PARAMTERS: 
0000167A                           781  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000167A                           782  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000167A                           783  * RETURN:
0000167A                           784  *   NULL
0000167A                           785  * NOTE:
0000167A                           786  *     A0 USE TO STORE THE OPCODE LOCATION
0000167A                           787  *     A2 USES TO RETURN THE OPCODE
0000167A                           788  FETCH_OPCODES:
0000167A  206F 0008                789      MOVE.L 8(SP), A0 ; LOCATION
0000167E  246F 0004                790      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001682  3050                     791      MOVE.W (A0), A0
00001684  3488                     792      MOVE.W A0,(A2)
00001686  31FC 0002 7008           793      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000168C                           794  END_FETCH_OPCODES:
0000168C  4E75                     795      RTS
0000168E                           796  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000168E                           797  * LETS DECODE
0000168E                           798  * jump table uses to jump to decode subroutine
0000168E                           799  * PARAMATERS:
0000168E                           800  * 1-(4(Sp)) Word - opcode
0000168E                           801  * NOTE: 
0000168E                           802  *   D1 USES TO STORE OPCODE
0000168E                           803  JUMP_TABLE:
0000168E  322F 0004                804      MOVE.W 4(SP), D1
00001692  4EB9 00001700            805      JSR RTS
00001698  4EB9 000016F6            806      JSR NOP
0000169E  4EB9 0000170A            807      JSR JSR
000016A4  4EB9 00001756            808      JSR LEA
000016AA  4EB9 00001B36            809      JSR OR
000016B0  4EB9 00001C04            810      JSR ORI
000016B6  4EB9 00001C5A            811      JSR EOR
000016BC  4EB9 00001A94            812      JSR NEG
000016C2  4EB9 0000170A            813      JSR JSR
000016C8  4EB9 00001848            814      JSR ADD 
000016CE  4EB9 000017C4            815      JSR ADDA
000016D4  4EB9 00001CDC            816      JSR SUB
000016DA  4EB9 0000191A            817      JSR MOVEA 
000016E0  4EB9 000019D0            818      JSR MOVE
000016E6  4EB9 00001A94            819      JSR MOVEM 
000016EC  4EB9 00001AF8            820      JSR BRA
000016F2                           821  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016F2                           822  END_JUMP_TABLE:
000016F2  4EB8 11E6                823      JSR UNSUPPORT_OPCODE
000016F6                           824  
000016F6                           825  NOP:
000016F6                           826  * constant for NOP 
000016F6  =00004E71                827  C_NOP EQU $4E71
000016F6  B27C 4E71                828      CMP.W #C_NOP, D1
000016FA  6700 06DE                829      BEQ PRINT_NOP
000016FE  4E75                     830      RTS
00001700                           831  
00001700                           832  RTS:
00001700                           833  * constant for RTS 
00001700  =00004E75                834  C_RTS EQU $4E75
00001700  B27C 4E75                835      CMP.W #C_RTS, D1
00001704  6700 06A4                836      BEQ PRINT_RTS
00001708  4E75                     837      RTS
0000170A                           838  
0000170A                           839  JSR:
0000170A  =00004E80                840  JSR_OPCODE EQU %0100111010000000
0000170A  3401                     841      MOVE.W D1,D2 
0000170C                           842  * MASKING WITH UNIQUE OPCODE
0000170C  C47C FFC0                843      AND.W #%1111111111000000, D2
00001710  B47C 4E80                844      CMP.W #JSR_OPCODE, D2
00001714  6600 003E                845      BNE JSR_END 
00001718                           846      ; check to make sure we support this register 
00001718  3401                     847      MOVE.W D1, D2 
0000171A  C43C 003F                848      AND.B #%00111111, D2 
0000171E  3F02                     849      MOVE.W D2, -(SP)
00001720  4EB8 11AC                850      JSR CHECK_SUPPORT_REGISTER 
00001724  544F                     851      ADDQ #2, SP 
00001726                           852      ; check return value
00001726                           853      *  from print_register to see if it is unsupported register 
00001726  3439 00009000            854      MOVE.W (RETURN_ADDRESS), D2 
0000172C  0C42 0002                855      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001730  6700 0022                856      BEQ JSR_END
00001734                           857      ; done checking 
00001734  4EB9 00001E30            858      JSR PRINT_JSR
0000173A                           859  * MASKING TO GET MODE AND REGISTER
0000173A  1401                     860      MOVE.B D1,D2
0000173C  C43C 003F                861      AND.B #%00111111, D2
00001740  48A7 4000                862      MOVEM.W D1, -(SP)
00001744  3F02                     863      MOVE.W D2, -(SP)
00001746  3F3C 0000                864      MOVE.W #$0, -(SP)
0000174A  4EB8 1252                865      JSR PRINT_REGISTER
0000174E  5882                     866      ADDQ.L #4, D2
00001750  4C9F 0002                867      MOVEM.W (SP)+, D1
00001754                           868  JSR_END:
00001754  4E75                     869      RTS
00001756                           870  
00001756                           871  LEA:
00001756  3401                     872      MOVE.W D1,D2 
00001758  C47C F1C0                873      AND.W  #%1111000111000000, D2
0000175C  0C42 41C0                874      CMPI.W #%0100000111000000, D2
00001760  6600 0060                875      BNE LEA_END
00001764                           876  
00001764                           877      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001764  3401                     878      MOVE.W D1, D2 
00001766  C43C 003F                879      AND.B #%00111111, D2 
0000176A  3F02                     880      MOVE.W D2, -(SP)
0000176C  4EB8 11AC                881      JSR CHECK_SUPPORT_REGISTER
00001770  544F                     882      ADDQ #2, SP 
00001772                           883      ; check return value
00001772                           884      *  from print_register to see if it is unsupported register 
00001772  3439 00009000            885      MOVE.W (RETURN_ADDRESS), D2 
00001778  0C42 0002                886      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000177C  6700 F8CA                887      BEQ FINISH_OPCODE
00001780                           888      * END CHECKING
00001780  4EB9 00001E42            889      JSR PRINT_LEA
00001786  1401                     890      MOVE.B D1,D2 
00001788                           891      ; MASK TO GET MODE AND REGISTER
00001788  C43C 003F                892      AND.B #%0000000000111111, D2
0000178C  48A7 4000                893      MOVEM.W D1, -(SP)
00001790  3F02                     894      MOVE.W D2, -(SP)
00001792  3F3C 0000                895      MOVE.W #$0, -(SP)
00001796  4EB8 1252                896      JSR PRINT_REGISTER
0000179A  588F                     897      ADDQ.L #$4, SP
0000179C  4C9F 0002                898      MOVEM.W (SP)+, D1
000017A0  4EB8 10D2                899      JSR PRINT_COMMA
000017A4                           900      ; MASK TO GET DESTINATION REGISTER
000017A4  3401                     901      MOVE.W D1,D2
000017A6  C47C 0E00                902      AND.W #%0000111000000000, D2
000017AA  E04A                     903      LSR.W #$08, D2
000017AC  E24A                     904      LSR.W #$01, D2
000017AE  843C 0008                905      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017B2  3F02                     906      MOVE.W D2, -(SP)
000017B4  3F3C 0000                907      MOVE.W #$0, -(SP) 
000017B8  4EB8 1252                908      JSR PRINT_REGISTER
000017BC  588F                     909      ADDQ.L #$04, SP
000017BE  6000 F888                910      BRA FINISH_OPCODE
000017C2                           911  LEA_END:
000017C2  4E75                     912      RTS
000017C4                           913  
000017C4                           914  ADDA:
000017C4  =0000D0C0                915  C_ADDA EQU       %1101000011000000
000017C4  =0000F0C0                916  ADDA_MASKING EQU %1111000011000000
000017C4  =00000100                917  ADDA_SIZE_MASKING EQU %0000000100000000
000017C4  =00000E00                918  ADDA_AN_MASKING EQU %0000111000000000
000017C4  3401                     919      MOVE.W D1, D2
000017C6  C47C F0C0                920      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017CA  0C42 D0C0                921      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017CE  6600 0076                922      BNE ADDA_END 
000017D2                           923      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017D2  3401                     924      MOVE.W D1, D2 
000017D4  C43C 003F                925      AND.B #%00111111, D2 
000017D8  3F02                     926      MOVE.W D2, -(SP)
000017DA  4EB8 11AC                927      JSR CHECK_SUPPORT_REGISTER
000017DE  544F                     928      ADDQ #2, SP 
000017E0                           929      ; check return value
000017E0                           930      *  from print_register to see if it is unsupported register 
000017E0  3439 00009000            931      MOVE.W (RETURN_ADDRESS), D2 
000017E6  0C42 0002                932      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017EA  6700 F85C                933      BEQ FINISH_OPCODE
000017EE  4EB9 00001E54            934      JSR PRINT_ADDA
000017F4  3401                     935      MOVE.W D1, D2  ; START TO MASK SIZE 
000017F6  C47C 0100                936      AND.W #ADDA_SIZE_MASKING,D2 
000017FA  E04A                     937      LSR.W #8, D2 
000017FC  3C02                     938      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
000017FE  5246                     939      ADDQ #$1, D6
00001800  1F06                     940      MOVE.B D6 , -(SP)
00001802  4EB8 113A                941      JSR PRINT_DATA
00001806  548F                     942      ADDQ.L #$2, SP 
00001808  4EB8 10B4                943      JSR PRINT_TAB
0000180C                           944      ; GET MODE AND REGISTER
0000180C  3238 7006                945      MOVE.W (OPCODE_ADDRESS), D1 
00001810  1401                     946      MOVE.B D1, D2 
00001812  C43C 003F                947      AND.B #%00111111, D2 
00001816  3F02                     948      MOVE.W D2, -(SP)
00001818  3F06                     949      MOVE.W D6, -(SP)
0000181A  4EB8 1252                950      JSR PRINT_REGISTER 
0000181E  588F                     951      ADDQ.L #$04, SP 
00001820  4EB8 10D2                952      JSR PRINT_COMMA
00001824  3238 7006                953      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
00001828  3401                     954      MOVE.W D1, D2
0000182A  C47C 0E00                955      AND.W #ADDA_AN_MASKING, D2
0000182E  E04A                     956      LSR.W #8, D2 
00001830  E24A                     957      LSR.W #1, D2 
00001832  843C 0008                958      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
00001836  3F02                     959      MOVE.W D2, -(SP)
00001838  3F3C 0000                960      MOVE.W #$0, -(SP)
0000183C  4EB8 1252                961      JSR PRINT_REGISTER 
00001840  588F                     962      ADDQ.L #$4, SP 
00001842  6000 F804                963      BRA FINISH_OPCODE
00001846                           964  ADDA_END:
00001846  4E75                     965      RTS
00001848                           966  
00001848                           967  ADD: 
00001848  =0000D000                968  C_ADD EQU           %1101000000000000 ; PATTERN
00001848  =0000F000                969  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
00001848  =0000003F                970  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
00001848  =00000E00                971  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
00001848  =000000C0                972  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
00001848  =00000100                973  C_ADD_DIRECTION EQU %0000000100000000
00001848  =00000000                974  C_ADD_TO_D EQU      %0000000000000000
00001848  =00000100                975  C_ADD_FROM_D EQU    %0000000100000000
00001848  3401                     976      MOVE.W D1, D2 
0000184A                           977      ; CHECK PATTERN 
0000184A  C47C F000                978      AND.W #C_ADD_MASKING, D2 
0000184E  0C42 D000                979      CMPI.W #C_ADD, D2 
00001852  6600 00C4                980      BNE ADD_END 
00001856                           981      ; CHECK SUPPORT REGISTER 
00001856  3401                     982      MOVE.W D1, D2 
00001858  C43C 003F                983      AND.B #%00111111, D2 
0000185C  3F02                     984      MOVE.W D2, -(SP)
0000185E  4EB8 11AC                985      JSR CHECK_SUPPORT_REGISTER
00001862  544F                     986      ADDQ #2, SP 
00001864                           987      ; check return value
00001864                           988      *  from print_register to see if it is unsupported register 
00001864  3439 00009000            989      MOVE.W (RETURN_ADDRESS), D2 
0000186A  0C42 0002                990      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000186E  6700 F7D8                991      BEQ FINISH_OPCODE
00001872                           992      
00001872  4EB9 00001E62            993      JSR PRINT_ADD 
00001878  3238 7006                994      MOVE.W (OPCODE_ADDRESS), D1 
0000187C  3401                     995      MOVE.W D1, D2 
0000187E  C47C 00C0                996      AND.W #C_ADD_SIZE, D2 
00001882  EC4A                     997      LSR.W #6, D2
00001884  1C02                     998      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001886                           999  
00001886  1F02                    1000      MOVE.B D2, -(SP)
00001888  4EB8 113A               1001      JSR PRINT_DATA
0000188C  548F                    1002      ADDQ.L #$02, SP 
0000188E  4EB8 10B4               1003      JSR PRINT_TAB 
00001892                          1004      ; CHECK DIRECTION
00001892  3238 7006               1005      MOVE.W (OPCODE_ADDRESS), D1 
00001896  3401                    1006      MOVE.W D1, D2  
00001898  C47C 0100               1007      AND.W #C_ADD_DIRECTION, D2 
0000189C  0C42 0000               1008      CMPI.W #C_ADD_TO_D, D2 
000018A0  6700 003C               1009      BEQ ADD_TO_D ; DN <EA> -> DN
000018A4                          1010      ; otherwise from d 
000018A4                          1011  ADD_FROM_D:
000018A4  3238 7006               1012      MOVE.W (OPCODE_ADDRESS), D1 
000018A8  3401                    1013      MOVE.W D1, D2 
000018AA  C47C 0E00               1014      AND.W #C_ADD_REGISTER, D2 
000018AE  E08A                    1015      LSR.L #8, D2 
000018B0  E28A                    1016      LSR.L #1, D2 
000018B2  843C 0000               1017      OR.B #%00000000, D2
000018B6  3F02                    1018      MOVE.W D2, -(SP)
000018B8  3F3C 0000               1019      MOVE.W #$0, -(SP)
000018BC  4EB8 1252               1020      JSR PRINT_REGISTER 
000018C0  5882                    1021      ADDQ.L #4, D2 
000018C2  4EB8 10D2               1022      JSR PRINT_COMMA 
000018C6                          1023      
000018C6  3238 7006               1024      MOVE.W (OPCODE_ADDRESS), D1 
000018CA  3401                    1025      MOVE.W D1, D2 
000018CC  C43C 003F               1026      AND.B #C_ADD_EA, D2 
000018D0  3F02                    1027      MOVE.W D2, -(SP)
000018D2  3F06                    1028      MOVE.W D6, -(SP)
000018D4  4EB8 1252               1029      JSR PRINT_REGISTER
000018D8  588F                    1030      ADDQ.L #4, SP 
000018DA  6000 F76C               1031      BRA FINISH_OPCODE
000018DE                          1032      
000018DE                          1033  ADD_TO_D:
000018DE  3238 7006               1034      MOVE.W (OPCODE_ADDRESS), D1 
000018E2  3401                    1035      MOVE.W D1, D2 
000018E4                          1036      ; GET SOURCE REGISTER 
000018E4  C43C 003F               1037      AND.B #C_ADD_EA, D2 
000018E8  3F02                    1038      MOVE.W D2, -(SP)
000018EA  3F06                    1039      MOVE.W D6, -(SP)
000018EC  4EB8 1252               1040      JSR PRINT_REGISTER
000018F0  588F                    1041      ADDQ.L #4, SP 
000018F2  4EB8 10D2               1042      JSR PRINT_COMMA 
000018F6                          1043      ; PRINT DATA REGISTER 
000018F6  3238 7006               1044      MOVE.W (OPCODE_ADDRESS), D1 
000018FA  3401                    1045      MOVE.W D1, D2 
000018FC  C47C 0E00               1046      AND.W #C_ADD_REGISTER, D2 
00001900  E04A                    1047      LSR.W #8, D2 
00001902  E24A                    1048      LSR.W #1, D2 
00001904                          1049      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001904  843C 0000               1050      OR.B #%00000000, D2 
00001908  3F02                    1051      MOVE.W D2, -(SP)
0000190A  3F3C 0000               1052      MOVE.W #$0, -(SP)
0000190E  4EB8 1252               1053      JSR PRINT_REGISTER
00001912  588F                    1054      ADDQ.L #4, SP 
00001914  6000 F732               1055      BRA FINISH_OPCODE
00001918                          1056  ADD_END:
00001918  4E75                    1057      RTS
0000191A                          1058  
0000191A                          1059  MOVEA: 
0000191A  =00001040               1060  C_MOVEA_PATTERN1 EQU  %0001000001000000
0000191A  =00003040               1061  C_MOVEA_PATTERN2 EQU  %0011000001000000
0000191A  =00002040               1062  C_MOVEA_PATTERN3 EQU  %0010000001000000
0000191A  =0000F1C0               1063  C_MOVEA_P_MASKING EQU %1111000111000000
0000191A  =00003000               1064  C_MOVEA_SIZE      EQU %0011000000000000
0000191A  =00000E00               1065  C_MOVEA_AN        EQU %0000111000000000
0000191A  =0000003F               1066  C_MOVEA_REGISTER  EQU %00111111
0000191A  3401                    1067      MOVE.W D1, D2 
0000191C  0242 F1C0               1068      ANDI.W #C_MOVEA_P_MASKING, D2 
00001920  0C42 1040               1069      CMPI.W #C_MOVEA_PATTERN1, D2 
00001924  6700 0014               1070      BEQ MOVEA_REGISTER_OK
00001928  0C42 3040               1071      CMPI.W #C_MOVEA_PATTERN2, D2 
0000192C  6700 000C               1072      BEQ MOVEA_REGISTER_OK
00001930  0C42 2040               1073      CMPI.W #C_MOVEA_PATTERN3, D2 
00001934  6700 0004               1074      BEQ MOVEA_REGISTER_OK
00001938  4E75                    1075      RTS
0000193A                          1076  MOVEA_REGISTER_OK:
0000193A                          1077      ; CHECK SUPPORT THE REGISTER 
0000193A  3401                    1078      MOVE.W D1, D2 
0000193C  C43C 003F               1079      AND.B #C_MOVEA_REGISTER, D2 
00001940  3F02                    1080      MOVE.W D2, -(SP) 
00001942  4EB8 11AC               1081      JSR CHECK_SUPPORT_REGISTER
00001946  548F                    1082      ADDQ.L #2, SP 
00001948  3439 00009000           1083      MOVE.W (RETURN_ADDRESS), D2 
0000194E  0C42 0002               1084      CMPI.W #C_UNSUPPORT_REGISTER, D2 
00001952  6700 F6F4               1085      BEQ FINISH_OPCODE
00001956                          1086      ; DONE CHECKING, NOW DECODE 
00001956  4EB9 00001E7E           1087      JSR PRINT_MOVEA 
0000195C                          1088      ; GET SIZE 
0000195C  3401                    1089      MOVE.W D1, D2 
0000195E  C47C 3000               1090      AND.W #C_MOVEA_SIZE, D2 
00001962                          1091      ; SHIFT TO LSB 
00001962  E04A                    1092      LSR.W #8, D2 
00001964  E84A                    1093      LSR.W #4, D2 
00001966  0C02 0001               1094      CMPI.B #%00000001, D2
0000196A  6700 000E               1095      BEQ CONVERT_OPMODE_SIZE_B
0000196E  0C02 0003               1096      CMPI.B #%00000011, D2 
00001972  6700 000C               1097      BEQ CONVERT_OPMODE_SIZE_W
00001976  6000 000E               1098      BRA MOVEA_DONE_CONVERT
0000197A                          1099  CONVERT_OPMODE_SIZE_B:
0000197A  5302                    1100      SUBQ.B #1, D2 
0000197C  6000 0008               1101      BRA MOVEA_DONE_CONVERT
00001980                          1102  CONVERT_OPMODE_SIZE_W: 
00001980  5502                    1103      SUBQ.B #2, D2 
00001982  6000 0002               1104      BRA MOVEA_DONE_CONVERT
00001986                          1105  
00001986                          1106  MOVEA_DONE_CONVERT:
00001986  3C02                    1107      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001988  1F06                    1108      MOVE.B D6, -(SP)
0000198A  4EB8 113A               1109      JSR PRINT_DATA 
0000198E  548F                    1110      ADDQ.L #2, SP 
00001990  4EB8 10B4               1111      JSR PRINT_TAB
00001994                          1112      ; GET SOURCE REGISTER 
00001994  3238 7006               1113      MOVE.W (OPCODE_ADDRESS), D1 
00001998  3401                    1114      MOVE.W D1, D2 
0000199A  C43C 003F               1115      AND.B #C_MOVEA_REGISTER,D2 
0000199E  3F02                    1116      MOVE.W D2, -(SP)
000019A0  3F06                    1117      MOVE.W D6, -(SP)
000019A2  4EB8 1252               1118      JSR PRINT_REGISTER
000019A6  588F                    1119      ADDQ.L #4, SP 
000019A8  4EB8 10D2               1120      JSR PRINT_COMMA
000019AC                          1121  
000019AC  3238 7006               1122      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019B0  3401                    1123      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019B2  C47C 0E00               1124      AND.W #C_MOVEA_AN, D2 
000019B6  E04A                    1125      LSR.W #8, D2 
000019B8  E24A                    1126      LSR.W #1, D2 
000019BA                          1127      ; ADD MODE FOR PRINT_REGISTER 
000019BA  0002 0008               1128      ORI.B #%00001000, D2 
000019BE  3F02                    1129      MOVE.W D2, -(SP)
000019C0  3F3C 0000               1130      MOVE.W #0, -(SP)
000019C4  4EB8 1252               1131      JSR PRINT_REGISTER ; PRINT AN 
000019C8  588F                    1132      ADDQ.L #4, SP 
000019CA  6000 F67C               1133      BRA FINISH_OPCODE   
000019CE                          1134  
000019CE                          1135  MOVEA_END: 
000019CE  4E75                    1136      RTS 
000019D0                          1137  
000019D0                          1138  MOVE: 
000019D0  =00001000               1139  C_MOVE_PATTERN EQU   %0001000000000000
000019D0  =00003000               1140  C_MOVE_PATTERN1 EQU  %0011000000000000
000019D0  =00002000               1141  C_MOVE_PATTERN2 EQU  %0010000000000000
000019D0  =0000F000               1142  C_MOVE_MASKING EQU   %1111000000000000
000019D0  =00003000               1143  C_MOVE_SIZE EQU      %0011000000000000
000019D0  =00000E00               1144  C_MOVE_DES_XN EQU    %0000111000000000
000019D0  =000001C0               1145  C_MOVE_DES_MOD EQU   %0000000111000000
000019D0  =0000003F               1146  C_MOVE_SRC_RE EQU    %00111111 
000019D0  3401                    1147      MOVE.W D1, D2 
000019D2  C47C F000               1148      AND.W #C_MOVE_MASKING, D2 
000019D6  0C42 1000               1149      CMPI.W #C_MOVE_PATTERN, D2 
000019DA  6700 0014               1150      BEQ MOVE_MATCH_PATTERN 
000019DE  0C42 3000               1151      CMPI.W #C_MOVE_PATTERN1, D2 
000019E2  6700 000C               1152      BEQ MOVE_MATCH_PATTERN 
000019E6  0C42 2000               1153      CMPI.W #C_MOVE_PATTERN2, D2 
000019EA  6700 0004               1154      BEQ MOVE_MATCH_PATTERN
000019EE                          1155  MOVE_END:
000019EE  4E75                    1156      RTS
000019F0                          1157  MOVE_MATCH_PATTERN: 
000019F0  3401                    1158      MOVE.W D1, D2 
000019F2                          1159      ; CHECK IF WE SUPPORT THE REGISTER 
000019F2                          1160      ; SOURCE REGISTER 
000019F2  C43C 003F               1161      AND.B #C_MOVE_SRC_RE, D2
000019F6  3A42                    1162      MOVE.W D2, A5 ; COPY FOR LATER USE
000019F8  3F02                    1163      MOVE.W D2, -(SP)
000019FA  4EB8 11AC               1164      JSR CHECK_SUPPORT_REGISTER 
000019FE  548F                    1165      ADDQ.L #2, SP 
00001A00  0C79 0002 00009000      1166      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A08  6700 F63E               1167      BEQ FINISH_OPCODE
00001A0C                          1168      ; DES REGISTER 
00001A0C                          1169      ;GET XN 
00001A0C  3238 7006               1170      MOVE.W (OPCODE_ADDRESS), D1 
00001A10  3401                    1171      MOVE.W D1,D2 
00001A12  C47C 0E00               1172      AND.W #C_MOVE_DES_XN, D2 
00001A16  EC4A                    1173      LSR.W #6, D2 
00001A18  C27C 01C0               1174      AND.W #C_MOVE_DES_MOD, D1 
00001A1C  8441                    1175      OR.W D1, D2 
00001A1E  E64A                    1176      LSR.W #3, D2 
00001A20  3842                    1177      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A22  3F02                    1178      MOVE.W D2, -(SP)
00001A24  4EB8 11AC               1179      JSR CHECK_SUPPORT_REGISTER
00001A28  548F                    1180      ADDQ.L #2, SP 
00001A2A  0C79 11AC 00009000      1181      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A32  6700 F614               1182      BEQ FINISH_OPCODE
00001A36                          1183      ; EVERYTHING IS OK 
00001A36                          1184      
00001A36  4EB9 00001E8C           1185      JSR PRINT_MOVE
00001A3C  3238 7006               1186      MOVE.W (OPCODE_ADDRESS), D1 
00001A40  3401                    1187      MOVE.W D1, D2 
00001A42  C47C 3000               1188      AND.W #C_MOVE_SIZE, D2 
00001A46  E04A                    1189      LSR.W #8, D2 
00001A48  E80A                    1190      LSR.B #4, D2 
00001A4A  0C02 0001               1191      CMPI.B #1, D2 
00001A4E  6700 000E               1192      BEQ MOVE_OPMODE_BYTE
00001A52  0C02 0003               1193      CMPI.B #3, D2 
00001A56  6700 000C               1194      BEQ MOVE_OPMODE_WORD
00001A5A  6000 000E               1195      BRA MOVE_DONE_CONVERT
00001A5E                          1196  MOVE_OPMODE_BYTE:
00001A5E  5302                    1197      SUBQ.B #1, D2
00001A60  6000 0008               1198      BRA MOVE_DONE_CONVERT
00001A64                          1199  MOVE_OPMODE_WORD:
00001A64  5502                    1200      SUBQ.B #2, D2 
00001A66  6000 0002               1201      BRA MOVE_DONE_CONVERT
00001A6A                          1202  MOVE_DONE_CONVERT:
00001A6A  3C02                    1203      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A6C  1F06                    1204      MOVE.B D6, -(SP) 
00001A6E  4EB8 113A               1205      JSR PRINT_DATA 
00001A72  548F                    1206      ADDQ.L #2, SP
00001A74  4EB8 10B4               1207      JSR PRINT_TAB 
00001A78                          1208      ; PRINT SOURCE
00001A78  3F0D                    1209      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A7A  3F06                    1210      MOVE.W D6, -(SP) ; SIZE 
00001A7C  4EB8 1252               1211      JSR PRINT_REGISTER
00001A80  588F                    1212      ADDQ.L #4, SP 
00001A82                          1213      ; PRINT DES 
00001A82  4EB8 10D2               1214      JSR PRINT_COMMA 
00001A86  3F0C                    1215      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A88  3F06                    1216      MOVE.W D6, -(SP) ; SIZE 
00001A8A  4EB8 1252               1217      JSR PRINT_REGISTER 
00001A8E  588F                    1218      ADDQ.L #4, SP 
00001A90  6000 F5B6               1219      BRA FINISH_OPCODE 
00001A94                          1220  
00001A94                          1221  MOVEM: 
00001A94  =00004880               1222  C_MOVEM_PATTERN EQU %0100100010000000
00001A94  =0000FB80               1223  C_MOVEM_MASKING EQU %1111101110000000
00001A94  =00000400               1224  C_MOVEM_DIR EQU     %0000010000000000
00001A94  =00000040               1225  C_MOVEM_SIZE EQU    %0000000001000000
00001A94                          1226  * C_MOVEM_REGISTER EQU
00001A94                          1227  
00001A94                          1228  
00001A94                          1229  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A94                          1230  NEG:
00001A94                          1231  * CONSTANT FOR NEG OPCODE
00001A94  =00004400               1232  NEG_OPCODE EQU %0100010000000000
00001A94  =0000FF00               1233  NEG_M      EQU %1111111100000000
00001A94  =0000003F               1234  NEG_REG_M  EQU %0000000000111111
00001A94  =000000C0               1235  NEG_SIZE_M EQU %0000000011000000
00001A94  3401                    1236      MOVE.W D1, D2
00001A96                          1237  * MASKING WITH NEG UNIQUE CODE
00001A96  C47C FF00               1238      AND.W #NEG_M, D2
00001A9A  B47C 4400               1239      CMP.W #NEG_OPCODE, D2
00001A9E  6600 0056               1240      BNE NEG_END
00001AA2                          1241  
00001AA2                          1242  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001AA2  3401                    1243      MOVE.W D1, D2 
00001AA4  C43C 003F               1244      AND.B #NEG_REG_M, D2 
00001AA8  3F02                    1245      MOVE.W D2, -(SP)
00001AAA  4EB8 11AC               1246      JSR CHECK_SUPPORT_REGISTER
00001AAE  544F                    1247      ADDQ #2, SP 
00001AB0                          1248  * from print_register to see if it is unsupported register 
00001AB0  3439 00009000           1249      MOVE.W (RETURN_ADDRESS), D2 
00001AB6  0C42 0002               1250      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001ABA  6700 F58C               1251      BEQ FINISH_OPCODE
00001ABE                          1252  
00001ABE  4EB9 00001DBE           1253      JSR PRINT_NEG
00001AC4  3238 7006               1254      MOVE.W (OPCODE_ADDRESS), D1 
00001AC8  3401                    1255      MOVE.W D1, D2
00001ACA                          1256  * MASKING TO GET NEG SIZE
00001ACA  C47C 00C0               1257      AND.W #NEG_SIZE_M, D2
00001ACE  EC42                    1258      ASR.W #6, D2
00001AD0  1C02                    1259      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001AD2  1F06                    1260      MOVE.B D6, -(SP)
00001AD4  4EB8 113A               1261      JSR PRINT_DATA
00001AD8  548F                    1262      ADDQ.L #2, SP
00001ADA  4EB8 10B4               1263      JSR PRINT_TAB
00001ADE                          1264  
00001ADE  3238 7006               1265      MOVE.W (OPCODE_ADDRESS), D1     
00001AE2  3401                    1266      MOVE.W D1, D2
00001AE4                          1267  * MASKING TO GET MODE AND REGISTER
00001AE4  C47C 003F               1268      AND.W #NEG_REG_M, D2
00001AE8  3F02                    1269      MOVE.W D2, -(SP)
00001AEA  3F06                    1270      MOVE.W D6, -(SP)
00001AEC  4EB8 1252               1271      JSR PRINT_REGISTER
00001AF0  588F                    1272      ADDQ.L #$04, SP
00001AF2  6000 F554               1273      BRA FINISH_OPCODE
00001AF6                          1274  NEG_END: 
00001AF6  4E75                    1275      RTS
00001AF8                          1276  
00001AF8                          1277  BRA:
00001AF8                          1278  * CONSTANT FOR BRA OPCODE
00001AF8  =00006000               1279  BRA_OPCODE EQU %0110000000000000
00001AF8  =0000FF00               1280  BRA_M      EQU %1111111100000000
00001AF8  =000000FF               1281  BRA_DISP_M EQU %0000000011111111
00001AF8  3401                    1282      MOVE.W D1, D2
00001AFA                          1283  * MASKING WITH BRA UNIQUE CODE
00001AFA  C47C FF00               1284      AND.W #BRA_M, D2
00001AFE  B47C 6000               1285      CMP.W #BRA_OPCODE, D2
00001B02  6600 0030               1286      BNE BRA_END
00001B06                          1287  
00001B06                          1288  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B06  3401                    1289      MOVE.W D1, D2 
00001B08  C43C 00FF               1290      AND.B #BRA_DISP_M, D2 
00001B0C  3F02                    1291      MOVE.W D2, -(SP)
00001B0E  4EB8 11AC               1292      JSR CHECK_SUPPORT_REGISTER
00001B12  544F                    1293      ADDQ #2, SP 
00001B14                          1294  * from print_register to see if it is unsupported register 
00001B14  3439 00009000           1295      MOVE.W (RETURN_ADDRESS), D2 
00001B1A  0C42 0002               1296      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B1E                          1297  
00001B1E  4EB9 00001DCC           1298      JSR PRINT_BRA
00001B24  3238 7006               1299      MOVE.W (OPCODE_ADDRESS), D1 
00001B28  3401                    1300      MOVE.W D1, D2
00001B2A                          1301  * MASKING TO GET DISPLACEMENT OF BRA
00001B2A  C47C 00FF               1302      AND.W #BRA_DISP_M, D2
00001B2E  3F02                    1303      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B30  6000 F516               1304      BRA FINISH_OPCODE
00001B34                          1305  BRA_END:
00001B34  4E75                    1306      RTS
00001B36                          1307  
00001B36                          1308  OR:
00001B36                          1309  * CONSTANT FOR OR OPCODE
00001B36  =00008000               1310  OR_OPCODE EQU %1000000000000000
00001B36  =0000F000               1311  OR_M      EQU %1111000000000000
00001B36  =00000E00               1312  OR_DREG_M EQU %0000111000000000
00001B36  =000000C0               1313  OR_SIZE_M EQU %0000000011000000
00001B36  =0000003F               1314  OR_REG_M  EQU %0000000000111111
00001B36  =00000100               1315  OR_DIREC  EQU %0000000100000000
00001B36                          1316  
00001B36  3401                    1317      MOVE.W D1, D2
00001B38                          1318  * MASKING WITH OR UNIQUE CODE
00001B38  C47C F000               1319      AND.W #OR_M, D2
00001B3C  0C42 8000               1320      CMPI.W #OR_OPCODE, D2
00001B40  6600 00C0               1321      BNE OR_END
00001B44                          1322  
00001B44                          1323  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B44  3401                    1324      MOVE.W D1, D2 
00001B46  C43C 003F               1325      AND.B #OR_REG_M, D2 
00001B4A  3F02                    1326      MOVE.W D2, -(SP)
00001B4C  4EB8 11AC               1327      JSR CHECK_SUPPORT_REGISTER
00001B50  544F                    1328      ADDQ #2, SP 
00001B52                          1329  * from print_register to see if it is unsupported register 
00001B52  3439 00009000           1330      MOVE.W (RETURN_ADDRESS), D2 
00001B58  0C42 0002               1331      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B5C                          1332  
00001B5C  4EB9 00001DEA           1333      JSR PRINT_OR
00001B62  3238 7006               1334      MOVE.W (OPCODE_ADDRESS), D1
00001B66  3401                    1335      MOVE.W D1, D2
00001B68                          1336  * MASKING TO GET SIZE OF OR
00001B68  C47C 00C0               1337      AND.W #OR_SIZE_M, D2
00001B6C  EC42                    1338      ASR.W #6, D2
00001B6E  1C02                    1339      MOVE.B D2, D6
00001B70  1F02                    1340      MOVE.B D2, -(SP)
00001B72  4EB8 113A               1341      JSR PRINT_DATA
00001B76  548F                    1342      ADDQ.L #$02, SP 
00001B78  4EB8 10B4               1343      JSR PRINT_TAB
00001B7C                          1344  * MASKING TO GET DIRECTION OF THIS OR
00001B7C  3238 7006               1345      MOVE.W (OPCODE_ADDRESS), D1 
00001B80  3401                    1346      MOVE.W D1, D2  
00001B82  C47C 0100               1347      AND.W #OR_DIREC, D2 
00001B86  0C42 0100               1348      CMPI.W #OR_DIREC, D2 
00001B8A  6600 003C               1349      BNE OR_TO_D  * DN V <EA> -> DN
00001B8E                          1350  
00001B8E                          1351  OR_TO_EA:  * DN V <EA> -> <EA>
00001B8E  3238 7006               1352      MOVE.W (OPCODE_ADDRESS), D1 
00001B92  3401                    1353      MOVE.W D1, D2 
00001B94  C47C 0E00               1354      AND.W #OR_DREG_M, D2 
00001B98  E08A                    1355      LSR.L #8, D2 
00001B9A  E28A                    1356      LSR.L #1, D2 
00001B9C  843C 0000               1357      OR.B #%00000000, D2
00001BA0  3F02                    1358      MOVE.W D2, -(SP)
00001BA2  3F3C 0000               1359      MOVE.W #$0, -(SP)
00001BA6  4EB8 1252               1360      JSR PRINT_REGISTER 
00001BAA  5882                    1361      ADDQ.L #4, D2 
00001BAC  4EB8 10D2               1362      JSR PRINT_COMMA 
00001BB0                          1363      
00001BB0  3238 7006               1364      MOVE.W (OPCODE_ADDRESS), D1 
00001BB4  3401                    1365      MOVE.W D1, D2 
00001BB6  C43C 003F               1366      AND.B #OR_REG_M, D2 
00001BBA  3F02                    1367      MOVE.W D2, -(SP)
00001BBC  3F06                    1368      MOVE.W D6, -(SP)
00001BBE  4EB8 1252               1369      JSR PRINT_REGISTER
00001BC2  588F                    1370      ADDQ.L #4, SP 
00001BC4  6000 F482               1371      BRA FINISH_OPCODE
00001BC8                          1372  
00001BC8                          1373  OR_TO_D:   * <EA> V DN -> DN
00001BC8  3238 7006               1374      MOVE.W (OPCODE_ADDRESS), D1 
00001BCC  3401                    1375      MOVE.W D1, D2 
00001BCE                          1376  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BCE  C43C 003F               1377      AND.B #OR_REG_M, D2 
00001BD2  3F02                    1378      MOVE.W D2, -(SP)
00001BD4  3F06                    1379      MOVE.W D6, -(SP)
00001BD6  4EB8 1252               1380      JSR PRINT_REGISTER
00001BDA  588F                    1381      ADDQ.L #4, SP 
00001BDC  4EB8 10D2               1382      JSR PRINT_COMMA 
00001BE0                          1383  * MASKING TO GET THE DATA REGISTER 
00001BE0  3238 7006               1384      MOVE.W (OPCODE_ADDRESS), D1 
00001BE4  3401                    1385      MOVE.W D1, D2 
00001BE6  C47C 0E00               1386      AND.W #OR_DREG_M, D2 
00001BEA  E04A                    1387      LSR.W #8, D2 
00001BEC  E24A                    1388      LSR.W #1, D2 
00001BEE                          1389      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BEE  843C 0000               1390      OR.B #%00000000, D2 
00001BF2  3F02                    1391      MOVE.W D2, -(SP)
00001BF4  3F3C 0000               1392      MOVE.W #$0, -(SP)
00001BF8  4EB8 1252               1393      JSR PRINT_REGISTER
00001BFC  588F                    1394      ADDQ.L #4, SP 
00001BFE  6000 F448               1395      BRA FINISH_OPCODE
00001C02                          1396  OR_END:
00001C02  4E75                    1397      RTS
00001C04                          1398  
00001C04                          1399  ORI:
00001C04                          1400  * CONSTANT FOR ORI OPCODE
00001C04  =00000000               1401  ORI_OPCODE EQU %0000000000000000
00001C04  =0000FF00               1402  ORI_M      EQU %1111111100000000
00001C04  =0000003F               1403  ORI_REG_M  EQU %0000000000111111
00001C04  =000000C0               1404  ORI_SIZE_M EQU %0000000011000000
00001C04  3401                    1405      MOVE.W D1, D2
00001C06                          1406  * MASKING WITH ORI UNIQUE CODE
00001C06  C47C FF00               1407      AND.W #ORI_M, D2
00001C0A  B47C 0000               1408      CMP.W #ORI_OPCODE, D2
00001C0E  6600 0048               1409      BNE ORI_END
00001C12                          1410  
00001C12                          1411  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C12  3401                    1412      MOVE.W D1, D2 
00001C14  C43C 003F               1413      AND.B #ORI_REG_M, D2 
00001C18  3F02                    1414      MOVE.W D2, -(SP)
00001C1A  4EB8 11AC               1415      JSR CHECK_SUPPORT_REGISTER
00001C1E  544F                    1416      ADDQ #2, SP 
00001C20                          1417  * from print_register to see if it is unsupported register 
00001C20  3439 00009000           1418      MOVE.W (RETURN_ADDRESS), D2 
00001C26  0C42 0002               1419      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C2A  6700 F41C               1420      BEQ FINISH_OPCODE
00001C2E                          1421  
00001C2E  4EB9 00001DF8           1422      JSR PRINT_ORI
00001C34  3238 7006               1423      MOVE.W (OPCODE_ADDRESS), D1
00001C38  3401                    1424      MOVE.W D1, D2
00001C3A                          1425  * MASKING TO GET SIZE OF ORI
00001C3A  C47C 00C0               1426      AND.W #ORI_SIZE_M, D2 
00001C3E  EC42                    1427      ASR.W #6, D2
00001C40  1C02                    1428      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C42  1F06                    1429      MOVE.B D6, -(SP)
00001C44  4EB8 113A               1430      JSR PRINT_DATA
00001C48  548F                    1431      ADDQ.L #$02, SP
00001C4A  4EB8 10B4               1432      JSR PRINT_TAB
00001C4E                          1433   
00001C4E  3238 7006               1434      MOVE.W (OPCODE_ADDRESS), D1     
00001C52  3401                    1435      MOVE.W D1, D2
00001C54                          1436      *------------------------------------
00001C54                          1437      * AND.W #ORI_REG_M, D2 
00001C54                          1438      * LSR.L #8, D2 
00001C54                          1439      * LSR.L #1, D2 
00001C54                          1440      * OR.B #%00000000, D2
00001C54                          1441      * MOVE.W D2, -(SP)
00001C54                          1442      * MOVE.W #$0, -(SP)
00001C54                          1443      * JSR PRINT_REGISTER 
00001C54                          1444      * ADDQ.L #4, D2 
00001C54                          1445      * JSR PRINT_COMMA 
00001C54                          1446      
00001C54                          1447      * AND.B #ORI_REG_M, D2 
00001C54                          1448      * MOVE.W D2, -(SP)
00001C54                          1449      * MOVE.W D6, -(SP)
00001C54                          1450      * JSR PRINT_REGISTER
00001C54                          1451      * ADDQ.L #4, SP 
00001C54                          1452      *------------------------------------
00001C54  6000 F3F2               1453      BRA FINISH_OPCODE
00001C58                          1454  ORI_END:
00001C58  4E75                    1455      RTS
00001C5A                          1456  
00001C5A                          1457  EOR:
00001C5A                          1458  * CONSTANT FEOR EOR OPCODE
00001C5A  =0000B000               1459  EOR_OPCODE EQU %1011000000000000
00001C5A  =0000F000               1460  EOR_M      EQU %1111000000000000
00001C5A  =00000E00               1461  EOR_DREG_M EQU %0000111000000000
00001C5A  =000000C0               1462  EOR_SIZE_M EQU %0000000011000000
00001C5A  =0000003F               1463  EOR_REG_M  EQU %0000000000111111
00001C5A  =00000100               1464  EOR_DIREC  EQU %0000000100000000
00001C5A                          1465  
00001C5A  3401                    1466      MOVE.W D1, D2
00001C5C                          1467  * MASKING WITH EOR UNIQUE CODE
00001C5C  C47C F000               1468      AND.W #EOR_M, D2
00001C60  B47C B000               1469      CMP.W #EOR_OPCODE, D2
00001C64  6600 0074               1470      BNE EOR_END
00001C68                          1471  
00001C68                          1472  * CHECK TO MAKE SURE WE SUPPEORT THE EA
00001C68  3401                    1473      MOVE.W D1, D2 
00001C6A  C43C 003F               1474      AND.B #EOR_REG_M, D2 
00001C6E  3F02                    1475      MOVE.W D2, -(SP)
00001C70  4EB8 11AC               1476      JSR CHECK_SUPPORT_REGISTER
00001C74  544F                    1477      ADDQ #2, SP 
00001C76                          1478  * from print_register to see if it is unsuppEorted register 
00001C76  3439 00009000           1479      MOVE.W (RETURN_ADDRESS), D2 
00001C7C  0C42 0002               1480      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C80                          1481  
00001C80  4EB9 00001E06           1482      JSR PRINT_EOR
00001C86  3238 7006               1483      MOVE.W (OPCODE_ADDRESS), D1
00001C8A  3401                    1484      MOVE.W D1, D2
00001C8C                          1485  * MASKING TO GET SIZE OF EOR
00001C8C  C47C 00C0               1486      AND.W #EOR_SIZE_M, D2
00001C90  EC42                    1487      ASR.W #6, D2
00001C92  1C02                    1488      MOVE.B D2, D6
00001C94  1F02                    1489      MOVE.B D2, -(SP)
00001C96  4EB8 113A               1490      JSR PRINT_DATA
00001C9A  548F                    1491      ADDQ.L #$02, SP 
00001C9C  4EB8 10B4               1492      JSR PRINT_TAB
00001CA0                          1493  
00001CA0                          1494  EOR_TO_EA:  * <EA> EOR DN -> <EA>
00001CA0  3238 7006               1495      MOVE.W (OPCODE_ADDRESS), D1 
00001CA4  3401                    1496      MOVE.W D1, D2 
00001CA6  C47C 0E00               1497      AND.W #EOR_DREG_M, D2 
00001CAA  E08A                    1498      LSR.L #8, D2 
00001CAC  E28A                    1499      LSR.L #1, D2 
00001CAE  0A02 0000               1500      EOR.B #%00000000, D2
00001CB2  3F02                    1501      MOVE.W D2, -(SP)
00001CB4  3F3C 0000               1502      MOVE.W #$0, -(SP)
00001CB8  4EB8 1252               1503      JSR PRINT_REGISTER 
00001CBC  5882                    1504      ADDQ.L #4, D2 
00001CBE  4EB8 10D2               1505      JSR PRINT_COMMA 
00001CC2                          1506      
00001CC2  3238 7006               1507      MOVE.W (OPCODE_ADDRESS), D1 
00001CC6  3401                    1508      MOVE.W D1, D2 
00001CC8  C43C 003F               1509      AND.B #EOR_REG_M, D2 
00001CCC  3F02                    1510      MOVE.W D2, -(SP)
00001CCE  3F06                    1511      MOVE.W D6, -(SP)
00001CD0  4EB8 1252               1512      JSR PRINT_REGISTER
00001CD4  588F                    1513      ADDQ.L #4, SP 
00001CD6  6000 F370               1514      BRA FINISH_OPCODE
00001CDA                          1515  
00001CDA                          1516  EOR_END:
00001CDA  4E75                    1517      RTS
00001CDC                          1518  
00001CDC                          1519  SUB:
00001CDC                          1520  * CONSTANT FSUB SUB OPCODE
00001CDC  =00009000               1521  SUB_OPCODE EQU %1001000000000000
00001CDC  =0000F000               1522  SUB_M      EQU %1111000000000000
00001CDC  =00000E00               1523  SUB_DREG_M EQU %0000111000000000
00001CDC  =000000C0               1524  SUB_SIZE_M EQU %0000000011000000
00001CDC  =0000003F               1525  SUB_REG_M  EQU %0000000000111111
00001CDC  =00000100               1526  SUB_DIREC  EQU %0000000100000000
00001CDC                          1527  
00001CDC  3401                    1528      MOVE.W D1, D2
00001CDE                          1529  * MASKING WITH SUB UNIQUE CODE
00001CDE  C47C F000               1530      AND.W #SUB_M, D2
00001CE2  0C42 9000               1531      CMPI.W #SUB_OPCODE, D2
00001CE6  6600 00C0               1532      BNE SUB_END
00001CEA                          1533  
00001CEA                          1534  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001CEA  3401                    1535      MOVE.W D1, D2 
00001CEC  C43C 003F               1536      AND.B #SUB_REG_M, D2 
00001CF0  3F02                    1537      MOVE.W D2, -(SP)
00001CF2  4EB8 11AC               1538      JSR CHECK_SUPPORT_REGISTER
00001CF6  544F                    1539      ADDQ #2, SP 
00001CF8                          1540  * from print_register to see if it is unsupported register 
00001CF8  3439 00009000           1541      MOVE.W (RETURN_ADDRESS), D2 
00001CFE  0C42 0002               1542      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001D02                          1543  
00001D02  4EB9 00001E70           1544      JSR PRINT_SUB
00001D08  3238 7006               1545      MOVE.W (OPCODE_ADDRESS), D1
00001D0C  3401                    1546      MOVE.W D1, D2
00001D0E                          1547  * MASKING TO GET SIZE OF SUB
00001D0E  C47C 00C0               1548      AND.W #SUB_SIZE_M, D2
00001D12  EC42                    1549      ASR.W #6, D2
00001D14  1C02                    1550      MOVE.B D2, D6
00001D16  1F02                    1551      MOVE.B D2, -(SP)
00001D18  4EB8 113A               1552      JSR PRINT_DATA
00001D1C  548F                    1553      ADDQ.L #$02, SP 
00001D1E  4EB8 10B4               1554      JSR PRINT_TAB
00001D22                          1555  * MASKING TO GET DIRECTION OF THIS SUB
00001D22  3238 7006               1556      MOVE.W (OPCODE_ADDRESS), D1 
00001D26  3401                    1557      MOVE.W D1, D2  
00001D28  C47C 0100               1558      AND.W #SUB_DIREC, D2 
00001D2C  0C42 0100               1559      CMPI.W #SUB_DIREC, D2 
00001D30  6600 003C               1560      BNE SUB_TO_D  * DN - <EA> -> DN
00001D34                          1561  
00001D34                          1562  SUB_TO_EA:  * <EA> - DN -> <EA>
00001D34  3238 7006               1563      MOVE.W (OPCODE_ADDRESS), D1 
00001D38  3401                    1564      MOVE.W D1, D2 
00001D3A  C47C 0E00               1565      AND.W #SUB_DREG_M, D2 
00001D3E  E08A                    1566      LSR.L #8, D2 
00001D40  E28A                    1567      LSR.L #1, D2 
00001D42  0402 0000               1568      SUB.B #%00000000, D2
00001D46  3F02                    1569      MOVE.W D2, -(SP)
00001D48  3F3C 0000               1570      MOVE.W #$0, -(SP)
00001D4C  4EB8 1252               1571      JSR PRINT_REGISTER 
00001D50  5882                    1572      ADDQ.L #4, D2 
00001D52  4EB8 10D2               1573      JSR PRINT_COMMA 
00001D56                          1574      
00001D56  3238 7006               1575      MOVE.W (OPCODE_ADDRESS), D1 
00001D5A  3401                    1576      MOVE.W D1, D2 
00001D5C  C43C 003F               1577      AND.B #SUB_REG_M, D2 
00001D60  3F02                    1578      MOVE.W D2, -(SP)
00001D62  3F06                    1579      MOVE.W D6, -(SP)
00001D64  4EB8 1252               1580      JSR PRINT_REGISTER
00001D68  588F                    1581      ADDQ.L #4, SP 
00001D6A  6000 F2DC               1582      BRA FINISH_OPCODE
00001D6E                          1583  
00001D6E                          1584  SUB_TO_D:   * DN - <EA> -> DN
00001D6E  3238 7006               1585      MOVE.W (OPCODE_ADDRESS), D1 
00001D72  3401                    1586      MOVE.W D1, D2 
00001D74                          1587  * MASKING TO GET THE EFFECTIVE ADDRESS
00001D74  C43C 003F               1588      AND.B #SUB_REG_M, D2 
00001D78  3F02                    1589      MOVE.W D2, -(SP)
00001D7A  3F06                    1590      MOVE.W D6, -(SP)
00001D7C  4EB8 1252               1591      JSR PRINT_REGISTER
00001D80  588F                    1592      ADDQ.L #4, SP 
00001D82  4EB8 10D2               1593      JSR PRINT_COMMA 
00001D86                          1594  * MASKING TO GET THE DATA REGISTER 
00001D86  3238 7006               1595      MOVE.W (OPCODE_ADDRESS), D1 
00001D8A  3401                    1596      MOVE.W D1, D2 
00001D8C  C47C 0E00               1597      AND.W #SUB_DREG_M, D2 
00001D90  E04A                    1598      LSR.W #8, D2 
00001D92  E24A                    1599      LSR.W #1, D2 
00001D94                          1600  * APPEND MODE TO D2 FOR PRINT_REGISTER
00001D94  0402 0000               1601      SUB.B #%00000000, D2 
00001D98  3F02                    1602      MOVE.W D2, -(SP)
00001D9A  3F3C 0000               1603      MOVE.W #$0, -(SP)
00001D9E  4EB8 1252               1604      JSR PRINT_REGISTER
00001DA2  588F                    1605      ADDQ.L #4, SP 
00001DA4  6000 F2A2               1606      BRA FINISH_OPCODE
00001DA8                          1607  SUB_END:
00001DA8  4E75                    1608      RTS
00001DAA                          1609  
00001DAA                          1610  * ROR:
00001DAA                          1611  * * CONSTANT FOR ROR OPCODE
00001DAA                          1612  * ROR_OPCODE EQU %
00001DAA                          1613  * ROR_M      EQU %
00001DAA                          1614  * ROR_SIZE_M EQU %
00001DAA                          1615  *     CLR.W D2
00001DAA                          1616  *     MOVE.W D1, D2
00001DAA                          1617  * * MASKING WITH ROR UNIQUE CODE
00001DAA                          1618  *     AND.W #ROR_M, D2
00001DAA                          1619  *     CMP.W #ROR_OPCODE, D2
00001DAA                          1620  *     BNE ROR_END
00001DAA                          1621  *     JSR PRINT_ROR
00001DAA                          1622  *     MOVE.W D1, D2
00001DAA                          1623  *     MOVE.W D1, D3
00001DAA                          1624  * * MASKING TO GET SIZE OF ROR
00001DAA                          1625  *     CMP.W #ROR_SIZE_M, D2 
00001DAA                          1626  * ROR_END:
00001DAA                          1627  *     RTS
00001DAA                          1628  
00001DAA                          1629  * ROL:
00001DAA                          1630  * * CONSTANT FROR ROL OPCODE
00001DAA                          1631  * ROL_OPCODE EQU %
00001DAA                          1632  * ROL_M      EQU %
00001DAA                          1633  * ROL_SIZE_M EQU %
00001DAA                          1634  *     CLR.W D2
00001DAA                          1635  *     MOVE.W D1, D2
00001DAA                          1636  * * MASKING WITH ROL UNIQUE CODE
00001DAA                          1637  *     AND.W #ROL_M, D2
00001DAA                          1638  *     CMP.W #ROL_OPCODE, D2
00001DAA                          1639  *     BNE ROL_END
00001DAA                          1640  *     JSR PRINT_ROL
00001DAA                          1641  *     MOVE.W D1, D2
00001DAA                          1642  *     MOVE.W D1, D3
00001DAA                          1643  * * MASKING TO GET SIZE OF ROL
00001DAA                          1644  *     CMP.W #ROL_SIZE_M, D2 
00001DAA                          1645  * ROL_END:
00001DAA                          1646  *     RTS
00001DAA                          1647  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001DAA                          1648  
00001DAA                          1649  
00001DAA                          1650  PRINT_RTS:
00001DAA  43F9 00001EA8           1651      LEA P_RTS, A1
00001DB0  103C 000E               1652      MOVE.B #14, D0
00001DB4  4E4F                    1653      TRAP #15
00001DB6  4EB8 10B4               1654      JSR PRINT_TAB
00001DBA  6000 F28C               1655      BRA FINISH_OPCODE
00001DBE                          1656  PRINT_NEG:
00001DBE  43F9 00001EE8           1657      LEA P_NEG, A1
00001DC4  103C 000E               1658      MOVE.B #14, D0
00001DC8  4E4F                    1659      TRAP #15
00001DCA  4E75                    1660      RTS 
00001DCC                          1661  PRINT_BRA:
00001DCC  43F9 00001F26           1662      LEA P_BRA, A1
00001DD2  103C 000E               1663      MOVE.B #14, D0
00001DD6  4E4F                    1664      TRAP #15
00001DD8  4E75                    1665      RTS 
00001DDA                          1666  PRINT_NOP:
00001DDA  43F9 00001EAC           1667      LEA P_NOP, A1
00001DE0  103C 000E               1668      MOVE.B #14, D0
00001DE4  4E4F                    1669      TRAP #15
00001DE6  6000 F260               1670      BRA FINISH_OPCODE
00001DEA                          1671  PRINT_OR:
00001DEA  43F9 00001EE1           1672      LEA P_OR, A1
00001DF0  103C 000E               1673      MOVE.B #14, D0
00001DF4  4E4F                    1674      TRAP #15
00001DF6  4E75                    1675      RTS 
00001DF8                          1676  PRINT_ORI:
00001DF8  43F9 00001EE4           1677      LEA P_ORI, A1
00001DFE  103C 000E               1678      MOVE.B #14, D0
00001E02  4E4F                    1679      TRAP #15
00001E04  4E75                    1680      RTS
00001E06                          1681  PRINT_EOR:
00001E06  43F9 00001EEC           1682      LEA P_EOR, A1
00001E0C  103C 000E               1683      MOVE.B #14, D0
00001E10  4E4F                    1684      TRAP #15
00001E12  4E75                    1685      RTS 
00001E14                          1686  PRINT_ROL:
00001E14  43F9 00001F00           1687      LEA P_ROL, A1
00001E1A  103C 000E               1688      MOVE.B #14, D0
00001E1E  4E4F                    1689      TRAP #15
00001E20  4E75                    1690      RTS 
00001E22                          1691  PRINT_ROR:
00001E22  43F9 00001F04           1692      LEA P_ROR, A1
00001E28  103C 000E               1693      MOVE.B #14, D0
00001E2C  4E4F                    1694      TRAP #15
00001E2E  4E75                    1695      RTS 
00001E30                          1696  PRINT_JSR:
00001E30  43F9 00001F2A           1697      LEA P_JSR, A1
00001E36  103C 000E               1698      MOVE.B #14, D0
00001E3A  4E4F                    1699      TRAP #15
00001E3C  4EB8 10B4               1700      JSR PRINT_TAB
00001E40  4E75                    1701      RTS 
00001E42                          1702  PRINT_LEA:
00001E42  43F9 00001EDD           1703      LEA P_LEA, A1
00001E48  103C 000E               1704      MOVE.B #14, D0
00001E4C  4E4F                    1705      TRAP #15
00001E4E  4EB8 10B4               1706      JSR PRINT_TAB
00001E52  4E75                    1707      RTS 
00001E54                          1708  PRINT_ADDA: 
00001E54  43F9 00001EC5           1709      LEA P_ADDA, A1 
00001E5A  103C 000E               1710      MOVE.B #14, D0
00001E5E  4E4F                    1711      TRAP #15 
00001E60  4E75                    1712      RTS
00001E62                          1713  PRINT_ADD:
00001E62  43F9 00001EC1           1714      LEA P_ADD, A1 
00001E68  103C 000E               1715      MOVE.B #14, D0 
00001E6C  4E4F                    1716      TRAP #15
00001E6E  4E75                    1717      RTS
00001E70                          1718  PRINT_SUB:
00001E70  43F9 00001ECA           1719      LEA P_SUB, A1 
00001E76  103C 000E               1720      MOVE.B #14, D0 
00001E7A  4E4F                    1721      TRAP #15
00001E7C  4E75                    1722      RTS
00001E7E                          1723  PRINT_MOVEA: 
00001E7E  43F9 00001EB5           1724      LEA P_MOVEA, A1 
00001E84  103C 000E               1725      MOVE.B #14, D0 
00001E88  4E4F                    1726      TRAP #15 
00001E8A  4E75                    1727      RTS 
00001E8C                          1728  PRINT_MOVE: 
00001E8C  43F9 00001EB0           1729      LEA P_MOVE, A1 
00001E92  103C 000E               1730      MOVE.B #14, D0 
00001E96  4E4F                    1731      TRAP #15 
00001E98  4E75                    1732      RTS 
00001E9A                          1733  PRINT_UNSUPPORTED: 
00001E9A  43F9 00001F2E           1734      LEA P_DATA, A1 
00001EA0  103C 000E               1735      MOVE.B #14, D0 
00001EA4  4E4F                    1736      TRAP #15 
00001EA6  4E75                    1737      RTS 
00001EA8                          1738  
00001EA8                          1739  
00001EA8                          1740  
00001EA8                          1741  
00001EA8                          1742  
00001EA8                          1743  
00001EA8                          1744  
00001EA8                          1745  
00001EA8                          1746  
00001EA8= 52 54 53 00             1747  P_RTS DC.B 'RTS',0          *-----------------DONE-----------------*
00001EAC= 4E 4F 50 00             1748  P_NOP DC.B 'NOP',0          *-----------------DONE-----------------*
00001EB0= 4D 4F 56 45 00          1749  P_MOVE DC.B 'MOVE',0        *-----------------DONE-----------------*
00001EB5= 4D 4F 56 45 41 00       1750  P_MOVEA DC.B 'MOVEA', 0     *-----------------DONE-----------------*
00001EBB= 4D 4F 56 45 4D 00       1751  P_MOVEM DC.B 'MOVEM', 0
00001EC1= 41 44 44 00             1752  P_ADD DC.B 'ADD', 0         *-----------------DONE-----------------*
00001EC5= 41 44 44 41 00          1753  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
00001ECA= 53 55 42 00             1754  P_SUB DC.B 'SUB', 0
00001ECE= 53 55 42 51 00          1755  P_SUBQ DC.B 'SUBQ',0
00001ED3= 4D 55 4C 53 00          1756  P_MULS DC.B 'MULS',0
00001ED8= 44 49 56 53 00          1757  P_DIVS DC.B 'DIVS',0
00001EDD= 4C 45 41 00             1758  P_LEA DC.B 'LEA',0          *-----------------DONE-----------------*
00001EE1= 4F 52 00                1759  P_OR DC.B 'OR',0            *-----------------DONE-----------------*
00001EE4= 4F 52 49 00             1760  P_ORI DC.B 'ORI', 0         *------------IN PROGRESS---------------*
00001EE8= 4E 45 47 00             1761  P_NEG DC.B 'NEG', 0         *-----------------DONE-----------------*
00001EEC= 45 4F 52 00             1762  P_EOR DC.B 'EOR', 0         *-----------------DONE-----------------*
00001EF0= 4C 53 52 00             1763  P_LSR DC.B 'LSR',0
00001EF4= 4C 53 4C 00             1764  P_LSL DC.B 'LSL', 0
00001EF8= 41 53 52 00             1765  P_ASR DC.B 'ASR', 0
00001EFC= 41 53 4C 00             1766  P_ASL DC.B 'ASL',0 
00001F00= 52 4F 4C 00             1767  P_ROL DC.B 'ROL', 0
00001F04= 52 4F 52 00             1768  P_ROR DC.B 'ROR', 0
00001F08= 42 43 4C 52 00          1769  P_BCLR DC.B 'BCLR',0
00001F0D= 43 4D 50 00             1770  P_CMP DC.B 'CMP', 0
00001F11= 43 4D 50 49 00          1771  P_CMPI DC.B 'CMPI', 0
00001F16= 42 43 53 00             1772  P_BCS DC.B 'BCS', 0
00001F1A= 42 47 45 00             1773  P_BGE DC.B 'BGE', 0
00001F1E= 42 4C 54 00             1774  P_BLT DC.B 'BLT',0
00001F22= 42 56 43 00             1775  P_BVC DC.B 'BVC', 0
00001F26= 42 52 41 00             1776  P_BRA DC.B 'BRA',0          *------------IN PROGRESS---------------*
00001F2A= 4A 53 52 00             1777  P_JSR DC.B 'JSR',0          *-----------------DONE-----------------*
00001F2E= 44 41 54 41 00          1778  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
00001F33                          1779  
00001F33                          1780  
00001F33  =00000004               1781  WORD_LENGTH EQU $04
00001F33  =00000008               1782  LONG_LENGTH EQU $08
00001F33= 31 30 30 32 30 30 ...   1783  TEST_VAL DC.B '10020009'
00001F3B  =0000000A               1784  LF EQU $0A
00001F3B  =0000000D               1785  CR EQU $0D
00001F3B  =00000009               1786  HT  EQU  $09 
00001F3B= 20 0D 0A 00             1787  NEW_LINE DC.B ' ',CR,LF,0
00001F3F                          1788  SIMHALT             ; halt simulator
00001F3F                          1789  * Put variables and constants here
00001F3F                          1790  
00001F3F                          1791  
00001F3F                          1792  
00001F3F                          1793  
00001F3F                          1794  
00001F3F                          1795  
00001F3F= 50 6C 65 61 73 65 ...   1796  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001F6E= 50 6C 65 61 73 65 ...   1797  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
00001F9B= 50 72 65 73 73 20 ...   1798  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00001FB5                          1799      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1848
ADDA                17C4
ADDA_AN_MASKING     E00
ADDA_END            1846
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             1918
ADD_FROM_D          18A4
ADD_TO_D            18DE
ASCII_TO_HEX        15D0
ASCII_TO_HEX_CHECK_GT_0  15FC
ASCII_TO_HEX_CHECK_GT_A  1610
ASCII_TO_HEX_CHECK_LT_9  1604
ASCII_TO_HEX_CHECK_LT_F  161C
ASCII_TO_HEX_CONVERT_LETTER  1642
ASCII_TO_HEX_CONVERT_NUMBER  1628
ASCII_TO_HEX_END_LOOP  165C
ASCII_TO_HEX_FAILED_0  1662
ASCII_TO_HEX_FAILED_2  1668
ASCII_TO_HEX_LOOP   15F0
ASCII_TO_HEX_RETURN_OK  1
BRA                 1AF8
BRA_DISP_M          FF
BRA_END             1B34
BRA_M               FF00
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  15A2
CHECK_VALUE_IS_ODD_FAILED  15CA
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  129A
CONTINUE_PRINT_RE_NUMBER  12B6
CONVERT_OPMODE_SIZE_B  197A
CONVERT_OPMODE_SIZE_W  1980
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_PRINT_NUMBER   12D4
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C8
END_FETCH_OPCODES   168C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1594
END_JUMP_TABLE      16F2
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       153C
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12FE
END_PRINT_TAB       10CA
EOR                 1C5A
EOR_DIREC           100
EOR_DREG_M          E00
EOR_END             1CDA
EOR_M               F000
EOR_OPCODE          B000
EOR_REG_M           3F
EOR_SIZE_M          C0
EOR_TO_EA           1CA0
FETCH_OPCODES       167A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  152A
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1556
HEX_MASKING         F
HEX_TO_ASCII        153E
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  158A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   155E
HEX_TO_ASCII_NUMBER  1580
HEX_TO_ASCII_ROR    159E
HEX_TO_ASCII_SWAP   159A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  166E
JSR                 170A
JSR_END             1754
JSR_OPCODE          4E80
JUMP_TABLE          168E
LEA                 1756
LEA_END             17C2
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVE                19D0
MOVEA               191A
MOVEA_DONE_CONVERT  1986
MOVEA_END           19CE
MOVEA_REGISTER_OK   193A
MOVEM               1A94
MOVE_DONE_CONVERT   1A6A
MOVE_END            19EE
MOVE_MATCH_PATTERN  19F0
MOVE_OPMODE_BYTE    1A5E
MOVE_OPMODE_WORD    1A64
NEG                 1A94
NEG_END             1AF6
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1F3B
NOP                 16F6
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B36
ORI                 1C04
ORI_END             1C58
ORI_M               FF00
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1C02
OR_M                F000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BC8
OR_TO_EA            1B8E
OUTPUT_ADDRESS      7010
PRINT_A             150C
PRINT_AB_LONG       1428
PRINT_AB_SHORT      13C6
PRINT_ADD           1E62
PRINT_ADDA          1E54
PRINT_BRA           1DCC
PRINT_BYTE          1164
PRINT_CLOSE         14BE
PRINT_CLOSE_PLUS    14D8
PRINT_COMMA         10D2
PRINT_D             14F2
PRINT_DATA          113A
PRINT_DOLLAR_SIGN   10EA
PRINT_EOR           1E06
PRINT_HASH_SIGN     1102
PRINT_HEX           1526
PRINT_IMMEDIATE     1300
PRINT_IMMEDIATE_BYTE  133C
PRINT_IMMEDIATE_LONG  1392
PRINT_IMMEDIATE_WORD  1366
PRINT_JSR           1E30
PRINT_LEA           1E42
PRINT_LONG          117C
PRINT_MINUS_OPEN    14A4
PRINT_MOVE          1E8C
PRINT_MOVEA         1E7E
PRINT_NEG           1DBE
PRINT_NEW_LINE      111A
PRINT_NOP           1DDA
PRINT_OPEN          148A
PRINT_OR            1DEA
PRINT_ORI           1DF8
PRINT_PC            1188
PRINT_REGISTER      1252
PRINT_ROL           1E14
PRINT_ROR           1E22
PRINT_RTS           1DAA
PRINT_SUB           1E70
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1E9A
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  1F9B
PROMT_INPUT_END     1F6E
PROMT_INPUT_START   1F3F
P_ADD               1EC1
P_ADDA              1EC5
P_ASL               1EFC
P_ASR               1EF8
P_BCLR              1F08
P_BCS               1F16
P_BGE               1F1A
P_BLT               1F1E
P_BRA               1F26
P_BVC               1F22
P_CMP               1F0D
P_CMPI              1F11
P_DATA              1F2E
P_DIVS              1ED8
P_EOR               1EEC
P_JSR               1F2A
P_LEA               1EDD
P_LSL               1EF4
P_LSR               1EF0
P_MOVE              1EB0
P_MOVEA             1EB5
P_MOVEM             1EBB
P_MULS              1ED3
P_NEG               1EE8
P_NOP               1EAC
P_OR                1EE1
P_ORI               1EE4
P_ROL               1F00
P_ROR               1F04
P_RTS               1EA8
P_SUB               1ECA
P_SUBQ              1ECE
RETURN_ADDRESS      9000
RTS                 1700
SIMHALT             1F3F
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
SUB                 1CDC
SUB_DIREC           100
SUB_DREG_M          E00
SUB_END             1DA8
SUB_M               F000
SUB_OPCODE          9000
SUB_REG_M           3F
SUB_SIZE_M          C0
SUB_TO_D            1D6E
SUB_TO_EA           1D34
TEST_VAL            1F33
UNSUPPORT_OPCODE    11E6
UNSUPPORT_REGISTER  121A
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
