00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 10:04:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                  9  OUTPUT_ADDRESS EQU $7010
00001000                            10  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 11  RETURN_ADDRESS EQU $9000
00001000                            12  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 13  START_ADDRESS EQU $09100
00001000                            14  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 15  END_ADDRESS EQU $7004
00001000                            16  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 17  OPCODE_ADDRESS EQU $7006
00001000                            18  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            19  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            20  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            21  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 22  OFFSET_OPC_ADDRES EQU $7008 
00001000                            23  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 24  SIZE_OPCODE EQU $700A
00001000                            25  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 26  STORE_REGISTER_ADDRESS EQU $700C
00001000                            27  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 28  STACK_ADDRESS EQU $8000
00001000                            29  START:                  ; first instruction of program
00001000                            30      * MOVE.L #$10AF241B, -(SP)
00001000                            31      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            32      * JSR PRINT_HEX
00001000                            33      * ADDQ.L #$08, SP
00001000                            34  
00001000                            35      * JSR PRINT_NEW_LINE
00001000                            36  
00001000                            37      * JSR PRINT_TAB
00001000                            38      * A0
00001000                            39  *     MOVE.L #%0000011100000100, D1
00001000                            40  *     MOVE.L D1, -(SP)
00001000                            41  *     JSR PRINT_REGISTER
00001000                            42  *     ADDQ.L #4, SP
00001000                            43  *     * A1
00001000                            44  *     MOVE.W #%0100, D1
00001000                            45  *     SWAP D1
00001000                            46  *     MOVE.W #$1, D1
00001000                            47  *     MOVE.L D1, -(SP)
00001000                            48  *     JSR PRINT_REGISTER
00001000                            49  *     ADDQ.L #4, SP
00001000                            50  * * A2
00001000                            51  *     MOVE.W #%0011, D1
00001000                            52  *     SWAP D1
00001000                            53  *     MOVE.W #$2, D1
00001000                            54  *     MOVE.L D1, -(SP)
00001000                            55  *     JSR PRINT_REGISTER
00001000                            56  *     ADDQ.L #4, SP
00001000                            57  * * A3
00001000                            58  *     MOVE.W #%0011, D1
00001000                            59  *     SWAP D1
00001000                            60  *     MOVE.W #$3, D1
00001000                            61  *     MOVE.L D1, -(SP)
00001000                            62  *     JSR PRINT_REGISTER
00001000                            63  *     ADDQ.L #4, SP
00001000                            64  * * A4
00001000                            65  *     MOVE.W #%0011, D1
00001000                            66  *     SWAP D1
00001000                            67  *     MOVE.W #$4, D1
00001000                            68  *     MOVE.L D1, -(SP)
00001000                            69  *     JSR PRINT_REGISTER
00001000                            70  *     ADDQ.L #4, SP
00001000                            71  * * A5
00001000                            72  *     MOVE.W #%0011, D1
00001000                            73  *     SWAP D1
00001000                            74  *     MOVE.W #$5, D1
00001000                            75  *     MOVE.L D1, -(SP)
00001000                            76  *     JSR PRINT_REGISTER
00001000                            77  *     ADDQ.L #4, SP
00001000                            78  * * A6
00001000                            79  *     MOVE.W #%0011, D1
00001000                            80  *     SWAP D1
00001000                            81  *     MOVE.W #$6, D1
00001000                            82  *     MOVE.L D1, -(SP)
00001000                            83  *     JSR PRINT_REGISTER
00001000                            84  *     ADDQ.L #4, SP
00001000                            85  * * A7
00001000                            86  *     MOVE.W #%0011, D1
00001000                            87  *     SWAP D1
00001000                            88  *     MOVE.W #$7, D1
00001000                            89  *     MOVE.L D1, -(SP)
00001000                            90  *     JSR PRINT_REGISTER
00001000                            91  *     ADDQ.L #4, SP
00001000                            92  
00001000                            93      * JSR PRINT_COMMA
00001000                            94      * JSR PRINT_DOLLAR_SIGN
00001000                            95      * JSR PRINT_HASH_SIGN
00001000                            96      * MOVE.B #$01, -(SP)
00001000                            97      * JSR PRINT_DATA
00001000                            98      * ADDQ.L #$2,SP
00001000                            99      * MOVE.B #$02, -(SP)
00001000                           100      * JSR PRINT_DATA
00001000                           101      * ADDQ.L #$2, SP
00001000                           102      * MOVE.B #$03, -(SP)
00001000                           103      * JSR PRINT_DATA
00001000                           104      * ADDQ.L #$2,SP
00001000                           105   
00001000  4207                     106      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            107      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            108      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            109      MOVE.L #$010000, (A0)
00001014                           110  LOOP_START:
00001014  2E7C 00008000            111      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            112      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            113      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000167A            114      JSR FETCH_OPCODES
0000102C  508F                     115      ADDQ.L #8, SP
0000102E  4EB9 000010B4            116      JSR PRINT_TAB
00001034  4EB9 00001188            117      JSR PRINT_PC
0000103A  207C 00007006            118      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     119      MOVE.W (A0), -(SP)
00001042  4EB9 0000168E            120      JSR JUMP_TABLE
00001048                           121  FINISH_OPCODE:
00001048  4280                     122      CLR.L D0
0000104A  23FC 00000000 00009000   123      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                124      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            125      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            126      JSR PRINT_NEW_LINE
00001064  5207                     127      ADDQ.B #1, D7 
00001066  0C07 001D                128      CMPI.B #29, D7 
0000106A  6700 0004                129      BEQ CLR_SCREEN
0000106E  60A4                     130      BRA LOOP_START
00001070                           131  
00001070                           132  CLR_SCREEN:
00001070  43F9 00001E53            133      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                134      MOVE.B #13, D0 
0000107A  4E4F                     135      TRAP #15 
0000107C  4207                     136      CLR.B D7
0000107E  103C 0005                137      MOVE.B #5, D0 
00001082  4E4F                     138      TRAP #15 
00001084  0C01 000D                139      CMPI.B #$0D, D1 
00001088  678A                     140      BEQ LOOP_START
0000108A  6000 0002                141      BRA END_MAIN
0000108E                           142  
0000108E                           143  * Put program code here
0000108E                           144  MAIN:
0000108E                           145  
0000108E                           146  END_MAIN:
0000108E  103C 0009                147      MOVE.B #9, D0
00001092  4E4F                     148      TRAP #15
00001094  103C 000E                149      MOVE.B #14,D0
00001098  4E4F                     150      TRAP #15
0000109A                           151  * get user input 
0000109A                           152  GET_INPUT:
0000109A  43F9 00001DF7            153      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                154      MOVE.B #13, D0
000010A4  4E4F                     155      TRAP #15
000010A6  227C 00002000            156      MOVEA.L #$2000,A1
000010AC  103C 0002                157      MOVE.B #2, D0
000010B0  4E4F                     158      TRAP #15
000010B2                           159  END_GET_INPUT:
000010B2  4E75                     160      RTS   
000010B4                           161  
000010B4                           162  *--------------------------------------------------------------------
000010B4                           163  * PRINT_TAB 
000010B4                           164  PRINT_TAB: 
000010B4  227C 00007010            165      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            166      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                167      MOVE.B #0, (A1)+
000010C4  227C 00007010            168      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           169  END_PRINT_TAB:
000010CA  103C 000E                170      MOVE.B #14, D0
000010CE  4E4F                     171      TRAP #15
000010D0  4E75                     172      RTS
000010D2                           173  *--------------------------------------------------------------------
000010D2                           174  * PRINT_COMMA
000010D2                           175  PRINT_COMMA:
000010D2  227C 00007010            176      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                177      MOVE.W #', ', (A1)+
000010DC  12BC 0000                178      MOVE.B #0, (A1)
000010E0  5589                     179      SUBQ.L #2, A1
000010E2                           180  END_PRINT_COMMA:
000010E2  103C 000E                181      MOVE.B #14, D0
000010E6  4E4F                     182      TRAP #15
000010E8  4E75                     183      RTS
000010EA                           184  *--------------------------------------------------------------------
000010EA                           185  * PRINT_DOLLAR_SIGN
000010EA                           186  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            187      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                188      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           189      MOVE.B #0, 1(A1) 
000010FA                           190  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                191      MOVE.B #14, D0
000010FE  4E4F                     192      TRAP #15
00001100  4E75                     193      RTS
00001102                           194  *--------------------------------------------------------------------
00001102                           195  * PRINT_HASH_SIGN
00001102                           196  PRINT_HASH_SIGN:
00001102  227C 00007010            197      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                198      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           199      MOVE.B #0, 1(A1) 
00001112                           200  END_PRINT_HASH_SIGN:
00001112  103C 000E                201      MOVE.B #14, D0
00001116  4E4F                     202      TRAP #15
00001118  4E75                     203      RTS
0000111A                           204  
0000111A                           205  *--------------------------------------------------------------------
0000111A                           206  * PRINT A NEW LINE 
0000111A                           207  PRINT_NEW_LINE: 
0000111A  227C 00007010            208      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                209      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                210      MOVE.B #LF, (A1)+
00001128  12FC 0000                211      MOVE.B #0, (A1)+
0000112C                           212  END_PRINT_NEW_LINE:
0000112C  227C 00007010            213      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                214      MOVE.B #14, D0
00001136  4E4F                     215      TRAP #15 
00001138  4E75                     216      RTS
0000113A                           217  
0000113A                           218  
0000113A                           219  
0000113A                           220  
0000113A                           221  *--------------------------------------------------------------------
0000113A                           222  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           223  * PARAMETERS: 
0000113A                           224   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           225  *       00 - byte
0000113A                           226  *       01 - word
0000113A                           227  *       10 - long
0000113A                           228  * NOTE:
0000113A                           229  *   A1 USE FOR PRINT
0000113A                           230  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           231  PRINT_DATA:
0000113A  227C 00007010            232      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                233      MOVE.B 4(SP), D1
00001144  0C01 0000                234      CMPI.B #$00, D1
00001148  6700 001A                235      BEQ PRINT_BYTE
0000114C  0C01 0001                236      CMPI.B #$01, D1
00001150  6700 001E                237      BEQ PRINT_WORD
00001154  0C01 0002                238      CMPI.B #$02, D1 
00001158  6700 0022                239      BEQ PRINT_LONG
0000115C                           240  END_PRINT_DATA:
0000115C  103C 000E                241      MOVE.B #14, D0
00001160  4E4F                     242      TRAP #15
00001162  4E75                     243      RTS 
00001164                           244  
00001164                           245  PRINT_BYTE: 
00001164  32BC 2E42                246      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           247      MOVE.B #0, 2(A1)
0000116E  60EC                     248      BRA END_PRINT_DATA
00001170                           249  PRINT_WORD: 
00001170  32BC 2E57                250      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           251      MOVE.B #0, 2(A1)
0000117A  60E0                     252      BRA END_PRINT_DATA
0000117C                           253  PRINT_LONG: 
0000117C  32BC 2E4C                254      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           255      MOVE.B #0, 2(A1)
00001186  60D4                     256      BRA END_PRINT_DATA
00001188                           257  *--------------------------------------------------------------------
00001188                           258  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           259  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           260  * PARAMETERS:
00001188                           261  *   NONE
00001188                           262  * NOTES: 
00001188                           263  * A1 USE TO PRINT 
00001188                           264  * D0 FOR TRAP AND CONVERSION 
00001188                           265  PRINT_PC:
00001188  2039 00009100            266      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     267      MOVE.L D0, -(SP)
00001190  2F3C 00000008            268      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 00001526            269      JSR PRINT_HEX 
0000119C  508F                     270      ADDQ.L #8, SP 
0000119E  4EB8 10B4                271      JSR PRINT_TAB
000011A2  4EB8 10B4                272      JSR PRINT_TAB 
000011A6  4EB8 10B4                273      JSR PRINT_TAB
000011AA  4E75                     274      RTS 
000011AC                           275  
000011AC                           276  CHECK_SUPPORT_REGISTER:
000011AC  33FC 0000 00009000       277      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011B4  322F 0004                278      MOVE.W 4(SP), D1 
000011B8  3801                     279      MOVE.W D1,D4 
000011BA                           280     ; check to make sure we dont support the register 
000011BA  =00000028                281  DISPLACEMENT_REGISTER EQU %00101000
000011BA  =00000030                282  ADDRESS_WITH_INDEX EQU %00110000
000011BA  =0000003B                283  COUNTER_INDEX EQU %00111011 
000011BA  =0000003A                284  COUNTER_DISPLACEMENT EQU %00111010
000011BA  C83C 0038                285      AND.B #%00111000, D4 
000011BE  0C04 0028                286      CMPI.B #DISPLACEMENT_REGISTER, D4
000011C2  6700 0056                287      BEQ UNSUPPORT_REGISTER
000011C6  0C04 0030                288      CMPI.B #ADDRESS_WITH_INDEX, D4
000011CA  6700 004E                289      BEQ UNSUPPORT_REGISTER 
000011CE  3801                     290      MOVE D1, D4
000011D0  C83C 003F                291      AND.B #%00111111,D4
000011D4  0C04 003B                292      CMPI.B #COUNTER_INDEX, D4
000011D8  6700 0040                293      BEQ UNSUPPORT_REGISTER 
000011DC  0C04 003A                294      CMPI.B #COUNTER_DISPLACEMENT, D4
000011E0  6700 0038                295      BEQ UNSUPPORT_REGISTER
000011E4  4E75                     296      RTS
000011E6                           297  
000011E6                           298  UNSUPPORT_OPCODE: 
000011E6  267C 00009000            299      MOVE.L #RETURN_ADDRESS, A3
000011EC  4EB9 00001D52            300      JSR PRINT_UNSUPPORTED
000011F2  4EB8 10B4                301      JSR PRINT_TAB 
000011F6  4EB8 1102                302      JSR PRINT_HASH_SIGN 
000011FA  4EB8 10EA                303      JSR PRINT_DOLLAR_SIGN 
000011FE  4281                     304      CLR.L D1 
00001200  3238 7006                305      MOVE.W (OPCODE_ADDRESS), D1 
00001204  2F01                     306      MOVE.L D1, -(SP) 
00001206  2F3C 00000004            307      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000120C  4EB9 00001526            308      JSR PRINT_HEX 
00001212  508F                     309      ADDQ.L #8, SP 
00001214  36BC 0002                310      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001218  4E75                     311      RTS 
0000121A                           312  UNSUPPORT_REGISTER:
0000121A  =00000002                313  C_UNSUPPORT_REGISTER EQU $2
0000121A  267C 00009000            314      MOVE.L #RETURN_ADDRESS, A3
00001220  4EB9 00001D52            315      JSR PRINT_UNSUPPORTED
00001226  4EB8 10B4                316      JSR PRINT_TAB 
0000122A  4EB8 1102                317      JSR PRINT_HASH_SIGN 
0000122E  4EB8 10EA                318      JSR PRINT_DOLLAR_SIGN 
00001232  4281                     319      CLR.L D1 
00001234  3238 7006                320      MOVE.W (OPCODE_ADDRESS), D1 
00001238  2F01                     321      MOVE.L D1, -(SP) 
0000123A  2F3C 00000004            322      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001240  4EB9 00001526            323      JSR PRINT_HEX 
00001246  508F                     324      ADDQ.L #8, SP 
00001248  36BC 0002                325      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000124C  5478 7008                326      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001250  4E75                     327      RTS 
00001252                           328  
00001252                           329  
00001252                           330  *--------------------------------------------------------------------
00001252                           331  * PRINT_REGISTER
00001252                           332  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001252                           333  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001252                           334  * 2 - (4(sp)) byte value for how many byte for immediate value
00001252                           335  *      0 for a byte value
00001252                           336  *      1 for word value
00001252                           337  *      2 for long value 
00001252                           338  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001252                           339  * NOTE: 
00001252                           340  *   D1 FOR STORE THE PARAMETER
00001252                           341  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001252                           342  PRINT_REGISTER:
00001252  322F 0006                343     MOVE.W 6(SP), D1 
00001256                           344     
00001256  3401                     345     MOVE.W D1,D2
00001258  0C01 003C                346     CMPI.B #%00111100, D1
0000125C  6700 00A2                347     BEQ PRINT_IMMEDIATE
00001260  0C01 0038                348     CMPI.B #%00111000, D1
00001264  6700 0160                349     BEQ PRINT_AB_SHORT
00001268  0C01 0039                350     CMPI.B #%00111001, D1
0000126C  6700 01BA                351     BEQ PRINT_AB_LONG 
00001270                           352  
00001270  1401                     353     MOVE.B D1,D2
00001272  C43C 0038                354     AND.B #%00111000, D2
00001276  0C02 0010                355     CMPI.B #%00010000, D2
0000127A  6700 020E                356     BEQ PRINT_OPEN
0000127E                           357  
0000127E  1401                     358     MOVE.B D1,D2
00001280  C43C 0038                359     AND.B #%00111000, D2
00001284  0C02 0018                360     CMPI.B #%00011000, D2
00001288  6700 0200                361     BEQ PRINT_OPEN
0000128C                           362  
0000128C  1401                     363     MOVE.B D1,D2
0000128E  C43C 0038                364     AND.B #%00111000, D2
00001292  0C02 0020                365     CMPI.B #%00100000, D2
00001296  6700 020C                366     BEQ PRINT_MINUS_OPEN
0000129A                           367  
0000129A                           368  CONTINUE_PRINT_REGISTER:
0000129A  1401                     369     MOVE.B D1,D2
0000129C  C43C 0038                370     AND.B #%00111000, D2
000012A0  0C02 0000                371     CMPI.B #%00000000, D2
000012A4  6700 024C                372     BEQ PRINT_D
000012A8                           373  
000012A8  1401                     374     MOVE.B D1,D2
000012AA  C43C 0038                375     AND.B #%00111000, D2
000012AE  0C02 0008                376     CMPI.B #%00001000, D2
000012B2  6700 0258                377     BEQ PRINT_A 
000012B6                           378  
000012B6                           379  CONTINUE_PRINT_RE_NUMBER:
000012B6  227C 00007010            380      MOVE.L #OUTPUT_ADDRESS, A1
000012BC  1401                     381      MOVE.B D1,D2
000012BE  C43C 0007                382      AND.B #%00000111, D2
000012C2  0602 0030                383      ADD.B #48, D2 
000012C6  1282                     384      MOVE.B D2, (A1) 
000012C8  137C 0000 0001           385      MOVE.B #$0, 1(A1)
000012CE  103C 000E                386      MOVE.B #14, D0
000012D2  4E4F                     387      TRAP #15
000012D4                           388  DONE_PRINT_NUMBER:
000012D4  1401                     389     MOVE.B D1,D2
000012D6  C43C 0038                390     AND.B #%00111000, D2
000012DA  0C02 0010                391     CMPI.B #%00010000, D2
000012DE  6700 01DE                392     BEQ PRINT_CLOSE
000012E2                           393  
000012E2  1401                     394     MOVE.B D1,D2
000012E4  C43C 0038                395     AND.B #%00111000, D2
000012E8  0C02 0018                396     CMPI.B #%00011000, D2
000012EC  6700 01EA                397     BEQ PRINT_CLOSE_PLUS
000012F0                           398  
000012F0  1401                     399     MOVE.B D1,D2
000012F2  C43C 0038                400     AND.B #%00111000, D2
000012F6  0C02 0020                401     CMPI.B #%00100000, D2
000012FA  6700 01C2                402     BEQ PRINT_CLOSE
000012FE                           403  
000012FE                           404  END_PRINT_REGISTER:
000012FE  4E75                     405      RTS
00001300                           406  
00001300                           407  PRINT_IMMEDIATE:
00001300  227C 00007010            408      MOVE.L #OUTPUT_ADDRESS, A1
00001306  12BC 0023                409      MOVE.B #'#', (A1)
0000130A  137C 0000 0001           410      MOVE.B #$0, 1(A1)
00001310  103C 000E                411      MOVE.B #14, D0
00001314  4E4F                     412      TRAP #15
00001316  4EB8 10EA                413      JSR PRINT_DOLLAR_SIGN
0000131A  3038 7008                414      MOVE.W (OFFSET_OPC_ADDRES),D0
0000131E  342F 0004                415      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001322  0C02 0000                416      CMPI.B #$00, D2
00001326  6700 0014                417      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
0000132A  0C02 0001                418      CMPI.B #$01, D2
0000132E  6700 0036                419      BEQ PRINT_IMMEDIATE_WORD
00001332  0C02 0002                420      CMPI.B #$02, D2
00001336  6700 005A                421      BEQ PRINT_IMMEDIATE_LONG
0000133A  60C2                     422      BRA END_PRINT_REGISTER
0000133C                           423  
0000133C                           424  PRINT_IMMEDIATE_BYTE:
0000133C  2479 00009100            425      MOVE.L (START_ADDRESS), A2
00001342  3432 0000                426      MOVE.W (A2, D0), D2 ; 
00001346  48E7 E0C0                427      MOVEM.L D0-D2/A0-A1, -(SP)
0000134A  2F02                     428      MOVE.L D2, -(SP)
0000134C  2F3C 00000004            429      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001352  4EB9 00001526            430      JSR PRINT_HEX
00001358  508F                     431       ADDQ.L #$08, SP
0000135A  4CDF 0307                432      MOVEM.L (SP)+, D0-D2/A0-A1
0000135E  5440                     433      ADDQ.W #$2, D0
00001360  31C0 7008                434      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001364  6098                     435      BRA END_PRINT_REGISTER
00001366                           436  PRINT_IMMEDIATE_WORD:
00001366  2479 00009100            437      MOVE.L (START_ADDRESS), A2
0000136C  3432 0000                438      MOVE.W (A2, D0), D2 ; 
00001370  48E7 E0C0                439      MOVEM.L D0-D2/A0-A1, -(SP)
00001374  2F02                     440      MOVE.L D2, -(SP)
00001376  2F3C 00000004            441      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000137C  4EB9 00001526            442      JSR PRINT_HEX
00001382  508F                     443      ADDQ.L #$08, SP
00001384  4CDF 0307                444      MOVEM.L (SP)+, D0-D2/A0-A1
00001388  5440                     445      ADDQ.W #$2, D0
0000138A  31C0 7008                446      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000138E  6000 FF6E                447      BRA END_PRINT_REGISTER
00001392                           448  PRINT_IMMEDIATE_LONG:
00001392  3038 7008                449      MOVE.W (OFFSET_OPC_ADDRES),D0
00001396  2479 00009100            450      MOVE.L (START_ADDRESS), A2
0000139C  2432 0000                451      MOVE.L (A2, D0), D2 ; 
000013A0  48E7 E0C0                452      MOVEM.L D0-D2/A0-A1, -(SP)
000013A4  2F02                     453      MOVE.L D2, -(SP)
000013A6                           454      ; offset to get immediate value from opcode
000013A6  3038 7008                455      MOVE.W (OFFSET_OPC_ADDRES),D0
000013AA  2F3C 00000008            456      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013B0  4EB9 00001526            457      JSR PRINT_HEX
000013B6  508F                     458      ADDQ.L #$08, SP
000013B8  4CDF 0307                459      MOVEM.L (SP)+, D0-D2/A0-A1
000013BC  5840                     460      ADDQ.W #$4, D0
000013BE  31C0 7008                461      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C2  6000 FF3A                462      BRA END_PRINT_REGISTER
000013C6                           463  PRINT_AB_SHORT:
000013C6  227C 00007010            464      MOVE.L #OUTPUT_ADDRESS, A1
000013CC  32BC 2824                465      MOVE.W #'($', (A1)
000013D0  137C 0000 0002           466      MOVE.B #0, 2(A1)
000013D6  103C 000E                467      MOVE.B #14, D0
000013DA  4E4F                     468      TRAP #15
000013DC                           469      ; offset to get immediate value from opcode
000013DC  2479 00009100            470      MOVE.L (START_ADDRESS), A2
000013E2  3038 7008                471      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E6  3432 0000                472      MOVE.W (A2, D0), D2 ; 
000013EA  48E7 E0C0                473      MOVEM.L D0-D2/A0-A1, -(SP)
000013EE  2F02                     474      MOVE.L D2, -(SP)
000013F0  2F3C 00000004            475      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F6  4EB9 00001526            476      JSR PRINT_HEX
000013FC  508F                     477      ADDQ.L #$08, SP
000013FE  4CDF 0307                478      MOVEM.L (SP)+, D0-D2/A0-A1
00001402  5440                     479      ADDQ.W #$2, D0
00001404  31C0 7008                480      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001408                           481      ; print close parathesis with W
00001408  227C 00007010            482      MOVE.L #OUTPUT_ADDRESS, A1
0000140E  32BC 292E                483      MOVE.W #').', (A1)
00001412  137C 0057 0002           484      MOVE.B #'W',2(A1)
00001418  137C 0000 0003           485      MOVE.B #0, 3(A1)
0000141E  103C 000E                486      MOVE.B #14, D0
00001422  4E4F                     487      TRAP #15
00001424  6000 FED8                488      BRA END_PRINT_REGISTER
00001428                           489  PRINT_AB_LONG:
00001428                           490      ;print open parathesis
00001428  227C 00007010            491      MOVE.L #OUTPUT_ADDRESS, A1
0000142E  32BC 2824                492      MOVE.W #'($', (A1)
00001432  137C 0000 0002           493      MOVE.B #0, 2(A1)
00001438  103C 000E                494      MOVE.B #14, D0
0000143C  4E4F                     495      TRAP #15
0000143E                           496      ; print value in long
0000143E  2479 00009100            497      MOVE.L (START_ADDRESS), A2
00001444                           498      ; offset to get value from opcode
00001444  3038 7008                499      MOVE.W (OFFSET_OPC_ADDRES),D0
00001448  2432 0000                500      MOVE.L (A2, D0), D2 ; 
0000144C  48E7 E0C0                501      MOVEM.L D0-D2/A0-A1, -(SP)
00001450  2F02                     502      MOVE.L D2, -(SP)
00001452  2F3C 00000008            503      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001458  4EB9 00001526            504      JSR PRINT_HEX
0000145E  508F                     505      ADDQ.L #$08, SP
00001460  4CDF 0307                506      MOVEM.L (SP)+, D0-D2/A0-A1
00001464  5840                     507      ADDQ.W #$4, D0
00001466  31C0 7008                508      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000146A                           509      ; print close parathesis with W
0000146A  227C 00007010            510      MOVE.L #OUTPUT_ADDRESS, A1
00001470  32BC 292E                511      MOVE.W #').', (A1)
00001474  137C 004C 0002           512      MOVE.B #'L',2(A1)
0000147A  137C 0000 0003           513      MOVE.B #0, 3(A1)
00001480  103C 000E                514      MOVE.B #14, D0
00001484  4E4F                     515      TRAP #15
00001486  6000 FE76                516      BRA END_PRINT_REGISTER
0000148A                           517  
0000148A                           518  PRINT_OPEN:
0000148A  227C 00007010            519      MOVE.L #OUTPUT_ADDRESS, A1
00001490  12BC 0028                520      MOVE.B #'(', (A1)
00001494  137C 0000 0001           521      MOVE.B #$0, 1(A1)
0000149A  103C 000E                522      MOVE.B #14, D0
0000149E  4E4F                     523      TRAP #15
000014A0  6000 006A                524      BRA PRINT_A
000014A4                           525  PRINT_MINUS_OPEN: 
000014A4  227C 00007010            526      MOVE.L #OUTPUT_ADDRESS, A1
000014AA  32BC 2D28                527      MOVE.W #'-(', (A1)
000014AE  137C 0000 0002           528      MOVE.B #$0, 2(A1)
000014B4  103C 000E                529      MOVE.B #14, D0
000014B8  4E4F                     530      TRAP #15
000014BA  6000 0050                531      BRA PRINT_A
000014BE                           532  
000014BE                           533  PRINT_CLOSE:
000014BE  227C 00007010            534      MOVE.L #OUTPUT_ADDRESS, A1
000014C4  12BC 0029                535      MOVE.B #')', (A1)
000014C8  137C 0000 0001           536      MOVE.B #$0, 1(A1)
000014CE  103C 000E                537      MOVE.B #14, D0
000014D2  4E4F                     538      TRAP #15
000014D4  6000 FE28                539      BRA END_PRINT_REGISTER
000014D8                           540  PRINT_CLOSE_PLUS:
000014D8  227C 00007010            541      MOVE.L #OUTPUT_ADDRESS, A1
000014DE  32BC 292B                542      MOVE.W #')+', (A1)
000014E2  137C 0000 0002           543      MOVE.B #$0, 2(A1)
000014E8  103C 000E                544      MOVE.B #14, D0
000014EC  4E4F                     545      TRAP #15
000014EE  6000 FE0E                546      BRA END_PRINT_REGISTER
000014F2                           547  PRINT_D:
000014F2  227C 00007010            548      MOVE.L #OUTPUT_ADDRESS, A1 
000014F8  12BC 0044                549      MOVE.B #'D', (A1)
000014FC  137C 0000 0001           550      MOVE.B #$0, 1(A1)
00001502  103C 000E                551      MOVE.B #14, D0
00001506  4E4F                     552      TRAP #15
00001508  6000 FDAC                553      BRA CONTINUE_PRINT_RE_NUMBER
0000150C                           554  PRINT_A: 
0000150C  227C 00007010            555      MOVE.L #OUTPUT_ADDRESS, A1 
00001512  12BC 0041                556      MOVE.B #'A', (A1)
00001516  137C 0000 0001           557      MOVE.B #$0, 1(A1)
0000151C  103C 000E                558      MOVE.B #14, D0
00001520  4E4F                     559      TRAP #15
00001522  6000 FD92                560      BRA CONTINUE_PRINT_RE_NUMBER
00001526                           561  
00001526                           562  *-----------------------------------------------------------
00001526                           563  * PRINT HEX 
00001526                           564  * PARAMETERS:
00001526                           565  *   1- (8(SP)): VALUE IN HEX
00001526                           566  *   2- (4(SP)): HOW MANY BYTES
00001526                           567  * RETURN NULL
00001526                           568  *-----------------------------------------------------------
00001526                           569  PRINT_HEX:
00001526  6000 0016                570      BRA HEX_TO_ASCII
0000152A                           571  GET_ASCII_FROM_HEX:
0000152A  227C 00007010            572      MOVE.L #OUTPUT_ADDRESS, A1
00001530  103C 000E                573      MOVE.B #14, D0
00001534  4E4F                     574      TRAP #15
00001536  227C 00007010            575      MOVE.L #OUTPUT_ADDRESS, A1
0000153C                           576  END_PRINT_HEX:
0000153C  4E75                     577      RTS
0000153E                           578  *-----------------------------------------------------------
0000153E                           579  * CONVERT HEX TO ASCII 
0000153E                           580  * PARAMATERS:
0000153E                           581  *   1- (8(SP)): VALUE IN HEX
0000153E                           582  *   2- (4(SP)): HOW MANY BYTES
0000153E                           583  * RETURN:
0000153E                           584  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
0000153E                           585  * D0 STORES HEX VALUE
0000153E                           586  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
0000153E                           587  * D1 COUNT LOOP
0000153E                           588  * D2 CONVERT TO ASCII
0000153E                           589  * D3 USE TO CALCULATE SHIFT
0000153E                           590  HEX_TO_ASCII: 
0000153E  202F 0008                591      MOVE.L 8(SP), D0 
00001542  282F 0004                592      MOVE.L 4(SP), D4
00001546  0C44 0004                593      CMPI #HEX_TO_ASCII_WORD, D4 
0000154A  6700 004E                594      BEQ HEX_TO_ASCII_SWAP
0000154E  0C44 0002                595      CMPI #HEX_TO_ASCII_BYTE, D4
00001552  6700 EAAE                596      BEQ HEX_TO_ASCII_BYTE
00001556                           597  HEX2ASCII_DONE_CONVERT:
00001556  4201                     598      CLR.B D1
00001558  227C 00007010            599      MOVE.L #OUTPUT_ADDRESS, A1
0000155E  =0000000F                600  HEX_MASKING EQU $0000000F
0000155E  =00000002                601  HEX_TO_ASCII_BYTE EQU $02
0000155E  =00000004                602  HEX_TO_ASCII_WORD EQU $04
0000155E  =00000008                603  HEX_TO_ASCII_LONG EQU $08
0000155E                           604  
0000155E                           605  HEX_TO_ASCII_LOOP:
0000155E  B204                     606      CMP.B D4, D1
00001560  6700 0032                607      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001564                           608  
00001564  E998                     609      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001566  2600                     610      MOVE.L D0,D3 ; copy the value to mask
00001568  C6BC 0000000F            611      AND.L #HEX_MASKING, D3  ; mask
0000156E                           612  
0000156E  0C03 000A                613      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001572  6D00 000C                614      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001576                           615  
00001576  0C03 0048                616      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000157A  6D00 000E                617      BLT HEX_TO_ASCII_LETTER
0000157E                           618  
0000157E  60DE                     619      BRA HEX_TO_ASCII_LOOP
00001580                           620  HEX_TO_ASCII_NUMBER:
00001580  0603 0030                621      ADD.B #48, D3  ; convert number to letter
00001584  12C3                     622      MOVE.B D3, (A1)+ ; push to return memory
00001586  5201                     623      ADDQ.B #$1, D1 ; add for loop count
00001588  60D4                     624      BRA HEX_TO_ASCII_LOOP ; loop back
0000158A                           625  HEX_TO_ASCII_LETTER:
0000158A  0603 0037                626      ADD.B #55, D3 ; convert A-F in ascii
0000158E  12C3                     627      MOVE.B D3, (A1)+ ; push to return memory
00001590  5201                     628      ADDQ.B #$1, D1 ; add to for loop count
00001592  60CA                     629      BRA HEX_TO_ASCII_LOOP ;loop back
00001594                           630  END_HEX_TO_ASCII:
00001594  12FC 0000                631      MOVE.B #0, (A1)+ ; add null terminated value
00001598  6090                     632      BRA GET_ASCII_FROM_HEX
0000159A                           633  HEX_TO_ASCII_SWAP:
0000159A  4840                     634      SWAP D0
0000159C  60B8                     635      BRA HEX2ASCII_DONE_CONVERT
0000159E                           636     
0000159E                           637  HEX_TO_ASCII_ROR:
0000159E  E098                     638      ROR.L #$08, D0
000015A0  60B4                     639      BRA HEX2ASCII_DONE_CONVERT
000015A2                           640  
000015A2                           641  
000015A2                           642  *-----------------------------------------------------------
000015A2                           643  * CHECK IF THE VALUE IN HEX IS ODD 
000015A2                           644  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
000015A2                           645  * RETURN:
000015A2                           646  *   0: IF IT IS EVEN
000015A2                           647  *   1: IF IT IS ODD
000015A2                           648  * NOTE:
000015A2                           649  *   A0 IS FOR RETURN ADDRESS
000015A2                           650  *   D0 IS FOR HEX VALUE
000015A2                           651  CHECK_VALUE_IS_ODD:
000015A2  =00000000                652  VALUE_IS_EVEN EQU $0
000015A2  =00000001                653  VALUE_IS_ODD EQU $1
000015A2  41F9 00009000            654      LEA RETURN_ADDRESS, A0
000015A8  202F 0004                655      MOVE.L 4(SP), D0
000015AC  C0BC 0000FFFF            656      AND.L #$0000FFFF, D0
000015B2  80FC 0002                657      DIVU.W #2, D0
000015B6  4840                     658      SWAP D0      
000015B8  0C40 0000                659      CMPI.W #0, D0
000015BC  6700 000C                660      BEQ CHECK_VALUE_IS_ODD_FAILED
000015C0  30BC 0001                661      MOVE.W #VALUE_IS_ODD, (A0)
000015C4  6000 0002                662      BRA END_CHECK_VALUE_IS_ODD
000015C8                           663  END_CHECK_VALUE_IS_ODD:   
000015C8  4E75                     664      RTS
000015CA                           665  
000015CA                           666  CHECK_VALUE_IS_ODD_FAILED:
000015CA  30BC 0000                667      MOVE.W #VALUE_IS_EVEN, (A0)
000015CE  60F8                     668      BRA END_CHECK_VALUE_IS_ODD
000015D0                           669  *-----------------------------------------------------------
000015D0                           670  * CONVERT ASCII TO HEX
000015D0                           671  * PARAMETERS:
000015D0                           672  *   1. LOCATION OF THE ASCII
000015D0                           673  *   2. LENGTH OF THE ASCII
000015D0                           674  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015D0                           675  * RETURN:
000015D0                           676  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015D0                           677  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015D0                           678  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015D0                           679  * NOTE:
000015D0                           680  *    D0 FOR LENGTH OF ASCII
000015D0                           681  *    D1 FOR LOOPING
000015D0                           682  ; CURRENT INDEX
000015D0                           683  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015D0                           684  *    D3 FOR CONVERT FINAL RESULT
000015D0                           685  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015D0                           686  *    A0 LOCATION OF THE DATA   
000015D0                           687  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015D0                           688  ASCII_TO_HEX:
000015D0  =00000001                689  ASCII_TO_HEX_RETURN_OK EQU $1
000015D0  45F9 00009000            690      LEA RETURN_ADDRESS, A2
000015D6  4252                     691      CLR.W (A2)
000015D8  42AA 0002                692      CLR.L 2(A2)
000015DC  206F 000C                693      MOVE.L 12(SP),A0
000015E0                           694   ; LOCATION OF THE DATA
000015E0  202F 0008                695      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015E4  222F 0004                696      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E8  B280                     697      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015EA  6D00 0076                698      BLT ASCII_TO_HEX_FAILED_0
000015EE  4281                     699      CLR.L D1 ; FOR LOOPING
000015F0                           700  ASCII_TO_HEX_LOOP:
000015F0  B081                     701     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015F2  6700 0068                702     BEQ ASCII_TO_HEX_END_LOOP
000015F6                           703     ; D2 USE FOR STORE DATA 
000015F6  1418                     704      MOVE.B (A0)+, D2
000015F8  0C02 002F                705      CMPI.B #47, D2
000015FC                           706  ASCII_TO_HEX_CHECK_GT_0
000015FC  6E00 0006                707      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
00001600  6000 0066                708      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
00001604                           709  ASCII_TO_HEX_CHECK_LT_9:
00001604  0C02 003A                710      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001608  6D00 001E                711      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
0000160C                           712      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
0000160C  6000 0002                713      BRA ASCII_TO_HEX_CHECK_GT_A
00001610                           714  ASCII_TO_HEX_CHECK_GT_A:
00001610  0C02 0040                715      CMPI.B #64, D2
00001614  6E00 0006                716      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001618  6000 004E                717      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
0000161C                           718  ASCII_TO_HEX_CHECK_LT_F
0000161C  0C02 0047                719      CMPI.B #71, D2
00001620  6D00 0020                720      BLT ASCII_TO_HEX_CONVERT_LETTER
00001624  6000 0042                721      BRA ASCII_TO_HEX_FAILED_2
00001628                           722  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001628                           723  ASCII_TO_HEX_CONVERT_NUMBER:
00001628  2800                     724       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
0000162A  0402 0030                725       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
0000162E  9881                     726       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
00001630  5344                     727       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
00001632  C8FC 0004                728       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001636  E9A2                     729       ASL.L D4, D2 ; SHIFT DATA
00001638  D5AA 0002                730       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
0000163C  4282                     731       CLR.L D2
0000163E  5241                     732       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001640  60AE                     733       BRA ASCII_TO_HEX_LOOP
00001642                           734  ASCII_TO_HEX_CONVERT_LETTER:
00001642  2800                     735      MOVE.L D0, D4
00001644  0402 0037                736      SUB.B #55, D2
00001648  9881                     737      SUB.L D1,D4
0000164A  5344                     738      SUBQ #1, D4
0000164C  C8FC 0004                739      MULU #4, D4
00001650  E9A2                     740      ASL.L D4,D2
00001652  D5AA 0002                741      ADD.L D2, 2(A2)
00001656  4282                     742      CLR.L D2 
00001658  5241                     743      ADDQ #1, D1
0000165A  6094                     744      BRA ASCII_TO_HEX_LOOP
0000165C                           745  ASCII_TO_HEX_END_LOOP:
0000165C  34BC 0001                746      MOVE.W #1, (A2)
00001660  4E75                     747      RTS
00001662                           748      
00001662                           749  ASCII_TO_HEX_FAILED_0:
00001662  34BC 0002                750      MOVE.W #2, (A2)
00001666  4E75                     751      RTS
00001668                           752  ASCII_TO_HEX_FAILED_2:
00001668  34BC 0002                753      MOVE.W #2, (A2)
0000166C  4E75                     754      RTS 
0000166E                           755  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000166E                           756  * PARAMETERS:
0000166E                           757  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000166E                           758  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000166E                           759  * RETURN:
0000166E                           760  *   NULL
0000166E                           761  * NOTE:
0000166E                           762  *   A0 USE TO POINT TO THE ADDRESS
0000166E                           763  *   d1 USE TO MATH 
0000166E                           764  INCRASE_POINTER_START_ADDRESS: 
0000166E  206F 0008                765      MOVE.L 8(SP), A0
00001672  222F 0004                766      MOVE.L 4(SP), D1
00001676  D390                     767      ADD.L D1, (A0)
00001678  4E75                     768      RTS
0000167A                           769  
0000167A                           770  * FETCH 16 BIT FROM START_ADDRESS
0000167A                           771  * PARAMTERS: 
0000167A                           772  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000167A                           773  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000167A                           774  * RETURN:
0000167A                           775  *   NULL
0000167A                           776  * NOTE:
0000167A                           777  *     A0 USE TO STORE THE OPCODE LOCATION
0000167A                           778  *     A2 USES TO RETURN THE OPCODE
0000167A                           779  FETCH_OPCODES:
0000167A  206F 0008                780      MOVE.L 8(SP), A0 ; LOCATION
0000167E  246F 0004                781      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001682  3050                     782      MOVE.W (A0), A0
00001684  3488                     783      MOVE.W A0,(A2)
00001686  31FC 0002 7008           784      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000168C                           785  END_FETCH_OPCODES:
0000168C  4E75                     786      RTS
0000168E                           787  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000168E                           788  * LETS DECODE
0000168E                           789  * jump table uses to jump to decode subroutine
0000168E                           790  * PARAMATERS:
0000168E                           791  * 1-(4(Sp)) Word - opcode
0000168E                           792  * NOTE: 
0000168E                           793  *   D1 USES TO STORE OPCODE
0000168E                           794  JUMP_TABLE:
0000168E  322F 0004                795      MOVE.W 4(SP), D1
00001692  4EB9 000016FA            796      JSR RTS
00001698  4EB9 000016F0            797      JSR NOP
0000169E  4EB9 00001704            798      JSR JSR
000016A4  4EB9 00001842            799      JSR ADD 
000016AA  4EB9 00001750            800      JSR LEA
000016B0  4EB9 00001B30            801      JSR OR
000016B6  4EB9 00001BFE            802      JSR ORI
000016BC  4EB9 00001A8E            803      JSR NEG
000016C2  4EB9 00001704            804      JSR JSR
000016C8  4EB9 000017BE            805      JSR ADDA
000016CE  4EB9 00001842            806      JSR ADD 
000016D4  4EB9 00001914            807      JSR MOVEA 
000016DA  4EB9 000019CA            808      JSR MOVE
000016E0  4EB9 00001A8E            809      JSR MOVEM 
000016E6  4EB9 00001AF2            810      JSR BRA
000016EC                           811  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016EC                           812  END_JUMP_TABLE:
000016EC  4EB8 11E6                813      JSR UNSUPPORT_OPCODE
000016F0                           814  
000016F0                           815  NOP:
000016F0                           816  * constant for NOP 
000016F0  =00004E71                817  C_NOP EQU $4E71
000016F0  B27C 4E71                818      CMP.W #C_NOP, D1
000016F4  6700 05B8                819      BEQ PRINT_NOP
000016F8  4E75                     820      RTS
000016FA                           821  
000016FA                           822  RTS:
000016FA                           823  * constant for RTS 
000016FA  =00004E75                824  C_RTS EQU $4E75
000016FA  B27C 4E75                825      CMP.W #C_RTS, D1
000016FE  6700 057E                826      BEQ PRINT_RTS
00001702  4E75                     827      RTS
00001704                           828  
00001704                           829  JSR:
00001704  =00004E80                830  JSR_OPCODE EQU %0100111010000000
00001704  3401                     831      MOVE.W D1,D2 
00001706                           832  * MASKING WITH UNIQUE OPCODE
00001706  C47C FFC0                833      AND.W #%1111111111000000, D2
0000170A  B47C 4E80                834      CMP.W #JSR_OPCODE, D2
0000170E  6600 003E                835      BNE JSR_END 
00001712                           836      ; check to make sure we support this register 
00001712  3401                     837      MOVE.W D1, D2 
00001714  C43C 003F                838      AND.B #%00111111, D2 
00001718  3F02                     839      MOVE.W D2, -(SP)
0000171A  4EB8 11AC                840      JSR CHECK_SUPPORT_REGISTER 
0000171E  544F                     841      ADDQ #2, SP 
00001720                           842      ; check return value
00001720                           843      *  from print_register to see if it is unsupported register 
00001720  3439 00009000            844      MOVE.W (RETURN_ADDRESS), D2 
00001726  0C42 0002                845      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000172A  6700 0022                846      BEQ JSR_END
0000172E                           847      ; done checking 
0000172E  4EB9 00001CF6            848      JSR PRINT_JSR
00001734                           849  * MASKING TO GET MODE AND REGISTER
00001734  1401                     850      MOVE.B D1,D2
00001736  C43C 003F                851      AND.B #%00111111, D2
0000173A  48A7 4000                852      MOVEM.W D1, -(SP)
0000173E  3F02                     853      MOVE.W D2, -(SP)
00001740  3F3C 0000                854      MOVE.W #$0, -(SP)
00001744  4EB8 1252                855      JSR PRINT_REGISTER
00001748  5882                     856      ADDQ.L #4, D2
0000174A  4C9F 0002                857      MOVEM.W (SP)+, D1
0000174E                           858  JSR_END:
0000174E  4E75                     859      RTS
00001750                           860  
00001750                           861  LEA:
00001750  3401                     862      MOVE.W D1,D2 
00001752  C47C F1C0                863      AND.W  #%1111000111000000, D2
00001756  0C42 41C0                864      CMPI.W #%0100000111000000, D2
0000175A  6600 0060                865      BNE LEA_END
0000175E                           866  
0000175E                           867      ; CHECK TO MAKE SURE WE SUPPORT THE EA
0000175E  3401                     868      MOVE.W D1, D2 
00001760  C43C 003F                869      AND.B #%00111111, D2 
00001764  3F02                     870      MOVE.W D2, -(SP)
00001766  4EB8 11AC                871      JSR CHECK_SUPPORT_REGISTER
0000176A  544F                     872      ADDQ #2, SP 
0000176C                           873      ; check return value
0000176C                           874      *  from print_register to see if it is unsupported register 
0000176C  3439 00009000            875      MOVE.W (RETURN_ADDRESS), D2 
00001772  0C42 0002                876      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001776  6700 F8D0                877      BEQ FINISH_OPCODE
0000177A                           878      * END CHECKING
0000177A  4EB9 00001D08            879      JSR PRINT_LEA
00001780  1401                     880      MOVE.B D1,D2 
00001782                           881      ; MASK TO GET MODE AND REGISTER
00001782  C43C 003F                882      AND.B #%0000000000111111, D2
00001786  48A7 4000                883      MOVEM.W D1, -(SP)
0000178A  3F02                     884      MOVE.W D2, -(SP)
0000178C  3F3C 0000                885      MOVE.W #$0, -(SP)
00001790  4EB8 1252                886      JSR PRINT_REGISTER
00001794  588F                     887      ADDQ.L #$4, SP
00001796  4C9F 0002                888      MOVEM.W (SP)+, D1
0000179A  4EB8 10D2                889      JSR PRINT_COMMA
0000179E                           890      ; MASK TO GET DESTINATION REGISTER
0000179E  3401                     891      MOVE.W D1,D2
000017A0  C47C 0E00                892      AND.W #%0000111000000000, D2
000017A4  E04A                     893      LSR.W #$08, D2
000017A6  E24A                     894      LSR.W #$01, D2
000017A8  843C 0008                895      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017AC  3F02                     896      MOVE.W D2, -(SP)
000017AE  3F3C 0000                897      MOVE.W #$0, -(SP) 
000017B2  4EB8 1252                898      JSR PRINT_REGISTER
000017B6  588F                     899      ADDQ.L #$04, SP
000017B8  6000 F88E                900      BRA FINISH_OPCODE
000017BC                           901  LEA_END:
000017BC  4E75                     902      RTS
000017BE                           903  
000017BE                           904  ADDA:
000017BE  =0000D0C0                905  C_ADDA EQU       %1101000011000000
000017BE  =0000F0C0                906  ADDA_MASKING EQU %1111000011000000
000017BE  =00000100                907  ADDA_SIZE_MASKING EQU %0000000100000000
000017BE  =00000E00                908  ADDA_AN_MASKING EQU %0000111000000000
000017BE  3401                     909      MOVE.W D1, D2
000017C0  C47C F0C0                910      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017C4  0C42 D0C0                911      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017C8  6600 0076                912      BNE ADDA_END 
000017CC                           913      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017CC  3401                     914      MOVE.W D1, D2 
000017CE  C43C 003F                915      AND.B #%00111111, D2 
000017D2  3F02                     916      MOVE.W D2, -(SP)
000017D4  4EB8 11AC                917      JSR CHECK_SUPPORT_REGISTER
000017D8  544F                     918      ADDQ #2, SP 
000017DA                           919      ; check return value
000017DA                           920      *  from print_register to see if it is unsupported register 
000017DA  3439 00009000            921      MOVE.W (RETURN_ADDRESS), D2 
000017E0  0C42 0002                922      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017E4  6700 F862                923      BEQ FINISH_OPCODE
000017E8  4EB9 00001D1A            924      JSR PRINT_ADDA
000017EE  3401                     925      MOVE.W D1, D2  ; START TO MASK SIZE 
000017F0  C47C 0100                926      AND.W #ADDA_SIZE_MASKING,D2 
000017F4  E04A                     927      LSR.W #8, D2 
000017F6  3C02                     928      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
000017F8  5246                     929      ADDQ #$1, D6
000017FA  1F06                     930      MOVE.B D6 , -(SP)
000017FC  4EB8 113A                931      JSR PRINT_DATA
00001800  548F                     932      ADDQ.L #$2, SP 
00001802  4EB8 10B4                933      JSR PRINT_TAB
00001806                           934      ; GET MODE AND REGISTER
00001806  3238 7006                935      MOVE.W (OPCODE_ADDRESS), D1 
0000180A  1401                     936      MOVE.B D1, D2 
0000180C  C43C 003F                937      AND.B #%00111111, D2 
00001810  3F02                     938      MOVE.W D2, -(SP)
00001812  3F06                     939      MOVE.W D6, -(SP)
00001814  4EB8 1252                940      JSR PRINT_REGISTER 
00001818  588F                     941      ADDQ.L #$04, SP 
0000181A  4EB8 10D2                942      JSR PRINT_COMMA
0000181E  3238 7006                943      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
00001822  3401                     944      MOVE.W D1, D2
00001824  C47C 0E00                945      AND.W #ADDA_AN_MASKING, D2
00001828  E04A                     946      LSR.W #8, D2 
0000182A  E24A                     947      LSR.W #1, D2 
0000182C  843C 0008                948      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
00001830  3F02                     949      MOVE.W D2, -(SP)
00001832  3F3C 0000                950      MOVE.W #$0, -(SP)
00001836  4EB8 1252                951      JSR PRINT_REGISTER 
0000183A  588F                     952      ADDQ.L #$4, SP 
0000183C  6000 F80A                953      BRA FINISH_OPCODE
00001840                           954  ADDA_END:
00001840  4E75                     955      RTS
00001842                           956  
00001842                           957  ADD: 
00001842  =0000D000                958  C_ADD EQU           %1101000000000000 ; PATTERN
00001842  =0000F000                959  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
00001842  =0000003F                960  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
00001842  =00000E00                961  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
00001842  =000000C0                962  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
00001842  =00000100                963  C_ADD_DIRECTION EQU %0000000100000000
00001842  =00000000                964  C_ADD_TO_D EQU      %0000000000000000
00001842  =00000100                965  C_ADD_FROM_D EQU    %0000000100000000
00001842  3401                     966      MOVE.W D1, D2 
00001844                           967      ; CHECK PATTERN 
00001844  C47C F000                968      AND.W #C_ADD_MASKING, D2 
00001848  0C42 D000                969      CMPI.W #C_ADD, D2 
0000184C  6600 00C4                970      BNE ADD_END 
00001850                           971      ; CHECK SUPPORT REGISTER 
00001850  3401                     972      MOVE.W D1, D2 
00001852  C43C 003F                973      AND.B #%00111111, D2 
00001856  3F02                     974      MOVE.W D2, -(SP)
00001858  4EB8 11AC                975      JSR CHECK_SUPPORT_REGISTER
0000185C  544F                     976      ADDQ #2, SP 
0000185E                           977      ; check return value
0000185E                           978      *  from print_register to see if it is unsupported register 
0000185E  3439 00009000            979      MOVE.W (RETURN_ADDRESS), D2 
00001864  0C42 0002                980      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001868  6700 F7DE                981      BEQ FINISH_OPCODE
0000186C                           982      
0000186C  4EB9 00001D28            983      JSR PRINT_ADD 
00001872  3238 7006                984      MOVE.W (OPCODE_ADDRESS), D1 
00001876  3401                     985      MOVE.W D1, D2 
00001878  C47C 00C0                986      AND.W #C_ADD_SIZE, D2 
0000187C  EC4A                     987      LSR.W #6, D2
0000187E  1C02                     988      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001880                           989  
00001880  1F02                     990      MOVE.B D2, -(SP)
00001882  4EB8 113A                991      JSR PRINT_DATA
00001886  548F                     992      ADDQ.L #$02, SP 
00001888  4EB8 10B4                993      JSR PRINT_TAB 
0000188C                           994      ; CHECK DIRECTION
0000188C  3238 7006                995      MOVE.W (OPCODE_ADDRESS), D1 
00001890  3401                     996      MOVE.W D1, D2  
00001892  C47C 0100                997      AND.W #C_ADD_DIRECTION, D2 
00001896  0C42 0000                998      CMPI.W #C_ADD_TO_D, D2 
0000189A  6700 003C                999      BEQ ADD_TO_D ; DN <EA> -> DN
0000189E                          1000      ; otherwise from d 
0000189E                          1001  ADD_FROM_D:
0000189E  3238 7006               1002      MOVE.W (OPCODE_ADDRESS), D1 
000018A2  3401                    1003      MOVE.W D1, D2 
000018A4  C47C 0E00               1004      AND.W #C_ADD_REGISTER, D2 
000018A8  E08A                    1005      LSR.L #8, D2 
000018AA  E28A                    1006      LSR.L #1, D2 
000018AC  843C 0000               1007      OR.B #%00000000, D2
000018B0  3F02                    1008      MOVE.W D2, -(SP)
000018B2  3F3C 0000               1009      MOVE.W #$0, -(SP)
000018B6  4EB8 1252               1010      JSR PRINT_REGISTER 
000018BA  5882                    1011      ADDQ.L #4, D2 
000018BC  4EB8 10D2               1012      JSR PRINT_COMMA 
000018C0                          1013      
000018C0  3238 7006               1014      MOVE.W (OPCODE_ADDRESS), D1 
000018C4  3401                    1015      MOVE.W D1, D2 
000018C6  C43C 003F               1016      AND.B #C_ADD_EA, D2 
000018CA  3F02                    1017      MOVE.W D2, -(SP)
000018CC  3F06                    1018      MOVE.W D6, -(SP)
000018CE  4EB8 1252               1019      JSR PRINT_REGISTER
000018D2  588F                    1020      ADDQ.L #4, SP 
000018D4  6000 F772               1021      BRA FINISH_OPCODE
000018D8                          1022      
000018D8                          1023  ADD_TO_D:
000018D8  3238 7006               1024      MOVE.W (OPCODE_ADDRESS), D1 
000018DC  3401                    1025      MOVE.W D1, D2 
000018DE                          1026      ; GET SOURCE REGISTER 
000018DE  C43C 003F               1027      AND.B #C_ADD_EA, D2 
000018E2  3F02                    1028      MOVE.W D2, -(SP)
000018E4  3F06                    1029      MOVE.W D6, -(SP)
000018E6  4EB8 1252               1030      JSR PRINT_REGISTER
000018EA  588F                    1031      ADDQ.L #4, SP 
000018EC  4EB8 10D2               1032      JSR PRINT_COMMA 
000018F0                          1033      ; PRINT DATA REGISTER 
000018F0  3238 7006               1034      MOVE.W (OPCODE_ADDRESS), D1 
000018F4  3401                    1035      MOVE.W D1, D2 
000018F6  C47C 0E00               1036      AND.W #C_ADD_REGISTER, D2 
000018FA  E04A                    1037      LSR.W #8, D2 
000018FC  E24A                    1038      LSR.W #1, D2 
000018FE                          1039      ; APPEND MODE TO D2 FOR PRINT_REGISTER
000018FE  843C 0000               1040      OR.B #%00000000, D2 
00001902  3F02                    1041      MOVE.W D2, -(SP)
00001904  3F3C 0000               1042      MOVE.W #$0, -(SP)
00001908  4EB8 1252               1043      JSR PRINT_REGISTER
0000190C  588F                    1044      ADDQ.L #4, SP 
0000190E  6000 F738               1045      BRA FINISH_OPCODE
00001912                          1046  ADD_END:
00001912  4E75                    1047      RTS
00001914                          1048  
00001914                          1049  MOVEA: 
00001914  =00001040               1050  C_MOVEA_PATTERN1 EQU  %0001000001000000
00001914  =00003040               1051  C_MOVEA_PATTERN2 EQU  %0011000001000000
00001914  =00002040               1052  C_MOVEA_PATTERN3 EQU  %0010000001000000
00001914  =0000F1C0               1053  C_MOVEA_P_MASKING EQU %1111000111000000
00001914  =00003000               1054  C_MOVEA_SIZE      EQU %0011000000000000
00001914  =00000E00               1055  C_MOVEA_AN        EQU %0000111000000000
00001914  =0000003F               1056  C_MOVEA_REGISTER  EQU %00111111
00001914  3401                    1057      MOVE.W D1, D2 
00001916  0242 F1C0               1058      ANDI.W #C_MOVEA_P_MASKING, D2 
0000191A  0C42 1040               1059      CMPI.W #C_MOVEA_PATTERN1, D2 
0000191E  6700 0014               1060      BEQ MOVEA_REGISTER_OK
00001922  0C42 3040               1061      CMPI.W #C_MOVEA_PATTERN2, D2 
00001926  6700 000C               1062      BEQ MOVEA_REGISTER_OK
0000192A  0C42 2040               1063      CMPI.W #C_MOVEA_PATTERN3, D2 
0000192E  6700 0004               1064      BEQ MOVEA_REGISTER_OK
00001932  4E75                    1065      RTS
00001934                          1066  MOVEA_REGISTER_OK:
00001934                          1067      ; CHECK SUPPORT THE REGISTER 
00001934  3401                    1068      MOVE.W D1, D2 
00001936  C43C 003F               1069      AND.B #C_MOVEA_REGISTER, D2 
0000193A  3F02                    1070      MOVE.W D2, -(SP) 
0000193C  4EB8 11AC               1071      JSR CHECK_SUPPORT_REGISTER
00001940  548F                    1072      ADDQ.L #2, SP 
00001942  3439 00009000           1073      MOVE.W (RETURN_ADDRESS), D2 
00001948  0C42 0002               1074      CMPI.W #C_UNSUPPORT_REGISTER, D2 
0000194C  6700 F6FA               1075      BEQ FINISH_OPCODE
00001950                          1076      ; DONE CHECKING, NOW DECODE 
00001950  4EB9 00001D36           1077      JSR PRINT_MOVEA 
00001956                          1078      ; GET SIZE 
00001956  3401                    1079      MOVE.W D1, D2 
00001958  C47C 3000               1080      AND.W #C_MOVEA_SIZE, D2 
0000195C                          1081      ; SHIFT TO LSB 
0000195C  E04A                    1082      LSR.W #8, D2 
0000195E  E84A                    1083      LSR.W #4, D2 
00001960  0C02 0001               1084      CMPI.B #%00000001, D2
00001964  6700 000E               1085      BEQ CONVERT_OPMODE_SIZE_B
00001968  0C02 0003               1086      CMPI.B #%00000011, D2 
0000196C  6700 000C               1087      BEQ CONVERT_OPMODE_SIZE_W
00001970  6000 000E               1088      BRA MOVEA_DONE_CONVERT
00001974                          1089  CONVERT_OPMODE_SIZE_B:
00001974  5302                    1090      SUBQ.B #1, D2 
00001976  6000 0008               1091      BRA MOVEA_DONE_CONVERT
0000197A                          1092  CONVERT_OPMODE_SIZE_W: 
0000197A  5502                    1093      SUBQ.B #2, D2 
0000197C  6000 0002               1094      BRA MOVEA_DONE_CONVERT
00001980                          1095  
00001980                          1096  MOVEA_DONE_CONVERT:
00001980  3C02                    1097      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001982  1F06                    1098      MOVE.B D6, -(SP)
00001984  4EB8 113A               1099      JSR PRINT_DATA 
00001988  548F                    1100      ADDQ.L #2, SP 
0000198A  4EB8 10B4               1101      JSR PRINT_TAB
0000198E                          1102      ; GET SOURCE REGISTER 
0000198E  3238 7006               1103      MOVE.W (OPCODE_ADDRESS), D1 
00001992  3401                    1104      MOVE.W D1, D2 
00001994  C43C 003F               1105      AND.B #C_MOVEA_REGISTER,D2 
00001998  3F02                    1106      MOVE.W D2, -(SP)
0000199A  3F06                    1107      MOVE.W D6, -(SP)
0000199C  4EB8 1252               1108      JSR PRINT_REGISTER
000019A0  588F                    1109      ADDQ.L #4, SP 
000019A2  4EB8 10D2               1110      JSR PRINT_COMMA
000019A6                          1111  
000019A6  3238 7006               1112      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019AA  3401                    1113      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019AC  C47C 0E00               1114      AND.W #C_MOVEA_AN, D2 
000019B0  E04A                    1115      LSR.W #8, D2 
000019B2  E24A                    1116      LSR.W #1, D2 
000019B4                          1117      ; ADD MODE FOR PRINT_REGISTER 
000019B4  0002 0008               1118      ORI.B #%00001000, D2 
000019B8  3F02                    1119      MOVE.W D2, -(SP)
000019BA  3F3C 0000               1120      MOVE.W #0, -(SP)
000019BE  4EB8 1252               1121      JSR PRINT_REGISTER ; PRINT AN 
000019C2  588F                    1122      ADDQ.L #4, SP 
000019C4  6000 F682               1123      BRA FINISH_OPCODE   
000019C8                          1124  
000019C8                          1125  MOVEA_END: 
000019C8  4E75                    1126      RTS 
000019CA                          1127  
000019CA                          1128  MOVE: 
000019CA  =00001000               1129  C_MOVE_PATTERN EQU   %0001000000000000
000019CA  =00003000               1130  C_MOVE_PATTERN1 EQU  %0011000000000000
000019CA  =00002000               1131  C_MOVE_PATTERN2 EQU  %0010000000000000
000019CA  =0000F000               1132  C_MOVE_MASKING EQU   %1111000000000000
000019CA  =00003000               1133  C_MOVE_SIZE EQU      %0011000000000000
000019CA  =00000E00               1134  C_MOVE_DES_XN EQU    %0000111000000000
000019CA  =000001C0               1135  C_MOVE_DES_MOD EQU   %0000000111000000
000019CA  =0000003F               1136  C_MOVE_SRC_RE EQU    %00111111 
000019CA  3401                    1137      MOVE.W D1, D2 
000019CC  C47C F000               1138      AND.W #C_MOVE_MASKING, D2 
000019D0  0C42 1000               1139      CMPI.W #C_MOVE_PATTERN, D2 
000019D4  6700 0014               1140      BEQ MOVE_MATCH_PATTERN 
000019D8  0C42 3000               1141      CMPI.W #C_MOVE_PATTERN1, D2 
000019DC  6700 000C               1142      BEQ MOVE_MATCH_PATTERN 
000019E0  0C42 2000               1143      CMPI.W #C_MOVE_PATTERN2, D2 
000019E4  6700 0004               1144      BEQ MOVE_MATCH_PATTERN
000019E8                          1145  MOVE_END:
000019E8  4E75                    1146      RTS
000019EA                          1147  MOVE_MATCH_PATTERN: 
000019EA  3401                    1148      MOVE.W D1, D2 
000019EC                          1149      ; CHECK IF WE SUPPORT THE REGISTER 
000019EC                          1150      ; SOURCE REGISTER 
000019EC  C43C 003F               1151      AND.B #C_MOVE_SRC_RE, D2
000019F0  3A42                    1152      MOVE.W D2, A5 ; COPY FOR LATER USE
000019F2  3F02                    1153      MOVE.W D2, -(SP)
000019F4  4EB8 11AC               1154      JSR CHECK_SUPPORT_REGISTER 
000019F8  548F                    1155      ADDQ.L #2, SP 
000019FA  0C79 0002 00009000      1156      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A02  6700 F644               1157      BEQ FINISH_OPCODE
00001A06                          1158      ; DES REGISTER 
00001A06                          1159      ;GET XN 
00001A06  3238 7006               1160      MOVE.W (OPCODE_ADDRESS), D1 
00001A0A  3401                    1161      MOVE.W D1,D2 
00001A0C  C47C 0E00               1162      AND.W #C_MOVE_DES_XN, D2 
00001A10  EC4A                    1163      LSR.W #6, D2 
00001A12  C27C 01C0               1164      AND.W #C_MOVE_DES_MOD, D1 
00001A16  8441                    1165      OR.W D1, D2 
00001A18  E64A                    1166      LSR.W #3, D2 
00001A1A  3842                    1167      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A1C  3F02                    1168      MOVE.W D2, -(SP)
00001A1E  4EB8 11AC               1169      JSR CHECK_SUPPORT_REGISTER
00001A22  548F                    1170      ADDQ.L #2, SP 
00001A24  0C79 11AC 00009000      1171      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A2C  6700 F61A               1172      BEQ FINISH_OPCODE
00001A30                          1173      ; EVERYTHING IS OK 
00001A30                          1174      
00001A30  4EB9 00001D44           1175      JSR PRINT_MOVE
00001A36  3238 7006               1176      MOVE.W (OPCODE_ADDRESS), D1 
00001A3A  3401                    1177      MOVE.W D1, D2 
00001A3C  C47C 3000               1178      AND.W #C_MOVE_SIZE, D2 
00001A40  E04A                    1179      LSR.W #8, D2 
00001A42  E80A                    1180      LSR.B #4, D2 
00001A44  0C02 0001               1181      CMPI.B #1, D2 
00001A48  6700 000E               1182      BEQ MOVE_OPMODE_BYTE
00001A4C  0C02 0003               1183      CMPI.B #3, D2 
00001A50  6700 000C               1184      BEQ MOVE_OPMODE_WORD
00001A54  6000 000E               1185      BRA MOVE_DONE_CONVERT
00001A58                          1186  MOVE_OPMODE_BYTE:
00001A58  5302                    1187      SUBQ.B #1, D2
00001A5A  6000 0008               1188      BRA MOVE_DONE_CONVERT
00001A5E                          1189  MOVE_OPMODE_WORD:
00001A5E  5502                    1190      SUBQ.B #2, D2 
00001A60  6000 0002               1191      BRA MOVE_DONE_CONVERT
00001A64                          1192  MOVE_DONE_CONVERT:
00001A64  3C02                    1193      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A66  1F06                    1194      MOVE.B D6, -(SP) 
00001A68  4EB8 113A               1195      JSR PRINT_DATA 
00001A6C  548F                    1196      ADDQ.L #2, SP
00001A6E  4EB8 10B4               1197      JSR PRINT_TAB 
00001A72                          1198      ; PRINT SOURCE
00001A72  3F0D                    1199      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A74  3F06                    1200      MOVE.W D6, -(SP) ; SIZE 
00001A76  4EB8 1252               1201      JSR PRINT_REGISTER
00001A7A  588F                    1202      ADDQ.L #4, SP 
00001A7C                          1203      ; PRINT DES 
00001A7C  4EB8 10D2               1204      JSR PRINT_COMMA 
00001A80  3F0C                    1205      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A82  3F06                    1206      MOVE.W D6, -(SP) ; SIZE 
00001A84  4EB8 1252               1207      JSR PRINT_REGISTER 
00001A88  588F                    1208      ADDQ.L #4, SP 
00001A8A  6000 F5BC               1209      BRA FINISH_OPCODE 
00001A8E                          1210  
00001A8E                          1211  MOVEM: 
00001A8E  =00004880               1212  C_MOVEM_PATTERN EQU %0100100010000000
00001A8E  =0000FB80               1213  C_MOVEM_MASKING EQU %1111101110000000
00001A8E  =00000400               1214  C_MOVEM_DIR EQU     %0000010000000000
00001A8E  =00000040               1215  C_MOVEM_SIZE EQU    %0000000001000000
00001A8E                          1216  * C_MOVEM_REGISTER EQU
00001A8E                          1217  
00001A8E                          1218  
00001A8E                          1219  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A8E                          1220  NEG:
00001A8E                          1221  * CONSTANT FOR NEG OPCODE
00001A8E  =00004400               1222  NEG_OPCODE EQU %0100010000000000
00001A8E  =0000FF00               1223  NEG_M      EQU %1111111100000000
00001A8E  =0000003F               1224  NEG_REG_M  EQU %0000000000111111
00001A8E  =000000C0               1225  NEG_SIZE_M EQU %0000000011000000
00001A8E  3401                    1226      MOVE.W D1, D2
00001A90                          1227  * MASKING WITH NEG UNIQUE CODE
00001A90  C47C FF00               1228      AND.W #NEG_M, D2
00001A94  B47C 4400               1229      CMP.W #NEG_OPCODE, D2
00001A98  6600 0056               1230      BNE NEG_END
00001A9C                          1231  
00001A9C                          1232  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001A9C  3401                    1233      MOVE.W D1, D2 
00001A9E  C43C 003F               1234      AND.B #NEG_REG_M, D2 
00001AA2  3F02                    1235      MOVE.W D2, -(SP)
00001AA4  4EB8 11AC               1236      JSR CHECK_SUPPORT_REGISTER
00001AA8  544F                    1237      ADDQ #2, SP 
00001AAA                          1238  * from print_register to see if it is unsupported register 
00001AAA  3439 00009000           1239      MOVE.W (RETURN_ADDRESS), D2 
00001AB0  0C42 0002               1240      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001AB4  6700 F592               1241      BEQ FINISH_OPCODE
00001AB8                          1242  
00001AB8  4EB9 00001C92           1243      JSR PRINT_NEG
00001ABE  3238 7006               1244      MOVE.W (OPCODE_ADDRESS), D1 
00001AC2  3401                    1245      MOVE.W D1, D2
00001AC4                          1246  * MASKING TO GET NEG SIZE
00001AC4  C47C 00C0               1247      AND.W #NEG_SIZE_M, D2
00001AC8  EC42                    1248      ASR.W #6, D2
00001ACA  1C02                    1249      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001ACC  1F06                    1250      MOVE.B D6, -(SP)
00001ACE  4EB8 113A               1251      JSR PRINT_DATA
00001AD2  548F                    1252      ADDQ.L #2, SP
00001AD4  4EB8 10B4               1253      JSR PRINT_TAB
00001AD8                          1254  
00001AD8  3238 7006               1255      MOVE.W (OPCODE_ADDRESS), D1     
00001ADC  3401                    1256      MOVE.W D1, D2
00001ADE                          1257  * MASKING TO GET MODE AND REGISTER
00001ADE  C47C 003F               1258      AND.W #NEG_REG_M, D2
00001AE2  3F02                    1259      MOVE.W D2, -(SP)
00001AE4  3F06                    1260      MOVE.W D6, -(SP)
00001AE6  4EB8 1252               1261      JSR PRINT_REGISTER
00001AEA  588F                    1262      ADDQ.L #$04, SP
00001AEC  6000 F55A               1263      BRA FINISH_OPCODE
00001AF0                          1264  NEG_END: 
00001AF0  4E75                    1265      RTS
00001AF2                          1266  
00001AF2                          1267  BRA:
00001AF2                          1268  * CONSTANT FOR BRA OPCODE
00001AF2  =00006000               1269  BRA_OPCODE EQU %0110000000000000
00001AF2  =00006000               1270  BRA_M      EQU %0110000000000000
00001AF2  =000000FF               1271  BRA_DISP_M EQU %0000000011111111
00001AF2  3401                    1272      MOVE.W D1, D2
00001AF4                          1273  * MASKING WITH BRA UNIQUE CODE
00001AF4  C47C 6000               1274      AND.W #BRA_M, D2
00001AF8  B47C 6000               1275      CMP.W #BRA_OPCODE, D2
00001AFC  6600 0030               1276      BNE BRA_END
00001B00                          1277  
00001B00                          1278  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B00  3401                    1279      MOVE.W D1, D2 
00001B02  C43C 00FF               1280      AND.B #BRA_DISP_M, D2 
00001B06  3F02                    1281      MOVE.W D2, -(SP)
00001B08  4EB8 11AC               1282      JSR CHECK_SUPPORT_REGISTER
00001B0C  544F                    1283      ADDQ #2, SP 
00001B0E                          1284  * from print_register to see if it is unsupported register 
00001B0E  3439 00009000           1285      MOVE.W (RETURN_ADDRESS), D2 
00001B14  0C42 0002               1286      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B18                          1287  
00001B18  4EB9 00001CA0           1288      JSR PRINT_BRA
00001B1E  3238 7006               1289      MOVE.W (OPCODE_ADDRESS), D1 
00001B22  3401                    1290      MOVE.W D1, D2
00001B24                          1291  * MASKING TO GET DISPLACEMENT OF BRA
00001B24  C47C 00FF               1292      AND.W #BRA_DISP_M, D2
00001B28  3F02                    1293      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B2A  6000 F51C               1294      BRA FINISH_OPCODE
00001B2E                          1295  BRA_END:
00001B2E  4E75                    1296      RTS
00001B30                          1297  
00001B30                          1298  OR:
00001B30                          1299  * CONSTANT FOR OR OPCODE
00001B30  =00008000               1300  OR_OPCODE EQU %1000000000000000
00001B30  =00008000               1301  OR_M      EQU %1000000000000000
00001B30  =00000E00               1302  OR_DREG_M EQU %0000111000000000
00001B30  =000000C0               1303  OR_SIZE_M EQU %0000000011000000
00001B30  =0000003F               1304  OR_REG_M  EQU %0000000000111111
00001B30  =00000100               1305  OR_DIREC  EQU %0000000100000000
00001B30                          1306  
00001B30  3401                    1307      MOVE.W D1, D2
00001B32                          1308  * MASKING WITH OR UNIQUE CODE
00001B32  C47C 8000               1309      AND.W #OR_M, D2
00001B36  B47C 8000               1310      CMP.W #OR_OPCODE, D2
00001B3A  6600 00C0               1311      BNE OR_END
00001B3E                          1312  
00001B3E                          1313  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B3E  3401                    1314      MOVE.W D1, D2 
00001B40  C43C 003F               1315      AND.B #OR_REG_M, D2 
00001B44  3F02                    1316      MOVE.W D2, -(SP)
00001B46  4EB8 11AC               1317      JSR CHECK_SUPPORT_REGISTER
00001B4A  544F                    1318      ADDQ #2, SP 
00001B4C                          1319  * from print_register to see if it is unsupported register 
00001B4C  3439 00009000           1320      MOVE.W (RETURN_ADDRESS), D2 
00001B52  0C42 0002               1321      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B56                          1322  
00001B56  4EB9 00001CBE           1323      JSR PRINT_OR
00001B5C  3238 7006               1324      MOVE.W (OPCODE_ADDRESS), D1
00001B60  3401                    1325      MOVE.W D1, D2
00001B62                          1326  * MASKING TO GET SIZE OF OR
00001B62  C47C 00C0               1327      AND.W #OR_SIZE_M, D2
00001B66  EC42                    1328      ASR.W #6, D2
00001B68  1C02                    1329      MOVE.B D2, D6
00001B6A  1F02                    1330      MOVE.B D2, -(SP)
00001B6C  4EB8 113A               1331      JSR PRINT_DATA
00001B70  548F                    1332      ADDQ.L #$02, SP 
00001B72  4EB8 10B4               1333      JSR PRINT_TAB
00001B76                          1334  * MASKING TO GET DIRECTION OF THIS OR
00001B76  3238 7006               1335      MOVE.W (OPCODE_ADDRESS), D1 
00001B7A  3401                    1336      MOVE.W D1, D2  
00001B7C  C47C 0100               1337      AND.W #OR_DIREC, D2 
00001B80  0C42 0100               1338      CMPI.W #OR_DIREC, D2 
00001B84  6600 003C               1339      BNE OR_TO_D  * DN V <EA> -> DN
00001B88                          1340  
00001B88                          1341  OR_TO_EA:  * DN V <EA> -> <EA>
00001B88  3238 7006               1342      MOVE.W (OPCODE_ADDRESS), D1 
00001B8C  3401                    1343      MOVE.W D1, D2 
00001B8E  C47C 0E00               1344      AND.W #OR_DREG_M, D2 
00001B92  E08A                    1345      LSR.L #8, D2 
00001B94  E28A                    1346      LSR.L #1, D2 
00001B96  843C 0000               1347      OR.B #%00000000, D2
00001B9A  3F02                    1348      MOVE.W D2, -(SP)
00001B9C  3F3C 0000               1349      MOVE.W #$0, -(SP)
00001BA0  4EB8 1252               1350      JSR PRINT_REGISTER 
00001BA4  5882                    1351      ADDQ.L #4, D2 
00001BA6  4EB8 10D2               1352      JSR PRINT_COMMA 
00001BAA                          1353      
00001BAA  3238 7006               1354      MOVE.W (OPCODE_ADDRESS), D1 
00001BAE  3401                    1355      MOVE.W D1, D2 
00001BB0  C43C 003F               1356      AND.B #OR_REG_M, D2 
00001BB4  3F02                    1357      MOVE.W D2, -(SP)
00001BB6  3F06                    1358      MOVE.W D6, -(SP)
00001BB8  4EB8 1252               1359      JSR PRINT_REGISTER
00001BBC  588F                    1360      ADDQ.L #4, SP 
00001BBE  6000 F488               1361      BRA FINISH_OPCODE
00001BC2                          1362  
00001BC2                          1363  OR_TO_D:   * <EA> V DN -> DN
00001BC2  3238 7006               1364      MOVE.W (OPCODE_ADDRESS), D1 
00001BC6  3401                    1365      MOVE.W D1, D2 
00001BC8                          1366  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BC8  C43C 003F               1367      AND.B #OR_REG_M, D2 
00001BCC  3F02                    1368      MOVE.W D2, -(SP)
00001BCE  3F06                    1369      MOVE.W D6, -(SP)
00001BD0  4EB8 1252               1370      JSR PRINT_REGISTER
00001BD4  588F                    1371      ADDQ.L #4, SP 
00001BD6  4EB8 10D2               1372      JSR PRINT_COMMA 
00001BDA                          1373  * MASKING TO GET THE DATA REGISTER 
00001BDA  3238 7006               1374      MOVE.W (OPCODE_ADDRESS), D1 
00001BDE  3401                    1375      MOVE.W D1, D2 
00001BE0  C47C 0E00               1376      AND.W #OR_DREG_M, D2 
00001BE4  E04A                    1377      LSR.W #8, D2 
00001BE6  E24A                    1378      LSR.W #1, D2 
00001BE8                          1379      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BE8  843C 0000               1380      OR.B #%00000000, D2 
00001BEC  3F02                    1381      MOVE.W D2, -(SP)
00001BEE  3F3C 0000               1382      MOVE.W #$0, -(SP)
00001BF2  4EB8 1252               1383      JSR PRINT_REGISTER
00001BF6  588F                    1384      ADDQ.L #4, SP 
00001BF8  6000 F44E               1385      BRA FINISH_OPCODE
00001BFC                          1386  OR_END:
00001BFC  4E75                    1387      RTS
00001BFE                          1388  
00001BFE                          1389  ORI:
00001BFE                          1390  * CONSTANT FOR ORI OPCODE
00001BFE  =00000000               1391  ORI_OPCODE EQU %0000000000000000
00001BFE  =00000000               1392  ORI_M      EQU %0000000000000000
00001BFE  =0000003F               1393  ORI_REG_M  EQU %0000000000111111
00001BFE  =000000C0               1394  ORI_SIZE_M EQU %0000000011000000
00001BFE  3401                    1395      MOVE.W D1, D2
00001C00                          1396  * MASKING WITH ORI UNIQUE CODE
00001C00  C47C 0000               1397      AND.W #ORI_M, D2
00001C04  B47C 0000               1398      CMP.W #ORI_OPCODE, D2
00001C08  6600 0072               1399      BNE ORI_END
00001C0C                          1400  
00001C0C                          1401  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C0C  3401                    1402      MOVE.W D1, D2 
00001C0E  C43C 003F               1403      AND.B #ORI_REG_M, D2 
00001C12  3F02                    1404      MOVE.W D2, -(SP)
00001C14  4EB8 11AC               1405      JSR CHECK_SUPPORT_REGISTER
00001C18  544F                    1406      ADDQ #2, SP 
00001C1A                          1407  * from print_register to see if it is unsupported register 
00001C1A  3439 00009000           1408      MOVE.W (RETURN_ADDRESS), D2 
00001C20  0C42 0002               1409      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C24  6700 F422               1410      BEQ FINISH_OPCODE
00001C28                          1411  
00001C28  4EB9 00001CCC           1412      JSR PRINT_ORI
00001C2E  3238 7006               1413      MOVE.W (OPCODE_ADDRESS), D1
00001C32  3401                    1414      MOVE.W D1, D2
00001C34                          1415  * MASKING TO GET SIZE OF ORI
00001C34  C47C 00C0               1416      AND.W #ORI_SIZE_M, D2 
00001C38  EC42                    1417      ASR.W #6, D2
00001C3A  1C02                    1418      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C3C  1F06                    1419      MOVE.B D6, -(SP)
00001C3E  4EB8 113A               1420      JSR PRINT_DATA
00001C42  548F                    1421      ADDQ.L #$02, SP
00001C44  4EB8 10B4               1422      JSR PRINT_TAB
00001C48                          1423   
00001C48  3238 7006               1424      MOVE.W (OPCODE_ADDRESS), D1     
00001C4C  3401                    1425      MOVE.W D1, D2
00001C4E                          1426      *------------------------------------
00001C4E  C47C 003F               1427      AND.W #ORI_REG_M, D2 
00001C52  E08A                    1428      LSR.L #8, D2 
00001C54  E28A                    1429      LSR.L #1, D2 
00001C56  843C 0000               1430      OR.B #%00000000, D2
00001C5A  3F02                    1431      MOVE.W D2, -(SP)
00001C5C  3F3C 0000               1432      MOVE.W #$0, -(SP)
00001C60  4EB8 1252               1433      JSR PRINT_REGISTER 
00001C64  5882                    1434      ADDQ.L #4, D2 
00001C66  4EB8 10D2               1435      JSR PRINT_COMMA 
00001C6A                          1436      
00001C6A  C43C 003F               1437      AND.B #ORI_REG_M, D2 
00001C6E  3F02                    1438      MOVE.W D2, -(SP)
00001C70  3F06                    1439      MOVE.W D6, -(SP)
00001C72  4EB8 1252               1440      JSR PRINT_REGISTER
00001C76  588F                    1441      ADDQ.L #4, SP 
00001C78                          1442  
00001C78                          1443      *------------------------------------
00001C78  6000 F3CE               1444      BRA FINISH_OPCODE
00001C7C                          1445  ORI_END:
00001C7C  4E75                    1446      RTS
00001C7E                          1447  
00001C7E                          1448  * ROR:
00001C7E                          1449  * * CONSTANT FOR ROR OPCODE
00001C7E                          1450  * ROR_OPCODE EQU %
00001C7E                          1451  * ROR_M      EQU %
00001C7E                          1452  * ROR_SIZE_M EQU %
00001C7E                          1453  *     CLR.W D2
00001C7E                          1454  *     MOVE.W D1, D2
00001C7E                          1455  * * MASKING WITH ROR UNIQUE CODE
00001C7E                          1456  *     AND.W #ROR_M, D2
00001C7E                          1457  *     CMP.W #ROR_OPCODE, D2
00001C7E                          1458  *     BNE ROR_END
00001C7E                          1459  *     JSR PRINT_ROR
00001C7E                          1460  *     MOVE.W D1, D2
00001C7E                          1461  *     MOVE.W D1, D3
00001C7E                          1462  * * MASKING TO GET SIZE OF ROR
00001C7E                          1463  *     CMP.W #ROR_SIZE_M, D2 
00001C7E                          1464  * ROR_END:
00001C7E                          1465  *     RTS
00001C7E                          1466  
00001C7E                          1467  * ROL:
00001C7E                          1468  * * CONSTANT FROR ROL OPCODE
00001C7E                          1469  * ROL_OPCODE EQU %
00001C7E                          1470  * ROL_M      EQU %
00001C7E                          1471  * ROL_SIZE_M EQU %
00001C7E                          1472  *     CLR.W D2
00001C7E                          1473  *     MOVE.W D1, D2
00001C7E                          1474  * * MASKING WITH ROL UNIQUE CODE
00001C7E                          1475  *     AND.W #ROL_M, D2
00001C7E                          1476  *     CMP.W #ROL_OPCODE, D2
00001C7E                          1477  *     BNE ROL_END
00001C7E                          1478  *     JSR PRINT_ROL
00001C7E                          1479  *     MOVE.W D1, D2
00001C7E                          1480  *     MOVE.W D1, D3
00001C7E                          1481  * * MASKING TO GET SIZE OF ROL
00001C7E                          1482  *     CMP.W #ROL_SIZE_M, D2 
00001C7E                          1483  * ROL_END:
00001C7E                          1484  *     RTS
00001C7E                          1485  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001C7E                          1486  
00001C7E                          1487  
00001C7E                          1488  PRINT_RTS:
00001C7E  43F9 00001D60           1489      LEA P_RTS, A1
00001C84  103C 000E               1490      MOVE.B #14, D0
00001C88  4E4F                    1491      TRAP #15
00001C8A  4EB8 10B4               1492      JSR PRINT_TAB
00001C8E  6000 F3B8               1493      BRA FINISH_OPCODE
00001C92                          1494  PRINT_NEG:
00001C92  43F9 00001DA0           1495      LEA P_NEG, A1
00001C98  103C 000E               1496      MOVE.B #14, D0
00001C9C  4E4F                    1497      TRAP #15
00001C9E  4E75                    1498      RTS 
00001CA0                          1499  PRINT_BRA:
00001CA0  43F9 00001DDE           1500      LEA P_BRA, A1
00001CA6  103C 000E               1501      MOVE.B #14, D0
00001CAA  4E4F                    1502      TRAP #15
00001CAC  4E75                    1503      RTS 
00001CAE                          1504  PRINT_NOP:
00001CAE  43F9 00001D64           1505      LEA P_NOP, A1
00001CB4  103C 000E               1506      MOVE.B #14, D0
00001CB8  4E4F                    1507      TRAP #15
00001CBA  6000 F38C               1508      BRA FINISH_OPCODE
00001CBE                          1509  PRINT_OR:
00001CBE  43F9 00001D99           1510      LEA P_OR, A1
00001CC4  103C 000E               1511      MOVE.B #14, D0
00001CC8  4E4F                    1512      TRAP #15
00001CCA  4E75                    1513      RTS 
00001CCC                          1514  PRINT_ORI:
00001CCC  43F9 00001D9C           1515      LEA P_ORI, A1
00001CD2  103C 000E               1516      MOVE.B #14, D0
00001CD6  4E4F                    1517      TRAP #15
00001CD8  4E75                    1518      RTS
00001CDA                          1519  PRINT_ROL:
00001CDA  43F9 00001DB8           1520      LEA P_ROL, A1
00001CE0  103C 000E               1521      MOVE.B #14, D0
00001CE4  4E4F                    1522      TRAP #15
00001CE6  4E75                    1523      RTS 
00001CE8                          1524  PRINT_ROR:
00001CE8  43F9 00001DBC           1525      LEA P_ROR, A1
00001CEE  103C 000E               1526      MOVE.B #14, D0
00001CF2  4E4F                    1527      TRAP #15
00001CF4  4E75                    1528      RTS 
00001CF6                          1529  PRINT_JSR:
00001CF6  43F9 00001DE2           1530      LEA P_JSR, A1
00001CFC  103C 000E               1531      MOVE.B #14, D0
00001D00  4E4F                    1532      TRAP #15
00001D02  4EB8 10B4               1533      JSR PRINT_TAB
00001D06  4E75                    1534      RTS 
00001D08                          1535  PRINT_LEA:
00001D08  43F9 00001D95           1536      LEA P_LEA, A1
00001D0E  103C 000E               1537      MOVE.B #14, D0
00001D12  4E4F                    1538      TRAP #15
00001D14  4EB8 10B4               1539      JSR PRINT_TAB
00001D18  4E75                    1540      RTS 
00001D1A                          1541  PRINT_ADDA: 
00001D1A  43F9 00001D7D           1542      LEA P_ADDA, A1 
00001D20  103C 000E               1543      MOVE.B #14, D0
00001D24  4E4F                    1544      TRAP #15 
00001D26  4E75                    1545      RTS
00001D28                          1546  PRINT_ADD:
00001D28  43F9 00001D79           1547      LEA P_ADD, A1 
00001D2E  103C 000E               1548      MOVE.B #14, D0 
00001D32  4E4F                    1549      TRAP #15
00001D34  4E75                    1550      RTS
00001D36                          1551  PRINT_MOVEA: 
00001D36  43F9 00001D6D           1552      LEA P_MOVEA, A1 
00001D3C  103C 000E               1553      MOVE.B #14, D0 
00001D40  4E4F                    1554      TRAP #15 
00001D42  4E75                    1555      RTS 
00001D44                          1556  PRINT_MOVE: 
00001D44  43F9 00001D68           1557      LEA P_MOVE, A1 
00001D4A  103C 000E               1558      MOVE.B #14, D0 
00001D4E  4E4F                    1559      TRAP #15 
00001D50  4E75                    1560      RTS 
00001D52                          1561  PRINT_UNSUPPORTED: 
00001D52  43F9 00001DE6           1562      LEA P_DATA, A1 
00001D58  103C 000E               1563      MOVE.B #14, D0 
00001D5C  4E4F                    1564      TRAP #15 
00001D5E  4E75                    1565      RTS 
00001D60                          1566  
00001D60                          1567  
00001D60                          1568  
00001D60                          1569  
00001D60                          1570  
00001D60                          1571  
00001D60                          1572  
00001D60                          1573  
00001D60                          1574  
00001D60= 52 54 53 00             1575  P_RTS DC.B 'RTS',0        *-----------------DONE-----------------*
00001D64= 4E 4F 50 00             1576  P_NOP DC.B 'NOP',0        *-----------------DONE-----------------*
00001D68= 4D 4F 56 45 00          1577  P_MOVE DC.B 'MOVE',0
00001D6D= 4D 4F 56 45 41 00       1578  P_MOVEA DC.B 'MOVEA', 0
00001D73= 4D 4F 56 45 4D 00       1579  P_MOVEM DC.B 'MOVEM', 0
00001D79= 41 44 44 00             1580  P_ADD DC.B 'ADD', 0        *-----------------DONE-----------------*
00001D7D= 41 44 44 41 00          1581  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
00001D82= 53 55 42 00             1582  P_SUB DC.B 'SUB', 0
00001D86= 53 55 42 51 00          1583  P_SUBQ DC.B 'SUBQ',0
00001D8B= 4D 55 4C 53 00          1584  P_MULS DC.B 'MULS',0
00001D90= 44 49 56 53 00          1585  P_DIVS DC.B 'DIVS',0
00001D95= 4C 45 41 00             1586  P_LEA DC.B 'LEA',0        *-----------------DONE-----------------*
00001D99= 4F 52 00                1587  P_OR DC.B 'OR',0
00001D9C= 4F 52 49 00             1588  P_ORI DC.B 'ORI', 0
00001DA0= 4E 45 47 00             1589  P_NEG DC.B 'NEG', 0        *-----------------DONE-----------------*
00001DA4= 45 4F 52 00             1590  P_EOR DC.B 'EOR', 0
00001DA8= 4C 53 52 00             1591  P_LSR DC.B 'LSR',0
00001DAC= 4C 53 4C 00             1592  P_LSL DC.B 'LSL', 0
00001DB0= 41 53 52 00             1593  P_ASR DC.B 'ASR', 0
00001DB4= 41 53 4C 00             1594  P_ASL DC.B 'ASL',0 
00001DB8= 52 4F 4C 00             1595  P_ROL DC.B 'ROL', 0
00001DBC= 52 4F 52 00             1596  P_ROR DC.B 'ROR', 0
00001DC0= 42 43 4C 52 00          1597  P_BCLR DC.B 'BCLR',0
00001DC5= 43 4D 50 00             1598  P_CMP DC.B 'CMP', 0
00001DC9= 43 4D 50 49 00          1599  P_CMPI DC.B 'CMPI', 0
00001DCE= 42 43 53 00             1600  P_BCS DC.B 'BCS', 0
00001DD2= 42 47 45 00             1601  P_BGE DC.B 'BGE', 0
00001DD6= 42 4C 54 00             1602  P_BLT DC.B 'BLT',0
00001DDA= 42 56 43 00             1603  P_BVC DC.B 'BVC', 0
00001DDE= 42 52 41 00             1604  P_BRA DC.B 'BRA',0
00001DE2= 4A 53 52 00             1605  P_JSR DC.B 'JSR',0        *-----------------DONE-----------------*
00001DE6= 44 41 54 41 00          1606  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
00001DEB                          1607  
00001DEB                          1608  
00001DEB  =00000004               1609  WORD_LENGTH EQU $04
00001DEB  =00000008               1610  LONG_LENGTH EQU $08
00001DEB= 31 30 30 32 30 30 ...   1611  TEST_VAL DC.B '10020009'
00001DF3  =0000000A               1612  LF EQU $0A
00001DF3  =0000000D               1613  CR EQU $0D
00001DF3  =00000009               1614  HT  EQU  $09 
00001DF3= 20 0D 0A 00             1615  NEW_LINE DC.B ' ',CR,LF,0
00001DF7                          1616  SIMHALT             ; halt simulator
00001DF7                          1617  * Put variables and constants here
00001DF7                          1618  
00001DF7                          1619  
00001DF7                          1620  
00001DF7                          1621  
00001DF7                          1622  
00001DF7                          1623  
00001DF7= 50 6C 65 61 73 65 ...   1624  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001E26= 50 6C 65 61 73 65 ...   1625  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
00001E53= 50 72 65 73 73 20 ...   1626  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00001E6D                          1627      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1842
ADDA                17BE
ADDA_AN_MASKING     E00
ADDA_END            1840
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             1912
ADD_FROM_D          189E
ADD_TO_D            18D8
ASCII_TO_HEX        15D0
ASCII_TO_HEX_CHECK_GT_0  15FC
ASCII_TO_HEX_CHECK_GT_A  1610
ASCII_TO_HEX_CHECK_LT_9  1604
ASCII_TO_HEX_CHECK_LT_F  161C
ASCII_TO_HEX_CONVERT_LETTER  1642
ASCII_TO_HEX_CONVERT_NUMBER  1628
ASCII_TO_HEX_END_LOOP  165C
ASCII_TO_HEX_FAILED_0  1662
ASCII_TO_HEX_FAILED_2  1668
ASCII_TO_HEX_LOOP   15F0
ASCII_TO_HEX_RETURN_OK  1
BRA                 1AF2
BRA_DISP_M          FF
BRA_END             1B2E
BRA_M               6000
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  15A2
CHECK_VALUE_IS_ODD_FAILED  15CA
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  129A
CONTINUE_PRINT_RE_NUMBER  12B6
CONVERT_OPMODE_SIZE_B  1974
CONVERT_OPMODE_SIZE_W  197A
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_PRINT_NUMBER   12D4
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C8
END_FETCH_OPCODES   168C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1594
END_JUMP_TABLE      16EC
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       153C
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12FE
END_PRINT_TAB       10CA
FETCH_OPCODES       167A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  152A
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1556
HEX_MASKING         F
HEX_TO_ASCII        153E
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  158A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   155E
HEX_TO_ASCII_NUMBER  1580
HEX_TO_ASCII_ROR    159E
HEX_TO_ASCII_SWAP   159A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  166E
JSR                 1704
JSR_END             174E
JSR_OPCODE          4E80
JUMP_TABLE          168E
LEA                 1750
LEA_END             17BC
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVE                19CA
MOVEA               1914
MOVEA_DONE_CONVERT  1980
MOVEA_END           19C8
MOVEA_REGISTER_OK   1934
MOVEM               1A8E
MOVE_DONE_CONVERT   1A64
MOVE_END            19E8
MOVE_MATCH_PATTERN  19EA
MOVE_OPMODE_BYTE    1A58
MOVE_OPMODE_WORD    1A5E
NEG                 1A8E
NEG_END             1AF0
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1DF3
NOP                 16F0
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B30
ORI                 1BFE
ORI_END             1C7C
ORI_M               0
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1BFC
OR_M                8000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BC2
OR_TO_EA            1B88
OUTPUT_ADDRESS      7010
PRINT_A             150C
PRINT_AB_LONG       1428
PRINT_AB_SHORT      13C6
PRINT_ADD           1D28
PRINT_ADDA          1D1A
PRINT_BRA           1CA0
PRINT_BYTE          1164
PRINT_CLOSE         14BE
PRINT_CLOSE_PLUS    14D8
PRINT_COMMA         10D2
PRINT_D             14F2
PRINT_DATA          113A
PRINT_DOLLAR_SIGN   10EA
PRINT_HASH_SIGN     1102
PRINT_HEX           1526
PRINT_IMMEDIATE     1300
PRINT_IMMEDIATE_BYTE  133C
PRINT_IMMEDIATE_LONG  1392
PRINT_IMMEDIATE_WORD  1366
PRINT_JSR           1CF6
PRINT_LEA           1D08
PRINT_LONG          117C
PRINT_MINUS_OPEN    14A4
PRINT_MOVE          1D44
PRINT_MOVEA         1D36
PRINT_NEG           1C92
PRINT_NEW_LINE      111A
PRINT_NOP           1CAE
PRINT_OPEN          148A
PRINT_OR            1CBE
PRINT_ORI           1CCC
PRINT_PC            1188
PRINT_REGISTER      1252
PRINT_ROL           1CDA
PRINT_ROR           1CE8
PRINT_RTS           1C7E
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1D52
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  1E53
PROMT_INPUT_END     1E26
PROMT_INPUT_START   1DF7
P_ADD               1D79
P_ADDA              1D7D
P_ASL               1DB4
P_ASR               1DB0
P_BCLR              1DC0
P_BCS               1DCE
P_BGE               1DD2
P_BLT               1DD6
P_BRA               1DDE
P_BVC               1DDA
P_CMP               1DC5
P_CMPI              1DC9
P_DATA              1DE6
P_DIVS              1D90
P_EOR               1DA4
P_JSR               1DE2
P_LEA               1D95
P_LSL               1DAC
P_LSR               1DA8
P_MOVE              1D68
P_MOVEA             1D6D
P_MOVEM             1D73
P_MULS              1D8B
P_NEG               1DA0
P_NOP               1D64
P_OR                1D99
P_ORI               1D9C
P_ROL               1DB8
P_ROR               1DBC
P_RTS               1D60
P_SUB               1D82
P_SUBQ              1D86
RETURN_ADDRESS      9000
RTS                 16FA
SIMHALT             1DF7
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
TEST_VAL            1DEB
UNSUPPORT_OPCODE    11E6
UNSUPPORT_REGISTER  121A
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
