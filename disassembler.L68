00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 8:13:05 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                  9  OUTPUT_ADDRESS EQU $7010
00001000                            10  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 11  RETURN_ADDRESS EQU $9000
00001000                            12  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 13  START_ADDRESS EQU $09100
00001000                            14  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 15  END_ADDRESS EQU $7004
00001000                            16  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 17  OPCODE_ADDRESS EQU $7006
00001000                            18  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            19  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            20  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            21  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 22  OFFSET_OPC_ADDRES EQU $7008 
00001000                            23  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 24  SIZE_OPCODE EQU $700A
00001000                            25  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 26  STORE_REGISTER_ADDRESS EQU $700C
00001000                            27  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 28  STACK_ADDRESS EQU $8000
00001000                            29  START:                  ; first instruction of program
00001000                            30      * MOVE.L #$10AF241B, -(SP)
00001000                            31      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            32      * JSR PRINT_HEX
00001000                            33      * ADDQ.L #$08, SP
00001000                            34  
00001000                            35      * JSR PRINT_NEW_LINE
00001000                            36  
00001000                            37      * JSR PRINT_TAB
00001000                            38      * A0
00001000                            39  *     MOVE.L #%0000011100000100, D1
00001000                            40  *     MOVE.L D1, -(SP)
00001000                            41  *     JSR PRINT_REGISTER
00001000                            42  *     ADDQ.L #4, SP
00001000                            43  *     * A1
00001000                            44  *     MOVE.W #%0100, D1
00001000                            45  *     SWAP D1
00001000                            46  *     MOVE.W #$1, D1
00001000                            47  *     MOVE.L D1, -(SP)
00001000                            48  *     JSR PRINT_REGISTER
00001000                            49  *     ADDQ.L #4, SP
00001000                            50  * * A2
00001000                            51  *     MOVE.W #%0011, D1
00001000                            52  *     SWAP D1
00001000                            53  *     MOVE.W #$2, D1
00001000                            54  *     MOVE.L D1, -(SP)
00001000                            55  *     JSR PRINT_REGISTER
00001000                            56  *     ADDQ.L #4, SP
00001000                            57  * * A3
00001000                            58  *     MOVE.W #%0011, D1
00001000                            59  *     SWAP D1
00001000                            60  *     MOVE.W #$3, D1
00001000                            61  *     MOVE.L D1, -(SP)
00001000                            62  *     JSR PRINT_REGISTER
00001000                            63  *     ADDQ.L #4, SP
00001000                            64  * * A4
00001000                            65  *     MOVE.W #%0011, D1
00001000                            66  *     SWAP D1
00001000                            67  *     MOVE.W #$4, D1
00001000                            68  *     MOVE.L D1, -(SP)
00001000                            69  *     JSR PRINT_REGISTER
00001000                            70  *     ADDQ.L #4, SP
00001000                            71  * * A5
00001000                            72  *     MOVE.W #%0011, D1
00001000                            73  *     SWAP D1
00001000                            74  *     MOVE.W #$5, D1
00001000                            75  *     MOVE.L D1, -(SP)
00001000                            76  *     JSR PRINT_REGISTER
00001000                            77  *     ADDQ.L #4, SP
00001000                            78  * * A6
00001000                            79  *     MOVE.W #%0011, D1
00001000                            80  *     SWAP D1
00001000                            81  *     MOVE.W #$6, D1
00001000                            82  *     MOVE.L D1, -(SP)
00001000                            83  *     JSR PRINT_REGISTER
00001000                            84  *     ADDQ.L #4, SP
00001000                            85  * * A7
00001000                            86  *     MOVE.W #%0011, D1
00001000                            87  *     SWAP D1
00001000                            88  *     MOVE.W #$7, D1
00001000                            89  *     MOVE.L D1, -(SP)
00001000                            90  *     JSR PRINT_REGISTER
00001000                            91  *     ADDQ.L #4, SP
00001000                            92  
00001000                            93      * JSR PRINT_COMMA
00001000                            94      * JSR PRINT_DOLLAR_SIGN
00001000                            95      * JSR PRINT_HASH_SIGN
00001000                            96      * MOVE.B #$01, -(SP)
00001000                            97      * JSR PRINT_DATA
00001000                            98      * ADDQ.L #$2,SP
00001000                            99      * MOVE.B #$02, -(SP)
00001000                           100      * JSR PRINT_DATA
00001000                           101      * ADDQ.L #$2, SP
00001000                           102      * MOVE.B #$03, -(SP)
00001000                           103      * JSR PRINT_DATA
00001000                           104      * ADDQ.L #$2,SP
00001000                           105   
00001000  4207                     106      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            107      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            108      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            109      MOVE.L #$010000, (A0)
00001014                           110  LOOP_START:
00001014  2E7C 00008000            111      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            112      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            113      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000163A            114      JSR FETCH_OPCODES
0000102C  508F                     115      ADDQ.L #8, SP
0000102E  4EB9 000010B4            116      JSR PRINT_TAB
00001034  4EB9 00001188            117      JSR PRINT_PC
0000103A  207C 00007006            118      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     119      MOVE.W (A0), -(SP)
00001042  4EB9 0000164E            120      JSR JUMP_TABLE
00001048                           121  FINISH_OPCODE:
00001048  4280                     122      CLR.L D0
0000104A  23FC 00000000 00009000   123      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                124      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            125      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            126      JSR PRINT_NEW_LINE
00001064  5207                     127      ADDQ.B #1, D7 
00001066  0C07 001D                128      CMPI.B #29, D7 
0000106A  6700 0004                129      BEQ CLR_SCREEN
0000106E  60A4                     130      BRA LOOP_START
00001070                           131  
00001070                           132  CLR_SCREEN:
00001070  43F9 00001C4F            133      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                134      MOVE.B #13, D0 
0000107A  4E4F                     135      TRAP #15 
0000107C  4207                     136      CLR.B D7
0000107E  103C 0005                137      MOVE.B #5, D0 
00001082  4E4F                     138      TRAP #15 
00001084  0C01 000D                139      CMPI.B #$0D, D1 
00001088  678A                     140      BEQ LOOP_START
0000108A  6000 0002                141      BRA END_MAIN
0000108E                           142  
0000108E                           143  * Put program code here
0000108E                           144  MAIN:
0000108E                           145  
0000108E                           146  END_MAIN:
0000108E  103C 0009                147      MOVE.B #9, D0
00001092  4E4F                     148      TRAP #15
00001094  103C 000E                149      MOVE.B #14,D0
00001098  4E4F                     150      TRAP #15
0000109A                           151  * get user input 
0000109A                           152  GET_INPUT:
0000109A  43F9 00001BF3            153      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                154      MOVE.B #13, D0
000010A4  4E4F                     155      TRAP #15
000010A6  227C 00002000            156      MOVEA.L #$2000,A1
000010AC  103C 0002                157      MOVE.B #2, D0
000010B0  4E4F                     158      TRAP #15
000010B2                           159  END_GET_INPUT:
000010B2  4E75                     160      RTS   
000010B4                           161  
000010B4                           162  *--------------------------------------------------------------------
000010B4                           163  * PRINT_TAB 
000010B4                           164  PRINT_TAB: 
000010B4  227C 00007010            165      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            166      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                167      MOVE.B #0, (A1)+
000010C4  227C 00007010            168      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           169  END_PRINT_TAB:
000010CA  103C 000E                170      MOVE.B #14, D0
000010CE  4E4F                     171      TRAP #15
000010D0  4E75                     172      RTS
000010D2                           173  *--------------------------------------------------------------------
000010D2                           174  * PRINT_COMMA
000010D2                           175  PRINT_COMMA:
000010D2  227C 00007010            176      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                177      MOVE.W #', ', (A1)+
000010DC  12BC 0000                178      MOVE.B #0, (A1)
000010E0  5589                     179      SUBQ.L #2, A1
000010E2                           180  END_PRINT_COMMA:
000010E2  103C 000E                181      MOVE.B #14, D0
000010E6  4E4F                     182      TRAP #15
000010E8  4E75                     183      RTS
000010EA                           184  *--------------------------------------------------------------------
000010EA                           185  * PRINT_DOLLAR_SIGN
000010EA                           186  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            187      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                188      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           189      MOVE.B #0, 1(A1) 
000010FA                           190  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                191      MOVE.B #14, D0
000010FE  4E4F                     192      TRAP #15
00001100  4E75                     193      RTS
00001102                           194  *--------------------------------------------------------------------
00001102                           195  * PRINT_HASH_SIGN
00001102                           196  PRINT_HASH_SIGN:
00001102  227C 00007010            197      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                198      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           199      MOVE.B #0, 1(A1) 
00001112                           200  END_PRINT_HASH_SIGN:
00001112  103C 000E                201      MOVE.B #14, D0
00001116  4E4F                     202      TRAP #15
00001118  4E75                     203      RTS
0000111A                           204  
0000111A                           205  *--------------------------------------------------------------------
0000111A                           206  * PRINT A NEW LINE 
0000111A                           207  PRINT_NEW_LINE: 
0000111A  227C 00007010            208      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                209      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                210      MOVE.B #LF, (A1)+
00001128  12FC 0000                211      MOVE.B #0, (A1)+
0000112C                           212  END_PRINT_NEW_LINE:
0000112C  227C 00007010            213      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                214      MOVE.B #14, D0
00001136  4E4F                     215      TRAP #15 
00001138  4E75                     216      RTS
0000113A                           217  
0000113A                           218  
0000113A                           219  
0000113A                           220  
0000113A                           221  *--------------------------------------------------------------------
0000113A                           222  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           223  * PARAMETERS: 
0000113A                           224   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           225  *       00 - byte
0000113A                           226  *       01 - word
0000113A                           227  *       10 - long
0000113A                           228  * NOTE:
0000113A                           229  *   A1 USE FOR PRINT
0000113A                           230  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           231  PRINT_DATA:
0000113A  227C 00007010            232      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                233      MOVE.B 4(SP), D1
00001144  0C01 0000                234      CMPI.B #$00, D1
00001148  6700 001A                235      BEQ PRINT_BYTE
0000114C  0C01 0001                236      CMPI.B #$01, D1
00001150  6700 001E                237      BEQ PRINT_WORD
00001154  0C01 0002                238      CMPI.B #$02, D1 
00001158  6700 0022                239      BEQ PRINT_LONG
0000115C                           240  END_PRINT_DATA:
0000115C  103C 000E                241      MOVE.B #14, D0
00001160  4E4F                     242      TRAP #15
00001162  4E75                     243      RTS 
00001164                           244  
00001164                           245  PRINT_BYTE: 
00001164  32BC 2E42                246      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           247      MOVE.B #0, 2(A1)
0000116E  60EC                     248      BRA END_PRINT_DATA
00001170                           249  PRINT_WORD: 
00001170  32BC 2E57                250      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           251      MOVE.B #0, 2(A1)
0000117A  60E0                     252      BRA END_PRINT_DATA
0000117C                           253  PRINT_LONG: 
0000117C  32BC 2E4C                254      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           255      MOVE.B #0, 2(A1)
00001186  60D4                     256      BRA END_PRINT_DATA
00001188                           257  *--------------------------------------------------------------------
00001188                           258  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           259  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           260  * PARAMETERS:
00001188                           261  *   NONE
00001188                           262  * NOTES: 
00001188                           263  * A1 USE TO PRINT 
00001188                           264  * D0 FOR TRAP AND CONVERSION 
00001188                           265  PRINT_PC:
00001188  2039 00009100            266      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     267      MOVE.L D0, -(SP)
00001190  2F3C 00000008            268      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 000014E6            269      JSR PRINT_HEX 
0000119C  508F                     270      ADDQ.L #8, SP 
0000119E  4EB8 10B4                271      JSR PRINT_TAB
000011A2  4EB8 10B4                272      JSR PRINT_TAB 
000011A6  4EB8 10B4                273      JSR PRINT_TAB
000011AA  4E75                     274      RTS 
000011AC                           275  
000011AC                           276  CHECK_SUPPORT_REGISTER:
000011AC  322F 0004                277      MOVE.W 4(SP), D1 
000011B0  3801                     278      MOVE.W D1,D4 
000011B2                           279     ; check to make sure we dont support the register 
000011B2  =00000028                280  DISPLACEMENT_REGISTER EQU %00101000
000011B2  =00000030                281  ADDRESS_WITH_INDEX EQU %00110000
000011B2  =0000003B                282  COUNTER_INDEX EQU %00111011 
000011B2  =0000003A                283  COUNTER_DISPLACEMENT EQU %00111010
000011B2  C83C 0038                284      AND.B #%00111000, D4 
000011B6  0C04 0028                285      CMPI.B #DISPLACEMENT_REGISTER, D4
000011BA  6700 0022                286      BEQ UNSUPPORT_REGISTER
000011BE  0C04 0030                287      CMPI.B #ADDRESS_WITH_INDEX, D4
000011C2  6700 001A                288      BEQ UNSUPPORT_REGISTER 
000011C6  3801                     289      MOVE D1, D4
000011C8  C83C 003F                290      AND.B #%00111111,D4
000011CC  0C04 003B                291      CMPI.B #COUNTER_INDEX, D4
000011D0  6700 000C                292      BEQ UNSUPPORT_REGISTER 
000011D4  0C04 003A                293      CMPI.B #COUNTER_DISPLACEMENT, D4
000011D8  6700 0004                294      BEQ UNSUPPORT_REGISTER
000011DC  4E75                     295      RTS
000011DE                           296  UNSUPPORT_REGISTER:
000011DE  =00000002                297  C_UNSUPPORT_REGISTER EQU $2
000011DE  267C 00009000            298      MOVE.L #RETURN_ADDRESS, A3
000011E4  4EB9 00001B4E            299      JSR PRINT_UNSUPPORTED
000011EA  4EB8 10B4                300      JSR PRINT_TAB 
000011EE  4EB8 1102                301      JSR PRINT_HASH_SIGN 
000011F2  4EB8 10EA                302      JSR PRINT_DOLLAR_SIGN 
000011F6  4281                     303      CLR.L D1 
000011F8  3238 7006                304      MOVE.W (OPCODE_ADDRESS), D1 
000011FC  2F01                     305      MOVE.L D1, -(SP) 
000011FE  2F3C 00000004            306      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001204  4EB9 000014E6            307      JSR PRINT_HEX 
0000120A  508F                     308      ADDQ.L #8, SP 
0000120C  36BC 0002                309      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001210  4E75                     310      RTS 
00001212                           311  
00001212                           312  
00001212                           313  *--------------------------------------------------------------------
00001212                           314  * PRINT_REGISTER
00001212                           315  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001212                           316  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001212                           317  * 2 - (4(sp)) byte value for how many byte for immediate value
00001212                           318  *      0 for a byte value
00001212                           319  *      1 for word value
00001212                           320  *      2 for long value 
00001212                           321  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001212                           322  * NOTE: 
00001212                           323  *   D1 FOR STORE THE PARAMETER
00001212                           324  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001212                           325  PRINT_REGISTER:
00001212  322F 0006                326     MOVE.W 6(SP), D1 
00001216                           327     
00001216  3401                     328     MOVE.W D1,D2
00001218  0C01 003C                329     CMPI.B #%00111100, D1
0000121C  6700 00A2                330     BEQ PRINT_IMMEDIATE
00001220  0C01 0038                331     CMPI.B #%00111000, D1
00001224  6700 0160                332     BEQ PRINT_AB_SHORT
00001228  0C01 0039                333     CMPI.B #%00111001, D1
0000122C  6700 01BA                334     BEQ PRINT_AB_LONG 
00001230                           335  
00001230  1401                     336     MOVE.B D1,D2
00001232  C43C 0038                337     AND.B #%00111000, D2
00001236  0C02 0010                338     CMPI.B #%00010000, D2
0000123A  6700 020E                339     BEQ PRINT_OPEN
0000123E                           340  
0000123E  1401                     341     MOVE.B D1,D2
00001240  C43C 0038                342     AND.B #%00111000, D2
00001244  0C02 0018                343     CMPI.B #%00011000, D2
00001248  6700 0200                344     BEQ PRINT_OPEN
0000124C                           345  
0000124C  1401                     346     MOVE.B D1,D2
0000124E  C43C 0038                347     AND.B #%00111000, D2
00001252  0C02 0020                348     CMPI.B #%00100000, D2
00001256  6700 020C                349     BEQ PRINT_MINUS_OPEN
0000125A                           350  
0000125A                           351  CONTINUE_PRINT_REGISTER:
0000125A  1401                     352     MOVE.B D1,D2
0000125C  C43C 0038                353     AND.B #%00111000, D2
00001260  0C02 0000                354     CMPI.B #%00000000, D2
00001264  6700 024C                355     BEQ PRINT_D
00001268                           356  
00001268  1401                     357     MOVE.B D1,D2
0000126A  C43C 0038                358     AND.B #%00111000, D2
0000126E  0C02 0008                359     CMPI.B #%00001000, D2
00001272  6700 0258                360     BEQ PRINT_A 
00001276                           361  
00001276                           362  CONTINUE_PRINT_RE_NUMBER:
00001276  227C 00007010            363      MOVE.L #OUTPUT_ADDRESS, A1
0000127C  1401                     364      MOVE.B D1,D2
0000127E  C43C 0007                365      AND.B #%00000111, D2
00001282  0602 0030                366      ADD.B #48, D2 
00001286  1282                     367      MOVE.B D2, (A1) 
00001288  137C 0000 0001           368      MOVE.B #$0, 1(A1)
0000128E  103C 000E                369      MOVE.B #14, D0
00001292  4E4F                     370      TRAP #15
00001294                           371  DONE_PRINT_NUMBER:
00001294  1401                     372     MOVE.B D1,D2
00001296  C43C 0038                373     AND.B #%00111000, D2
0000129A  0C02 0010                374     CMPI.B #%00010000, D2
0000129E  6700 01DE                375     BEQ PRINT_CLOSE
000012A2                           376  
000012A2  1401                     377     MOVE.B D1,D2
000012A4  C43C 0038                378     AND.B #%00111000, D2
000012A8  0C02 0018                379     CMPI.B #%00011000, D2
000012AC  6700 01EA                380     BEQ PRINT_CLOSE_PLUS
000012B0                           381  
000012B0  1401                     382     MOVE.B D1,D2
000012B2  C43C 0038                383     AND.B #%00111000, D2
000012B6  0C02 0020                384     CMPI.B #%00100000, D2
000012BA  6700 01C2                385     BEQ PRINT_CLOSE
000012BE                           386  
000012BE                           387  END_PRINT_REGISTER:
000012BE  4E75                     388      RTS
000012C0                           389  
000012C0                           390  PRINT_IMMEDIATE:
000012C0  227C 00007010            391      MOVE.L #OUTPUT_ADDRESS, A1
000012C6  12BC 0023                392      MOVE.B #'#', (A1)
000012CA  137C 0000 0001           393      MOVE.B #$0, 1(A1)
000012D0  103C 000E                394      MOVE.B #14, D0
000012D4  4E4F                     395      TRAP #15
000012D6  4EB8 10EA                396      JSR PRINT_DOLLAR_SIGN
000012DA  3038 7008                397      MOVE.W (OFFSET_OPC_ADDRES),D0
000012DE  342F 0004                398      MOVE.W 4(SP), D2 ; HOW MANY BYTE
000012E2  0C42 0000                399      CMPI #$00, D2
000012E6  6700 0014                400      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
000012EA  0C42 0001                401      CMPI #$01, D2
000012EE  6700 0036                402      BEQ PRINT_IMMEDIATE_WORD
000012F2  0C42 0002                403      CMPI #$02, D2
000012F6  6700 005A                404      BEQ PRINT_IMMEDIATE_LONG
000012FA  60C2                     405      BRA END_PRINT_REGISTER
000012FC                           406  
000012FC                           407  PRINT_IMMEDIATE_BYTE:
000012FC  2479 00009100            408      MOVE.L (START_ADDRESS), A2
00001302  1432 0000                409      MOVE.B (A2, D0), D2 ; 
00001306  48E7 E0C0                410      MOVEM.L D0-D2/A0-A1, -(SP)
0000130A  2F02                     411      MOVE.L D2, -(SP)
0000130C  2F3C 00000002            412      MOVE.L #HEX_TO_ASCII_BYTE, -(SP) 
00001312  4EB9 000014E6            413      JSR PRINT_HEX
00001318  508F                     414       ADDQ.L #$08, SP
0000131A  4CDF 0307                415      MOVEM.L (SP)+, D0-D2/A0-A1
0000131E  5240                     416      ADDQ.W #$1, D0
00001320  31C0 7008                417      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001324  6098                     418      BRA END_PRINT_REGISTER
00001326                           419  PRINT_IMMEDIATE_WORD:
00001326  2479 00009100            420      MOVE.L (START_ADDRESS), A2
0000132C  3432 0000                421      MOVE.W (A2, D0), D2 ; 
00001330  48E7 E0C0                422      MOVEM.L D0-D2/A0-A1, -(SP)
00001334  2F02                     423      MOVE.L D2, -(SP)
00001336  2F3C 00000004            424      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000133C  4EB9 000014E6            425      JSR PRINT_HEX
00001342  508F                     426      ADDQ.L #$08, SP
00001344  4CDF 0307                427      MOVEM.L (SP)+, D0-D2/A0-A1
00001348  5440                     428      ADDQ.W #$2, D0
0000134A  31C0 7008                429      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000134E  6000 FF6E                430      BRA END_PRINT_REGISTER
00001352                           431  PRINT_IMMEDIATE_LONG:
00001352  3038 7008                432      MOVE.W (OFFSET_OPC_ADDRES),D0
00001356  2479 00009100            433      MOVE.L (START_ADDRESS), A2
0000135C  2432 0000                434      MOVE.L (A2, D0), D2 ; 
00001360  48E7 E0C0                435      MOVEM.L D0-D2/A0-A1, -(SP)
00001364  2F02                     436      MOVE.L D2, -(SP)
00001366                           437      ; offset to get immediate value from opcode
00001366  3038 7008                438      MOVE.W (OFFSET_OPC_ADDRES),D0
0000136A  2F3C 00000008            439      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001370  4EB9 000014E6            440      JSR PRINT_HEX
00001376  508F                     441      ADDQ.L #$08, SP
00001378  4CDF 0307                442      MOVEM.L (SP)+, D0-D2/A0-A1
0000137C  5840                     443      ADDQ.W #$4, D0
0000137E  31C0 7008                444      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001382  6000 FF3A                445      BRA END_PRINT_REGISTER
00001386                           446  PRINT_AB_SHORT:
00001386  227C 00007010            447      MOVE.L #OUTPUT_ADDRESS, A1
0000138C  32BC 2824                448      MOVE.W #'($', (A1)
00001390  137C 0000 0002           449      MOVE.B #0, 2(A1)
00001396  103C 000E                450      MOVE.B #14, D0
0000139A  4E4F                     451      TRAP #15
0000139C                           452      ; offset to get immediate value from opcode
0000139C  2479 00009100            453      MOVE.L (START_ADDRESS), A2
000013A2  3038 7008                454      MOVE.W (OFFSET_OPC_ADDRES),D0
000013A6  3432 0000                455      MOVE.W (A2, D0), D2 ; 
000013AA  48E7 E0C0                456      MOVEM.L D0-D2/A0-A1, -(SP)
000013AE  2F02                     457      MOVE.L D2, -(SP)
000013B0  2F3C 00000004            458      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013B6  4EB9 000014E6            459      JSR PRINT_HEX
000013BC  508F                     460      ADDQ.L #$08, SP
000013BE  4CDF 0307                461      MOVEM.L (SP)+, D0-D2/A0-A1
000013C2  5440                     462      ADDQ.W #$2, D0
000013C4  31C0 7008                463      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C8                           464      ; print close parathesis with W
000013C8  227C 00007010            465      MOVE.L #OUTPUT_ADDRESS, A1
000013CE  32BC 292E                466      MOVE.W #').', (A1)
000013D2  137C 0057 0002           467      MOVE.B #'W',2(A1)
000013D8  137C 0000 0003           468      MOVE.B #0, 3(A1)
000013DE  103C 000E                469      MOVE.B #14, D0
000013E2  4E4F                     470      TRAP #15
000013E4  6000 FED8                471      BRA END_PRINT_REGISTER
000013E8                           472  PRINT_AB_LONG:
000013E8                           473      ;print open parathesis
000013E8  227C 00007010            474      MOVE.L #OUTPUT_ADDRESS, A1
000013EE  32BC 2824                475      MOVE.W #'($', (A1)
000013F2  137C 0000 0002           476      MOVE.B #0, 2(A1)
000013F8  103C 000E                477      MOVE.B #14, D0
000013FC  4E4F                     478      TRAP #15
000013FE                           479      ; print value in long
000013FE  2479 00009100            480      MOVE.L (START_ADDRESS), A2
00001404                           481      ; offset to get value from opcode
00001404  3038 7008                482      MOVE.W (OFFSET_OPC_ADDRES),D0
00001408  2432 0000                483      MOVE.L (A2, D0), D2 ; 
0000140C  48E7 E0C0                484      MOVEM.L D0-D2/A0-A1, -(SP)
00001410  2F02                     485      MOVE.L D2, -(SP)
00001412  2F3C 00000008            486      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001418  4EB9 000014E6            487      JSR PRINT_HEX
0000141E  508F                     488      ADDQ.L #$08, SP
00001420  4CDF 0307                489      MOVEM.L (SP)+, D0-D2/A0-A1
00001424  5840                     490      ADDQ.W #$4, D0
00001426  31C0 7008                491      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000142A                           492      ; print close parathesis with W
0000142A  227C 00007010            493      MOVE.L #OUTPUT_ADDRESS, A1
00001430  32BC 292E                494      MOVE.W #').', (A1)
00001434  137C 004C 0002           495      MOVE.B #'L',2(A1)
0000143A  137C 0000 0003           496      MOVE.B #0, 3(A1)
00001440  103C 000E                497      MOVE.B #14, D0
00001444  4E4F                     498      TRAP #15
00001446  6000 FE76                499      BRA END_PRINT_REGISTER
0000144A                           500  
0000144A                           501  PRINT_OPEN:
0000144A  227C 00007010            502      MOVE.L #OUTPUT_ADDRESS, A1
00001450  12BC 0028                503      MOVE.B #'(', (A1)
00001454  137C 0000 0001           504      MOVE.B #$0, 1(A1)
0000145A  103C 000E                505      MOVE.B #14, D0
0000145E  4E4F                     506      TRAP #15
00001460  6000 006A                507      BRA PRINT_A
00001464                           508  PRINT_MINUS_OPEN: 
00001464  227C 00007010            509      MOVE.L #OUTPUT_ADDRESS, A1
0000146A  32BC 2D28                510      MOVE.W #'-(', (A1)
0000146E  137C 0000 0002           511      MOVE.B #$0, 2(A1)
00001474  103C 000E                512      MOVE.B #14, D0
00001478  4E4F                     513      TRAP #15
0000147A  6000 0050                514      BRA PRINT_A
0000147E                           515  
0000147E                           516  PRINT_CLOSE:
0000147E  227C 00007010            517      MOVE.L #OUTPUT_ADDRESS, A1
00001484  12BC 0029                518      MOVE.B #')', (A1)
00001488  137C 0000 0001           519      MOVE.B #$0, 1(A1)
0000148E  103C 000E                520      MOVE.B #14, D0
00001492  4E4F                     521      TRAP #15
00001494  6000 FE28                522      BRA END_PRINT_REGISTER
00001498                           523  PRINT_CLOSE_PLUS:
00001498  227C 00007010            524      MOVE.L #OUTPUT_ADDRESS, A1
0000149E  32BC 292B                525      MOVE.W #')+', (A1)
000014A2  137C 0000 0002           526      MOVE.B #$0, 2(A1)
000014A8  103C 000E                527      MOVE.B #14, D0
000014AC  4E4F                     528      TRAP #15
000014AE  6000 FE0E                529      BRA END_PRINT_REGISTER
000014B2                           530  PRINT_D:
000014B2  227C 00007010            531      MOVE.L #OUTPUT_ADDRESS, A1 
000014B8  12BC 0044                532      MOVE.B #'D', (A1)
000014BC  137C 0000 0001           533      MOVE.B #$0, 1(A1)
000014C2  103C 000E                534      MOVE.B #14, D0
000014C6  4E4F                     535      TRAP #15
000014C8  6000 FDAC                536      BRA CONTINUE_PRINT_RE_NUMBER
000014CC                           537  PRINT_A: 
000014CC  227C 00007010            538      MOVE.L #OUTPUT_ADDRESS, A1 
000014D2  12BC 0041                539      MOVE.B #'A', (A1)
000014D6  137C 0000 0001           540      MOVE.B #$0, 1(A1)
000014DC  103C 000E                541      MOVE.B #14, D0
000014E0  4E4F                     542      TRAP #15
000014E2  6000 FD92                543      BRA CONTINUE_PRINT_RE_NUMBER
000014E6                           544  
000014E6                           545  *-----------------------------------------------------------
000014E6                           546  * PRINT HEX 
000014E6                           547  * PARAMETERS:
000014E6                           548  *   1- (8(SP)): VALUE IN HEX
000014E6                           549  *   2- (4(SP)): HOW MANY BYTES
000014E6                           550  * RETURN NULL
000014E6                           551  *-----------------------------------------------------------
000014E6                           552  PRINT_HEX:
000014E6  6000 0016                553      BRA HEX_TO_ASCII
000014EA                           554  GET_ASCII_FROM_HEX:
000014EA  227C 00007010            555      MOVE.L #OUTPUT_ADDRESS, A1
000014F0  103C 000E                556      MOVE.B #14, D0
000014F4  4E4F                     557      TRAP #15
000014F6  227C 00007010            558      MOVE.L #OUTPUT_ADDRESS, A1
000014FC                           559  END_PRINT_HEX:
000014FC  4E75                     560      RTS
000014FE                           561  *-----------------------------------------------------------
000014FE                           562  * CONVERT HEX TO ASCII 
000014FE                           563  * PARAMATERS:
000014FE                           564  *   1- (8(SP)): VALUE IN HEX
000014FE                           565  *   2- (4(SP)): HOW MANY BYTES
000014FE                           566  * RETURN:
000014FE                           567  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
000014FE                           568  * D0 STORES HEX VALUE
000014FE                           569  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
000014FE                           570  * D1 COUNT LOOP
000014FE                           571  * D2 CONVERT TO ASCII
000014FE                           572  * D3 USE TO CALCULATE SHIFT
000014FE                           573  HEX_TO_ASCII: 
000014FE  202F 0008                574      MOVE.L 8(SP), D0 
00001502  282F 0004                575      MOVE.L 4(SP), D4
00001506  0C44 0004                576      CMPI #HEX_TO_ASCII_WORD, D4 
0000150A  6700 004E                577      BEQ HEX_TO_ASCII_SWAP
0000150E  0C44 0002                578      CMPI #HEX_TO_ASCII_BYTE, D4
00001512  6700 EAEE                579      BEQ HEX_TO_ASCII_BYTE
00001516                           580  HEX2ASCII_DONE_CONVERT:
00001516  4201                     581      CLR.B D1
00001518  227C 00007010            582      MOVE.L #OUTPUT_ADDRESS, A1
0000151E  =0000000F                583  HEX_MASKING EQU $0000000F
0000151E  =00000002                584  HEX_TO_ASCII_BYTE EQU $02
0000151E  =00000004                585  HEX_TO_ASCII_WORD EQU $04
0000151E  =00000008                586  HEX_TO_ASCII_LONG EQU $08
0000151E                           587  
0000151E                           588  HEX_TO_ASCII_LOOP:
0000151E  B204                     589      CMP.B D4, D1
00001520  6700 0032                590      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001524                           591  
00001524  E998                     592      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001526  2600                     593      MOVE.L D0,D3 ; copy the value to mask
00001528  C6BC 0000000F            594      AND.L #HEX_MASKING, D3  ; mask
0000152E                           595  
0000152E  0C03 000A                596      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001532  6D00 000C                597      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001536                           598  
00001536  0C03 0048                599      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000153A  6D00 000E                600      BLT HEX_TO_ASCII_LETTER
0000153E                           601  
0000153E  60DE                     602      BRA HEX_TO_ASCII_LOOP
00001540                           603  HEX_TO_ASCII_NUMBER:
00001540  0603 0030                604      ADD.B #48, D3  ; convert number to letter
00001544  12C3                     605      MOVE.B D3, (A1)+ ; push to return memory
00001546  5201                     606      ADDQ.B #$1, D1 ; add for loop count
00001548  60D4                     607      BRA HEX_TO_ASCII_LOOP ; loop back
0000154A                           608  HEX_TO_ASCII_LETTER:
0000154A  0603 0037                609      ADD.B #55, D3 ; convert A-F in ascii
0000154E  12C3                     610      MOVE.B D3, (A1)+ ; push to return memory
00001550  5201                     611      ADDQ.B #$1, D1 ; add to for loop count
00001552  60CA                     612      BRA HEX_TO_ASCII_LOOP ;loop back
00001554                           613  END_HEX_TO_ASCII:
00001554  12FC 0000                614      MOVE.B #0, (A1)+ ; add null terminated value
00001558  6090                     615      BRA GET_ASCII_FROM_HEX
0000155A                           616  HEX_TO_ASCII_SWAP:
0000155A  4840                     617      SWAP D0
0000155C  60B8                     618      BRA HEX2ASCII_DONE_CONVERT
0000155E                           619     
0000155E                           620  HEX_TO_ASCII_ROR:
0000155E  E098                     621      ROR.L #$08, D0
00001560  60B4                     622      BRA HEX2ASCII_DONE_CONVERT
00001562                           623  
00001562                           624  
00001562                           625  *-----------------------------------------------------------
00001562                           626  * CHECK IF THE VALUE IN HEX IS ODD 
00001562                           627  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
00001562                           628  * RETURN:
00001562                           629  *   0: IF IT IS EVEN
00001562                           630  *   1: IF IT IS ODD
00001562                           631  * NOTE:
00001562                           632  *   A0 IS FOR RETURN ADDRESS
00001562                           633  *   D0 IS FOR HEX VALUE
00001562                           634  CHECK_VALUE_IS_ODD:
00001562  =00000000                635  VALUE_IS_EVEN EQU $0
00001562  =00000001                636  VALUE_IS_ODD EQU $1
00001562  41F9 00009000            637      LEA RETURN_ADDRESS, A0
00001568  202F 0004                638      MOVE.L 4(SP), D0
0000156C  C0BC 0000FFFF            639      AND.L #$0000FFFF, D0
00001572  80FC 0002                640      DIVU.W #2, D0
00001576  4840                     641      SWAP D0      
00001578  0C40 0000                642      CMPI.W #0, D0
0000157C  6700 000C                643      BEQ CHECK_VALUE_IS_ODD_FAILED
00001580  30BC 0001                644      MOVE.W #VALUE_IS_ODD, (A0)
00001584  6000 0002                645      BRA END_CHECK_VALUE_IS_ODD
00001588                           646  END_CHECK_VALUE_IS_ODD:   
00001588  4E75                     647      RTS
0000158A                           648  
0000158A                           649  CHECK_VALUE_IS_ODD_FAILED:
0000158A  30BC 0000                650      MOVE.W #VALUE_IS_EVEN, (A0)
0000158E  60F8                     651      BRA END_CHECK_VALUE_IS_ODD
00001590                           652  *-----------------------------------------------------------
00001590                           653  * CONVERT ASCII TO HEX
00001590                           654  * PARAMETERS:
00001590                           655  *   1. LOCATION OF THE ASCII
00001590                           656  *   2. LENGTH OF THE ASCII
00001590                           657  *   3. MAXIMUM LENGTH (hex/ byte / long)
00001590                           658  * RETURN:
00001590                           659  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
00001590                           660  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
00001590                           661  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
00001590                           662  * NOTE:
00001590                           663  *    D0 FOR LENGTH OF ASCII
00001590                           664  *    D1 FOR LOOPING
00001590                           665  ; CURRENT INDEX
00001590                           666  *    D2 FOR THE VALUE IN ASCII OF THE DATA
00001590                           667  *    D3 FOR CONVERT FINAL RESULT
00001590                           668  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
00001590                           669  *    A0 LOCATION OF THE DATA   
00001590                           670  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
00001590                           671  ASCII_TO_HEX:
00001590  =00000001                672  ASCII_TO_HEX_RETURN_OK EQU $1
00001590  45F9 00009000            673      LEA RETURN_ADDRESS, A2
00001596  4252                     674      CLR.W (A2)
00001598  42AA 0002                675      CLR.L 2(A2)
0000159C  206F 000C                676      MOVE.L 12(SP),A0
000015A0                           677   ; LOCATION OF THE DATA
000015A0  202F 0008                678      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015A4  222F 0004                679      MOVE.L 4(SP), D1  ; MAX LENGTH
000015A8  B280                     680      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015AA  6D00 0076                681      BLT ASCII_TO_HEX_FAILED_0
000015AE  4281                     682      CLR.L D1 ; FOR LOOPING
000015B0                           683  ASCII_TO_HEX_LOOP:
000015B0  B081                     684     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015B2  6700 0068                685     BEQ ASCII_TO_HEX_END_LOOP
000015B6                           686     ; D2 USE FOR STORE DATA 
000015B6  1418                     687      MOVE.B (A0)+, D2
000015B8  0C02 002F                688      CMPI.B #47, D2
000015BC                           689  ASCII_TO_HEX_CHECK_GT_0
000015BC  6E00 0006                690      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
000015C0  6000 0066                691      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
000015C4                           692  ASCII_TO_HEX_CHECK_LT_9:
000015C4  0C02 003A                693      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
000015C8  6D00 001E                694      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
000015CC                           695      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
000015CC  6000 0002                696      BRA ASCII_TO_HEX_CHECK_GT_A
000015D0                           697  ASCII_TO_HEX_CHECK_GT_A:
000015D0  0C02 0040                698      CMPI.B #64, D2
000015D4  6E00 0006                699      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
000015D8  6000 004E                700      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
000015DC                           701  ASCII_TO_HEX_CHECK_LT_F
000015DC  0C02 0047                702      CMPI.B #71, D2
000015E0  6D00 0020                703      BLT ASCII_TO_HEX_CONVERT_LETTER
000015E4  6000 0042                704      BRA ASCII_TO_HEX_FAILED_2
000015E8                           705  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
000015E8                           706  ASCII_TO_HEX_CONVERT_NUMBER:
000015E8  2800                     707       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
000015EA  0402 0030                708       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
000015EE  9881                     709       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
000015F0  5344                     710       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
000015F2  C8FC 0004                711       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
000015F6  E9A2                     712       ASL.L D4, D2 ; SHIFT DATA
000015F8  D5AA 0002                713       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
000015FC  4282                     714       CLR.L D2
000015FE  5241                     715       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001600  60AE                     716       BRA ASCII_TO_HEX_LOOP
00001602                           717  ASCII_TO_HEX_CONVERT_LETTER:
00001602  2800                     718      MOVE.L D0, D4
00001604  0402 0037                719      SUB.B #55, D2
00001608  9881                     720      SUB.L D1,D4
0000160A  5344                     721      SUBQ #1, D4
0000160C  C8FC 0004                722      MULU #4, D4
00001610  E9A2                     723      ASL.L D4,D2
00001612  D5AA 0002                724      ADD.L D2, 2(A2)
00001616  4282                     725      CLR.L D2 
00001618  5241                     726      ADDQ #1, D1
0000161A  6094                     727      BRA ASCII_TO_HEX_LOOP
0000161C                           728  ASCII_TO_HEX_END_LOOP:
0000161C  34BC 0001                729      MOVE.W #1, (A2)
00001620  4E75                     730      RTS
00001622                           731      
00001622                           732  ASCII_TO_HEX_FAILED_0:
00001622  34BC 0002                733      MOVE.W #2, (A2)
00001626  4E75                     734      RTS
00001628                           735  ASCII_TO_HEX_FAILED_2:
00001628  34BC 0002                736      MOVE.W #2, (A2)
0000162C  4E75                     737      RTS 
0000162E                           738  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000162E                           739  * PARAMETERS:
0000162E                           740  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000162E                           741  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000162E                           742  * RETURN:
0000162E                           743  *   NULL
0000162E                           744  * NOTE:
0000162E                           745  *   A0 USE TO POINT TO THE ADDRESS
0000162E                           746  *   d1 USE TO MATH 
0000162E                           747  INCRASE_POINTER_START_ADDRESS: 
0000162E  206F 0008                748      MOVE.L 8(SP), A0
00001632  222F 0004                749      MOVE.L 4(SP), D1
00001636  D390                     750      ADD.L D1, (A0)
00001638  4E75                     751      RTS
0000163A                           752  
0000163A                           753  * FETCH 16 BIT FROM START_ADDRESS
0000163A                           754  * PARAMTERS: 
0000163A                           755  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000163A                           756  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000163A                           757  * RETURN:
0000163A                           758  *   NULL
0000163A                           759  * NOTE:
0000163A                           760  *     A0 USE TO STORE THE OPCODE LOCATION
0000163A                           761  *     A2 USES TO RETURN THE OPCODE
0000163A                           762  FETCH_OPCODES:
0000163A  206F 0008                763      MOVE.L 8(SP), A0 ; LOCATION
0000163E  246F 0004                764      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001642  3050                     765      MOVE.W (A0), A0
00001644  3488                     766      MOVE.W A0,(A2)
00001646  31FC 0002 7008           767      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000164C                           768  END_FETCH_OPCODES:
0000164C  4E75                     769      RTS
0000164E                           770  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000164E                           771  * LETS DECODE
0000164E                           772  * jump table uses to jump to decode subroutine
0000164E                           773  * PARAMATERS:
0000164E                           774  * 1-(4(Sp)) Word - opcode
0000164E                           775  * NOTE: 
0000164E                           776  *   D1 USES TO STORE OPCODE
0000164E                           777  JUMP_TABLE:
0000164E  322F 0004                778      MOVE.W 4(SP), D1
00001652  4EB9 0000169C            779      JSR RTS
00001658  4EB9 00001692            780      JSR NOP
0000165E  4EB9 000016A6            781      JSR JSR
00001664  4EB9 000017E4            782      JSR ADD 
0000166A  4EB9 000016F2            783      JSR LEA
00001670                           784      * JSR ORI
00001670  4EB9 0000196C            785      JSR NEG
00001676  4EB9 000016A6            786      JSR JSR
0000167C  4EB9 00001760            787      JSR ADDA
00001682  4EB9 000019D0            788      JSR BRA 
00001688  4EB9 000018B6            789      JSR MOVEA 
0000168E                           790  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
0000168E                           791  END_JUMP_TABLE:
0000168E  4EB8 11DE                792      JSR UNSUPPORT_REGISTER
00001692                           793  
00001692                           794  NOP:
00001692                           795  * constant for NOP 
00001692  =00004E71                796  C_NOP EQU $4E71
00001692  B27C 4E71                797      CMP.W #C_NOP, D1
00001696  6700 0420                798      BEQ PRINT_NOP
0000169A  4E75                     799      RTS
0000169C                           800  
0000169C                           801  RTS:
0000169C                           802  * constant for RTS 
0000169C  =00004E75                803  C_RTS EQU $4E75
0000169C  B27C 4E75                804      CMP.W #C_RTS, D1
000016A0  6700 03E6                805      BEQ PRINT_RTS
000016A4  4E75                     806      RTS
000016A6                           807  
000016A6                           808  JSR:
000016A6  =00004E80                809  JSR_OPCODE EQU %0100111010000000
000016A6  3401                     810      MOVE.W D1,D2 
000016A8                           811  * MASKING WITH UNIQUE OPCODE
000016A8  C47C FFC0                812      AND.W #%1111111111000000, D2
000016AC  B47C 4E80                813      CMP.W #JSR_OPCODE, D2
000016B0  6600 003E                814      BNE JSR_END 
000016B4                           815      ; check to make sure we support this register 
000016B4  3401                     816      MOVE.W D1, D2 
000016B6  C43C 003F                817      AND.B #%00111111, D2 
000016BA  3F02                     818      MOVE.W D2, -(SP)
000016BC  4EB8 11AC                819      JSR CHECK_SUPPORT_REGISTER 
000016C0  544F                     820      ADDQ #2, SP 
000016C2                           821      ; check return value
000016C2                           822      *  from print_register to see if it is unsupported register 
000016C2  3439 00009000            823      MOVE.W (RETURN_ADDRESS), D2 
000016C8  0C42 0002                824      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000016CC  6700 0022                825      BEQ JSR_END
000016D0                           826      ; done checking 
000016D0  4EB9 00001B00            827      JSR PRINT_JSR
000016D6                           828  * MASKING TO GET MODE AND REGISTER
000016D6  1401                     829      MOVE.B D1,D2
000016D8  C43C 003F                830      AND.B #%00111111, D2
000016DC  48A7 4000                831      MOVEM.W D1, -(SP)
000016E0  3F02                     832      MOVE.W D2, -(SP)
000016E2  3F3C 0000                833      MOVE.W #$0, -(SP)
000016E6  4EB8 1212                834      JSR PRINT_REGISTER
000016EA  5882                     835      ADDQ.L #4, D2
000016EC  4C9F 0002                836      MOVEM.W (SP)+, D1
000016F0                           837  JSR_END:
000016F0  4E75                     838      RTS
000016F2                           839  
000016F2                           840  LEA:
000016F2  3401                     841      MOVE.W D1,D2 
000016F4  C47C F1C0                842      AND.W  #%1111000111000000, D2
000016F8  0C42 41C0                843      CMPI.W #%0100000111000000, D2
000016FC  6600 0060                844      BNE LEA_END
00001700                           845  
00001700                           846      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001700  3401                     847      MOVE.W D1, D2 
00001702  C43C 003F                848      AND.B #%00111111, D2 
00001706  3F02                     849      MOVE.W D2, -(SP)
00001708  4EB8 11AC                850      JSR CHECK_SUPPORT_REGISTER
0000170C  544F                     851      ADDQ #2, SP 
0000170E                           852      ; check return value
0000170E                           853      *  from print_register to see if it is unsupported register 
0000170E  3439 00009000            854      MOVE.W (RETURN_ADDRESS), D2 
00001714  0C42 0002                855      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001718  6700 F92E                856      BEQ FINISH_OPCODE
0000171C                           857      * END CHECKING
0000171C  4EB9 00001B12            858      JSR PRINT_LEA
00001722  1401                     859      MOVE.B D1,D2 
00001724                           860      ; MASK TO GET MODE AND REGISTER
00001724  C43C 003F                861      AND.B #%0000000000111111, D2
00001728  48A7 4000                862      MOVEM.W D1, -(SP)
0000172C  3F02                     863      MOVE.W D2, -(SP)
0000172E  3F3C 0000                864      MOVE.W #$0, -(SP)
00001732  4EB8 1212                865      JSR PRINT_REGISTER
00001736  588F                     866      ADDQ.L #$4, SP
00001738  4C9F 0002                867      MOVEM.W (SP)+, D1
0000173C  4EB8 10D2                868      JSR PRINT_COMMA
00001740                           869      ; MASK TO GET DESTINATION REGISTER
00001740  3401                     870      MOVE.W D1,D2
00001742  C47C 0E00                871      AND.W #%0000111000000000, D2
00001746  E04A                     872      LSR.W #$08, D2
00001748  E24A                     873      LSR.W #$01, D2
0000174A  843C 0008                874      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
0000174E  3F02                     875      MOVE.W D2, -(SP)
00001750  3F3C 0000                876      MOVE.W #$0, -(SP) 
00001754  4EB8 1212                877      JSR PRINT_REGISTER
00001758  588F                     878      ADDQ.L #$04, SP
0000175A  6000 F8EC                879      BRA FINISH_OPCODE
0000175E                           880  LEA_END:
0000175E  4E75                     881      RTS
00001760                           882  
00001760                           883  ADDA:
00001760  =0000D0C0                884  C_ADDA EQU       %1101000011000000
00001760  =0000F0C0                885  ADDA_MASKING EQU %1111000011000000
00001760  =00000100                886  ADDA_SIZE_MASKING EQU %0000000100000000
00001760  =00000E00                887  ADDA_AN_MASKING EQU %0000111000000000
00001760  3401                     888      MOVE.W D1, D2
00001762  C47C F0C0                889      AND.W #ADDA_MASKING, D2 ; GET PATTERN
00001766  0C42 D0C0                890      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
0000176A  6600 0076                891      BNE ADDA_END 
0000176E                           892      ; CHECK TO MAKE SURE WE SUPPORT THE EA
0000176E  3401                     893      MOVE.W D1, D2 
00001770  C43C 003F                894      AND.B #%00111111, D2 
00001774  3F02                     895      MOVE.W D2, -(SP)
00001776  4EB8 11AC                896      JSR CHECK_SUPPORT_REGISTER
0000177A  544F                     897      ADDQ #2, SP 
0000177C                           898      ; check return value
0000177C                           899      *  from print_register to see if it is unsupported register 
0000177C  3439 00009000            900      MOVE.W (RETURN_ADDRESS), D2 
00001782  0C42 0002                901      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001786  6700 F8C0                902      BEQ FINISH_OPCODE
0000178A  4EB9 00001B24            903      JSR PRINT_ADDA
00001790  3401                     904      MOVE.W D1, D2  ; START TO MASK SIZE 
00001792  C47C 0100                905      AND.W #ADDA_SIZE_MASKING,D2 
00001796  E04A                     906      LSR.W #8, D2 
00001798  3C02                     907      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
0000179A  5246                     908      ADDQ #$1, D6
0000179C  1F06                     909      MOVE.B D6 , -(SP)
0000179E  4EB8 113A                910      JSR PRINT_DATA
000017A2  548F                     911      ADDQ.L #$2, SP 
000017A4  4EB8 10B4                912      JSR PRINT_TAB
000017A8                           913      ; GET MODE AND REGISTER
000017A8  3238 7006                914      MOVE.W (OPCODE_ADDRESS), D1 
000017AC  1401                     915      MOVE.B D1, D2 
000017AE  C43C 003F                916      AND.B #%00111111, D2 
000017B2  3F02                     917      MOVE.W D2, -(SP)
000017B4  3F06                     918      MOVE.W D6, -(SP)
000017B6  4EB8 1212                919      JSR PRINT_REGISTER 
000017BA  588F                     920      ADDQ.L #$04, SP 
000017BC  4EB8 10D2                921      JSR PRINT_COMMA
000017C0  3238 7006                922      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
000017C4  3401                     923      MOVE.W D1, D2
000017C6  C47C 0E00                924      AND.W #ADDA_AN_MASKING, D2
000017CA  E04A                     925      LSR.W #8, D2 
000017CC  E24A                     926      LSR.W #1, D2 
000017CE  843C 0008                927      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
000017D2  3F02                     928      MOVE.W D2, -(SP)
000017D4  3F3C 0000                929      MOVE.W #$0, -(SP)
000017D8  4EB8 1212                930      JSR PRINT_REGISTER 
000017DC  588F                     931      ADDQ.L #$4, SP 
000017DE  6000 F868                932      BRA FINISH_OPCODE
000017E2                           933  ADDA_END:
000017E2  4E75                     934      RTS
000017E4                           935  
000017E4                           936  ADD: 
000017E4  =0000D000                937  C_ADD EQU %1101000000000000 ; PATTERN
000017E4  =0000F000                938  C_ADD_MASKING EQU %1111000000000000 ; MASKING TO CHECK PATTERN
000017E4  =0000003F                939  C_ADD_EA EQU %00111111 ; EFFECTIVE ADDRESS MASKING
000017E4  =00000E00                940  C_ADD_REGISTER EQU %0000111000000000 ; WHICH REGISTER
000017E4  =000001C0                941  C_ADD_SIZE EQU %0000000111000000  ; SIZE 
000017E4  =00000100                942  C_ADD_DIRECTION EQU %0000000100000000
000017E4  =00000000                943  C_ADD_TO_D EQU      %0000000000000000
000017E4  =00000100                944  C_ADD_FROM_D EQU    %0000000100000000
000017E4  3401                     945      MOVE.W D1, D2 
000017E6                           946      ; CHECK PATTERN 
000017E6  C47C F000                947      AND.W #C_ADD_MASKING, D2 
000017EA  0C42 D000                948      CMPI #C_ADD, D2 
000017EE  6600 00C4                949      BNE ADD_END 
000017F2                           950      ; CHECK SUPPORT REGISTER 
000017F2  3401                     951      MOVE.W D1, D2 
000017F4  C43C 003F                952      AND.B #%00111111, D2 
000017F8  3F02                     953      MOVE.W D2, -(SP)
000017FA  4EB8 11AC                954      JSR CHECK_SUPPORT_REGISTER
000017FE  544F                     955      ADDQ #2, SP 
00001800                           956      ; check return value
00001800                           957      *  from print_register to see if it is unsupported register 
00001800  3439 00009000            958      MOVE.W (RETURN_ADDRESS), D2 
00001806  0C42 0002                959      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000180A  6700 F83C                960      BEQ FINISH_OPCODE
0000180E                           961      
0000180E  4EB9 00001B32            962      JSR PRINT_ADD 
00001814  3238 7006                963      MOVE.W (OPCODE_ADDRESS), D1 
00001818  3401                     964      MOVE.W D1, D2 
0000181A  C47C 01C0                965      AND.W #C_ADD_SIZE, D2 
0000181E  EC4A                     966      LSR.W #6, D2
00001820  1C02                     967      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001822                           968  
00001822  1F02                     969      MOVE.B D2, -(SP)
00001824  4EB8 113A                970      JSR PRINT_DATA
00001828  548F                     971      ADDQ.L #$02, SP 
0000182A  4EB8 10B4                972      JSR PRINT_TAB 
0000182E                           973      ; CHECK DIRECTION
0000182E  3238 7006                974      MOVE.W (OPCODE_ADDRESS), D1 
00001832  3401                     975      MOVE.W D1, D2  
00001834  C47C 0100                976      AND.W #C_ADD_DIRECTION, D2 
00001838  0C42 0000                977      CMPI.W #C_ADD_TO_D, D2 
0000183C  6700 003C                978      BEQ ADD_TO_D ; DN <EA> -> DN
00001840                           979      ; otherwise from d 
00001840                           980  ADD_FROM_D:
00001840  3238 7006                981      MOVE.W (OPCODE_ADDRESS), D1 
00001844  3401                     982      MOVE.W D1, D2 
00001846  C47C 0E00                983      AND.W #C_ADD_REGISTER, D2 
0000184A  E08A                     984      LSR.L #8, D2 
0000184C  E28A                     985      LSR.L #1, D2 
0000184E  843C 0000                986      OR.B #%00000000, D2
00001852  3F02                     987      MOVE.W D2, -(SP)
00001854  3F3C 0000                988      MOVE.W #$0, -(SP)
00001858  4EB8 1212                989      JSR PRINT_REGISTER 
0000185C  5882                     990      ADDQ.L #4, D2 
0000185E  4EB8 10D2                991      JSR PRINT_COMMA 
00001862                           992      
00001862  3238 7006                993      MOVE.W (OPCODE_ADDRESS), D1 
00001866  3401                     994      MOVE.W D1, D2 
00001868  C43C 003F                995      AND.B #C_ADD_EA, D2 
0000186C  3F02                     996      MOVE.W D2, -(SP)
0000186E  3F06                     997      MOVE.W D6, -(SP)
00001870  4EB8 1212                998      JSR PRINT_REGISTER
00001874  588F                     999      ADDQ.L #4, SP 
00001876  6000 F7D0               1000      BRA FINISH_OPCODE
0000187A                          1001      
0000187A                          1002  ADD_TO_D:
0000187A  3238 7006               1003      MOVE.W (OPCODE_ADDRESS), D1 
0000187E  3401                    1004      MOVE.W D1, D2 
00001880                          1005      ; GET SOURCE REGISTER 
00001880  C43C 003F               1006      AND.B #C_ADD_EA, D2 
00001884  3F02                    1007      MOVE.W D2, -(SP)
00001886  3F06                    1008      MOVE.W D6, -(SP)
00001888  4EB8 1212               1009      JSR PRINT_REGISTER
0000188C  588F                    1010      ADDQ.L #4, SP 
0000188E  4EB8 10D2               1011      JSR PRINT_COMMA 
00001892                          1012      ; PRINT DATA REGISTER 
00001892  3238 7006               1013      MOVE.W (OPCODE_ADDRESS), D1 
00001896  3401                    1014      MOVE.W D1, D2 
00001898  C47C 0E00               1015      AND.W #C_ADD_REGISTER, D2 
0000189C  E04A                    1016      LSR.W #8, D2 
0000189E  E24A                    1017      LSR.W #1, D2 
000018A0                          1018      ; APPEND MODE TO D2 FOR PRINT_REGISTER
000018A0  843C 0000               1019      OR.B #%00000000, D2 
000018A4  3F02                    1020      MOVE.W D2, -(SP)
000018A6  3F3C 0000               1021      MOVE.W #$0, -(SP)
000018AA  4EB8 1212               1022      JSR PRINT_REGISTER
000018AE  588F                    1023      ADDQ.L #4, SP 
000018B0  6000 F796               1024      BRA FINISH_OPCODE
000018B4                          1025  ADD_END:
000018B4  4E75                    1026      RTS
000018B6                          1027  
000018B6                          1028  MOVEA: 
000018B6  =00001040               1029  C_MOVEA_PATTERN1 EQU  %0001000001000000
000018B6  =00003040               1030  C_MOVEA_PATTERN2 EQU  %0011000001000000
000018B6  =00002040               1031  C_MOVEA_PATTERN3 EQU  %0010000001000000
000018B6  =0000F1C0               1032  C_MOVEA_P_MASKING EQU %1111000111000000
000018B6  =00003000               1033  C_MOVEA_SIZE      EQU %0011000000000000
000018B6  =00000E00               1034  C_MOVEA_AN        EQU %0000111000000000
000018B6  =0000003F               1035  C_MOVEA_REGISTER  EQU %00111111
000018B6  3401                    1036      MOVE.W D1, D2 
000018B8  0242 F1C0               1037      ANDI.W #C_MOVEA_P_MASKING, D2 
000018BC  0C42 1040               1038      CMPI.W #C_MOVEA_PATTERN1, D2 
000018C0  6700 0014               1039      BEQ MOVEA_REGISTER_OK
000018C4  0C42 3040               1040      CMPI.W #C_MOVEA_PATTERN2, D2 
000018C8  6700 000C               1041      BEQ MOVEA_REGISTER_OK
000018CC  0C42 2040               1042      CMPI.W #C_MOVEA_PATTERN3, D2 
000018D0  6700 0004               1043      BEQ MOVEA_REGISTER_OK
000018D4  4E75                    1044      RTS
000018D6                          1045  MOVEA_REGISTER_OK:
000018D6                          1046      ; CHECK SUPPORT THE REGISTER 
000018D6  3401                    1047      MOVE.W D1, D2 
000018D8  C43C 003F               1048      AND.B #C_MOVEA_REGISTER, D2 
000018DC  3F02                    1049      MOVE.W D2, -(SP) 
000018DE  4EB8 11AC               1050      JSR CHECK_SUPPORT_REGISTER
000018E2  548F                    1051      ADDQ.L #2, SP 
000018E4  3439 00009000           1052      MOVE.W (RETURN_ADDRESS), D2 
000018EA  0C42 0002               1053      CMPI.W #C_UNSUPPORT_REGISTER, D2 
000018EE  6700 F758               1054      BEQ FINISH_OPCODE
000018F2                          1055      ; DONE CHECKING, NOW DECODE 
000018F2  4EB9 00001B40           1056      JSR PRINT_MOVEA 
000018F8                          1057      ; GET SIZE 
000018F8  3401                    1058      MOVE.W D1, D2 
000018FA  C47C 3000               1059      AND.W #C_MOVEA_SIZE, D2 
000018FE                          1060      ; SHIFT TO LSB 
000018FE  E04A                    1061      LSR.W #8, D2 
00001900  E84A                    1062      LSR.W #4, D2 
00001902  0C02 0001               1063      CMPI.B #%00000001, D2
00001906  6700 000E               1064      BEQ CONVERT_OPMODE_SIZE_B
0000190A  0C02 0003               1065      CMPI.B #%00000011, D2 
0000190E  6700 000C               1066      BEQ CONVERT_OPMODE_SIZE_W
00001912  6000 000E               1067      BRA DONE_CONVERT
00001916                          1068  CONVERT_OPMODE_SIZE_B:
00001916  5302                    1069      SUBQ.B #1, D2 
00001918  6000 0008               1070      BRA DONE_CONVERT
0000191C                          1071  CONVERT_OPMODE_SIZE_W: 
0000191C  5502                    1072      SUBQ.B #2, D2 
0000191E  6000 0002               1073      BRA DONE_CONVERT
00001922                          1074  
00001922                          1075  DONE_CONVERT:
00001922  3C02                    1076      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001924  1F06                    1077      MOVE.B D6, -(SP)
00001926  4EB8 113A               1078      JSR PRINT_DATA 
0000192A  548F                    1079      ADDQ.L #2, SP 
0000192C  4EB8 10B4               1080      JSR PRINT_TAB
00001930                          1081      ; GET SOURCE REGISTER 
00001930  3238 7006               1082      MOVE.W (OPCODE_ADDRESS), D1 
00001934  3401                    1083      MOVE.W D1, D2 
00001936  C43C 003F               1084      AND.B #C_MOVEA_REGISTER,D2 
0000193A  3F02                    1085      MOVE.W D2, -(SP)
0000193C  3F06                    1086      MOVE.W D6, -(SP)
0000193E  4EB8 1212               1087      JSR PRINT_REGISTER
00001942  588F                    1088      ADDQ.L #4, SP 
00001944  4EB8 10D2               1089      JSR PRINT_COMMA
00001948                          1090  
00001948  3238 7006               1091      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
0000194C  3401                    1092      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
0000194E  C47C 0E00               1093      AND.W #C_MOVEA_AN, D2 
00001952  E04A                    1094      LSR.W #8, D2 
00001954  E24A                    1095      LSR.W #1, D2 
00001956                          1096      ; ADD MODE FOR PRINT_REGISTER 
00001956  0002 0008               1097      ORI.B #%00001000, D2 
0000195A  3F02                    1098      MOVE.W D2, -(SP)
0000195C  3F3C 0000               1099      MOVE.W #0, -(SP)
00001960  4EB8 1212               1100      JSR PRINT_REGISTER ; PRINT AN 
00001964  588F                    1101      ADDQ.L #4, SP 
00001966  6000 F6E0               1102      BRA FINISH_OPCODE   
0000196A                          1103  
0000196A                          1104  MOVEA_END: 
0000196A  4E75                    1105      RTS 
0000196C                          1106  
0000196C                          1107  
0000196C                          1108  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
0000196C                          1109  NEG:
0000196C                          1110  * CONSTANT FOR NEG OPCODE
0000196C  =00004400               1111  NEG_OPCODE EQU %0100010000000000
0000196C  =0000FF00               1112  NEG_M      EQU %1111111100000000
0000196C  =0000003F               1113  NEG_REG_M  EQU %0000000000111111
0000196C  =000000C0               1114  NEG_SIZE_M EQU %0000000011000000
0000196C  3401                    1115      MOVE.W D1, D2
0000196E                          1116  * MASKING WITH NEG UNIQUE CODE
0000196E  C47C FF00               1117      AND.W #NEG_M, D2
00001972  B47C 4400               1118      CMP.W #NEG_OPCODE, D2
00001976  6600 0056               1119      BNE NEG_END
0000197A                          1120  
0000197A                          1121  * CHECK TO MAKE SURE WE SUPPORT THE EA
0000197A  3401                    1122      MOVE.W D1, D2 
0000197C  C43C 003F               1123      AND.B #NEG_REG_M, D2 
00001980  3F02                    1124      MOVE.W D2, -(SP)
00001982  4EB8 11AC               1125      JSR CHECK_SUPPORT_REGISTER
00001986  544F                    1126      ADDQ #2, SP 
00001988                          1127  * from print_register to see if it is unsupported register 
00001988  3439 00009000           1128      MOVE.W (RETURN_ADDRESS), D2 
0000198E  0C42 0002               1129      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001992  6700 F6B4               1130      BEQ FINISH_OPCODE
00001996                          1131  
00001996  4EB9 00001A9C           1132      JSR PRINT_NEG
0000199C  3238 7006               1133      MOVE.W (OPCODE_ADDRESS), D1 
000019A0  3401                    1134      MOVE.W D1, D2
000019A2                          1135  * MASKING TO GET NEG SIZE
000019A2  C47C 00C0               1136      AND.W #NEG_SIZE_M, D2
000019A6  EC42                    1137      ASR.W #6, D2
000019A8  1C02                    1138      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
000019AA  1F06                    1139      MOVE.B D6, -(SP)
000019AC  4EB8 113A               1140      JSR PRINT_DATA
000019B0  548F                    1141      ADDQ.L #2, SP
000019B2  4EB8 10B4               1142      JSR PRINT_TAB
000019B6                          1143  
000019B6  3238 7006               1144      MOVE.W (OPCODE_ADDRESS), D1     
000019BA  3401                    1145      MOVE.W D1, D2
000019BC                          1146  * MASKING TO GET MODE AND REGISTER
000019BC  C47C 003F               1147      AND.W #NEG_REG_M, D2
000019C0  3F02                    1148      MOVE.W D2, -(SP)
000019C2  3F06                    1149      MOVE.W D6, -(SP)
000019C4  4EB8 1212               1150      JSR PRINT_REGISTER
000019C8  588F                    1151      ADDQ.L #$04, SP
000019CA  6000 F67C               1152      BRA FINISH_OPCODE
000019CE                          1153  NEG_END: 
000019CE  4E75                    1154      RTS
000019D0                          1155  
000019D0                          1156  BRA:
000019D0                          1157  * CONSTANT FOR BRA OPCODE
000019D0  =00006000               1158  BRA_OPCODE EQU %0110000000000000
000019D0  =00006000               1159  BRA_M      EQU %0110000000000000
000019D0  =000000FF               1160  BRA_SIZE_M EQU %0000000011111111
000019D0  3401                    1161      MOVE.W D1, D2
000019D2                          1162  * MASKING WITH BRA UNIQUE CODE
000019D2  C47C 6000               1163      AND.W #BRA_M, D2
000019D6  B47C 6000               1164      CMP.W #BRA_OPCODE, D2
000019DA  6600 0010               1165      BNE BRA_END
000019DE  4EB9 00001AAA           1166      JSR PRINT_BRA
000019E4  3401                    1167      MOVE.W D1, D2
000019E6  3601                    1168      MOVE.W D1, D3
000019E8                          1169  * MASKING TO GET SIZE OF BRA
000019E8  B47C 00FF               1170      CMP.W #BRA_SIZE_M, D2 
000019EC                          1171  BRA_END:
000019EC  4E75                    1172      RTS
000019EE                          1173  
000019EE                          1174  * OR:
000019EE                          1175  * * CONSTANT FOR OR OPCODE
000019EE                          1176  * OR_OPCODE EQU %
000019EE                          1177  * OR_M      EQU %
000019EE                          1178  * OR_SIZE_M EQU %
000019EE                          1179  *     MOVE.W D1, D2
000019EE                          1180  * * MASKING WITH OR UNIQUE CODE
000019EE                          1181  *     AND.W #OR_M, D2
000019EE                          1182  *     CMP.W #OR_OPCODE, D2
000019EE                          1183  *     BNE OR_END
000019EE                          1184  *     JSR PRINT_OR
000019EE                          1185  *     MOVE.W D1, D2
000019EE                          1186  *     MOVE.W D1, D3
000019EE                          1187  * * MASKING TO GET SIZE OF OR
000019EE                          1188  *     CMP.W #OR_SIZE_M, D2 
000019EE                          1189  * OR_END:
000019EE                          1190  *     RTS
000019EE                          1191  
000019EE                          1192  ORI:
000019EE                          1193  * CONSTANT FOR ORI OPCODE
000019EE  =00000000               1194  ORI_OPCODE EQU %0000000000000000
000019EE  =00000000               1195  ORI_M      EQU %0000000000000000
000019EE  =0000003F               1196  ORI_REG_M  EQU %0000000000111111
000019EE  =000000C0               1197  ORI_SIZE_M EQU %0000000011000000
000019EE  3401                    1198      MOVE.W D1, D2
000019F0                          1199  * MASKING WITH ORI UNIQUE CODE
000019F0  C47C 0000               1200      AND.W #ORI_M, D2
000019F4  B47C 0000               1201      CMP.W #ORI_OPCODE, D2
000019F8  6600 008C               1202      BNE ORI_END
000019FC                          1203  
000019FC                          1204  * CHECK TO MAKE SURE WE SUPPORT THE EA
000019FC  3401                    1205      MOVE.W D1, D2 
000019FE  C43C 003F               1206      AND.B #ORI_REG_M, D2 
00001A02  3F02                    1207      MOVE.W D2, -(SP)
00001A04  4EB8 11AC               1208      JSR CHECK_SUPPORT_REGISTER
00001A08  544F                    1209      ADDQ #2, SP 
00001A0A                          1210  * from print_register to see if it is unsupported register 
00001A0A  3439 00009000           1211      MOVE.W (RETURN_ADDRESS), D2 
00001A10  0C42 0002               1212      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001A14  6700 F632               1213      BEQ FINISH_OPCODE
00001A18                          1214  
00001A18  4EB9 00001AD6           1215      JSR PRINT_ORI
00001A1E  3238 7006               1216      MOVE.W (OPCODE_ADDRESS), D1
00001A22  3401                    1217      MOVE.W D1, D2
00001A24                          1218  * MASKING TO GET SIZE OF ORI
00001A24  C47C 00C0               1219      AND.W #ORI_SIZE_M, D2 
00001A28  EC42                    1220      ASR.W #6, D2
00001A2A  1C02                    1221      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001A2C  1F06                    1222      MOVE.B D6, -(SP)
00001A2E  4EB8 113A               1223      JSR PRINT_DATA
00001A32  548F                    1224      ADDQ.L #$02, SP
00001A34  4EB8 10B4               1225      JSR PRINT_TAB
00001A38                          1226  
00001A38                          1227   ORI_CONT:   
00001A38  3238 7006               1228      MOVE.W (OPCODE_ADDRESS), D1     
00001A3C  3401                    1229      MOVE.W D1, D2
00001A3E                          1230  * MASKING WITH ORI UNIQUE CODE TO CHECK IF IT IS STILL ORI INSTRUCTION
00001A3E  C47C 0000               1231      AND.W #ORI_M, D2
00001A42  B47C 0000               1232      CMP.W #ORI_OPCODE, D2
00001A46  6600 F600               1233      BNE FINISH_OPCODE
00001A4A                          1234  * MASKING TO GET MODE AND REGISTER
00001A4A  3401                    1235      MOVE.W D1, D2
00001A4C  C47C 003F               1236      AND.W #ORI_REG_M, D2
00001A50  3F02                    1237      MOVE.W D2, -(SP)
00001A52  3F06                    1238      MOVE.W D6, -(SP)
00001A54  4EB8 1212               1239      JSR PRINT_REGISTER
00001A58  588F                    1240      ADDQ.L #4, SP
00001A5A  4EB8 10D2               1241      JSR PRINT_COMMA
00001A5E                          1242  
00001A5E  3238 7006               1243      MOVE.W (OPCODE_ADDRESS), D1     
00001A62  3401                    1244      MOVE.W D1, D2
00001A64                          1245  * MASKING WITH ORI UNIQUE CODE TO CHECK IF IT IS STILL ORI INSTRUCTION
00001A64  C47C 0000               1246      AND.W #ORI_M, D2
00001A68  B47C 0000               1247      CMP.W #ORI_OPCODE, D2
00001A6C  6600 F5DA               1248      BNE FINISH_OPCODE
00001A70                          1249  * MASKING TO GET MODE AND REGISTER
00001A70  3401                    1250      MOVE.W D1, D2
00001A72  C47C 003F               1251      AND.W #ORI_REG_M, D2
00001A76  3F02                    1252      MOVE.W D2, -(SP)
00001A78  3F3C 0000               1253      MOVE.W #$0, -(SP)
00001A7C  4EB8 1212               1254      JSR PRINT_REGISTER
00001A80  588F                    1255      ADDQ.L #4, SP
00001A82  6000 F5C4               1256      BRA FINISH_OPCODE
00001A86                          1257  ORI_END:
00001A86  4E75                    1258      RTS
00001A88                          1259  
00001A88                          1260  * ROR:
00001A88                          1261  * * CONSTANT FOR ROR OPCODE
00001A88                          1262  * ROR_OPCODE EQU %
00001A88                          1263  * ROR_M      EQU %
00001A88                          1264  * ROR_SIZE_M EQU %
00001A88                          1265  *     CLR.W D2
00001A88                          1266  *     MOVE.W D1, D2
00001A88                          1267  * * MASKING WITH ROR UNIQUE CODE
00001A88                          1268  *     AND.W #ROR_M, D2
00001A88                          1269  *     CMP.W #ROR_OPCODE, D2
00001A88                          1270  *     BNE ROR_END
00001A88                          1271  *     JSR PRINT_ROR
00001A88                          1272  *     MOVE.W D1, D2
00001A88                          1273  *     MOVE.W D1, D3
00001A88                          1274  * * MASKING TO GET SIZE OF ROR
00001A88                          1275  *     CMP.W #ROR_SIZE_M, D2 
00001A88                          1276  * ROR_END:
00001A88                          1277  *     RTS
00001A88                          1278  
00001A88                          1279  * ROL:
00001A88                          1280  * * CONSTANT FROR ROL OPCODE
00001A88                          1281  * ROL_OPCODE EQU %
00001A88                          1282  * ROL_M      EQU %
00001A88                          1283  * ROL_SIZE_M EQU %
00001A88                          1284  *     CLR.W D2
00001A88                          1285  *     MOVE.W D1, D2
00001A88                          1286  * * MASKING WITH ROL UNIQUE CODE
00001A88                          1287  *     AND.W #ROL_M, D2
00001A88                          1288  *     CMP.W #ROL_OPCODE, D2
00001A88                          1289  *     BNE ROL_END
00001A88                          1290  *     JSR PRINT_ROL
00001A88                          1291  *     MOVE.W D1, D2
00001A88                          1292  *     MOVE.W D1, D3
00001A88                          1293  * * MASKING TO GET SIZE OF ROL
00001A88                          1294  *     CMP.W #ROL_SIZE_M, D2 
00001A88                          1295  * ROL_END:
00001A88                          1296  *     RTS
00001A88                          1297  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A88                          1298  
00001A88                          1299  
00001A88                          1300  PRINT_RTS:
00001A88  43F9 00001B5C           1301      LEA P_RTS, A1
00001A8E  103C 000E               1302      MOVE.B #14, D0
00001A92  4E4F                    1303      TRAP #15
00001A94  4EB8 10B4               1304      JSR PRINT_TAB
00001A98  6000 F5AE               1305      BRA FINISH_OPCODE
00001A9C                          1306  PRINT_NEG:
00001A9C  43F9 00001B9C           1307      LEA P_NEG, A1
00001AA2  103C 000E               1308      MOVE.B #14, D0
00001AA6  4E4F                    1309      TRAP #15
00001AA8  4E75                    1310      RTS 
00001AAA                          1311  PRINT_BRA:
00001AAA  43F9 00001BDA           1312      LEA P_BRA, A1
00001AB0  103C 000E               1313      MOVE.B #14, D0
00001AB4  4E4F                    1314      TRAP #15
00001AB6  4E75                    1315      RTS 
00001AB8                          1316  PRINT_NOP:
00001AB8  43F9 00001B60           1317      LEA P_NOP, A1
00001ABE  103C 000E               1318      MOVE.B #14, D0
00001AC2  4E4F                    1319      TRAP #15
00001AC4  6000 F582               1320      BRA FINISH_OPCODE
00001AC8                          1321  PRINT_OR:
00001AC8  43F9 00001B95           1322      LEA P_OR, A1
00001ACE  103C 000E               1323      MOVE.B #14, D0
00001AD2  4E4F                    1324      TRAP #15
00001AD4  4E75                    1325      RTS 
00001AD6                          1326  PRINT_ORI:
00001AD6  43F9 00001B98           1327      LEA P_ORI, A1
00001ADC  103C 000E               1328      MOVE.B #14, D0
00001AE0  4E4F                    1329      TRAP #15
00001AE2  4E75                    1330      RTS
00001AE4                          1331  PRINT_ROL:
00001AE4  43F9 00001BB4           1332      LEA P_ROL, A1
00001AEA  103C 000E               1333      MOVE.B #14, D0
00001AEE  4E4F                    1334      TRAP #15
00001AF0  4E75                    1335      RTS 
00001AF2                          1336  PRINT_ROR:
00001AF2  43F9 00001BB8           1337      LEA P_ROR, A1
00001AF8  103C 000E               1338      MOVE.B #14, D0
00001AFC  4E4F                    1339      TRAP #15
00001AFE  4E75                    1340      RTS 
00001B00                          1341  PRINT_JSR:
00001B00  43F9 00001BDE           1342      LEA P_JSR, A1
00001B06  103C 000E               1343      MOVE.B #14, D0
00001B0A  4E4F                    1344      TRAP #15
00001B0C  4EB8 10B4               1345      JSR PRINT_TAB
00001B10  4E75                    1346      RTS 
00001B12                          1347  PRINT_LEA:
00001B12  43F9 00001B91           1348      LEA P_LEA, A1
00001B18  103C 000E               1349      MOVE.B #14, D0
00001B1C  4E4F                    1350      TRAP #15
00001B1E  4EB8 10B4               1351      JSR PRINT_TAB
00001B22  4E75                    1352      RTS 
00001B24                          1353  PRINT_ADDA: 
00001B24  43F9 00001B79           1354      LEA P_ADDA, A1 
00001B2A  103C 000E               1355      MOVE.B #14, D0
00001B2E  4E4F                    1356      TRAP #15 
00001B30  4E75                    1357      RTS
00001B32                          1358  PRINT_ADD:
00001B32  43F9 00001B75           1359      LEA P_ADD, A1 
00001B38  103C 000E               1360      MOVE.B #14, D0 
00001B3C  4E4F                    1361      TRAP #15
00001B3E  4E75                    1362      RTS
00001B40                          1363  PRINT_MOVEA: 
00001B40  43F9 00001B69           1364      LEA P_MOVEA, A1 
00001B46  103C 000E               1365      MOVE.B #14, D0 
00001B4A  4E4F                    1366      TRAP #15 
00001B4C  4E75                    1367      RTS 
00001B4E                          1368  PRINT_UNSUPPORTED: 
00001B4E  43F9 00001BE2           1369      LEA P_DATA, A1 
00001B54  103C 000E               1370      MOVE.B #14, D0 
00001B58  4E4F                    1371      TRAP #15 
00001B5A  4E75                    1372      RTS 
00001B5C                          1373  
00001B5C                          1374  
00001B5C                          1375  
00001B5C                          1376  
00001B5C                          1377  
00001B5C                          1378  
00001B5C                          1379  
00001B5C                          1380  
00001B5C                          1381  
00001B5C= 52 54 53 00             1382  P_RTS DC.B 'RTS',0        *-----------------DONE-----------------*
00001B60= 4E 4F 50 00             1383  P_NOP DC.B 'NOP',0        *-----------------DONE-----------------*
00001B64= 4D 4F 56 45 00          1384  P_MOVE DC.B 'MOVE',0
00001B69= 4D 4F 56 45 41 00       1385  P_MOVEA DC.B 'MOVEA', 0
00001B6F= 4D 4F 56 45 4D 00       1386  P_MOVEM DC.B 'MOVEM', 0
00001B75= 41 44 44 00             1387  P_ADD DC.B 'ADD', 0        *-----------------DONE-----------------*
00001B79= 41 44 44 41 00          1388  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
00001B7E= 53 55 42 00             1389  P_SUB DC.B 'SUB', 0
00001B82= 53 55 42 51 00          1390  P_SUBQ DC.B 'SUBQ',0
00001B87= 4D 55 4C 53 00          1391  P_MULS DC.B 'MULS',0
00001B8C= 44 49 56 53 00          1392  P_DIVS DC.B 'DIVS',0
00001B91= 4C 45 41 00             1393  P_LEA DC.B 'LEA',0        *-----------------DONE-----------------*
00001B95= 4F 52 00                1394  P_OR DC.B 'OR',0
00001B98= 4F 52 49 00             1395  P_ORI DC.B 'ORI', 0
00001B9C= 4E 45 47 00             1396  P_NEG DC.B 'NEG', 0        *-----------------DONE-----------------*
00001BA0= 45 4F 52 00             1397  P_EOR DC.B 'EOR', 0
00001BA4= 4C 53 52 00             1398  P_LSR DC.B 'LSR',0
00001BA8= 4C 53 4C 00             1399  P_LSL DC.B 'LSL', 0
00001BAC= 41 53 52 00             1400  P_ASR DC.B 'ASR', 0
00001BB0= 41 53 4C 00             1401  P_ASL DC.B 'ASL',0 
00001BB4= 52 4F 4C 00             1402  P_ROL DC.B 'ROL', 0
00001BB8= 52 4F 52 00             1403  P_ROR DC.B 'ROR', 0
00001BBC= 42 43 4C 52 00          1404  P_BCLR DC.B 'BCLR',0
00001BC1= 43 4D 50 00             1405  P_CMP DC.B 'CMP', 0
00001BC5= 43 4D 50 49 00          1406  P_CMPI DC.B 'CMPI', 0
00001BCA= 42 43 53 00             1407  P_BCS DC.B 'BCS', 0
00001BCE= 42 47 45 00             1408  P_BGE DC.B 'BGE', 0
00001BD2= 42 4C 54 00             1409  P_BLT DC.B 'BLT',0
00001BD6= 42 56 43 00             1410  P_BVC DC.B 'BVC', 0
00001BDA= 42 52 41 00             1411  P_BRA DC.B 'BRA',0
00001BDE= 4A 53 52 00             1412  P_JSR DC.B 'JSR',0        *-----------------DONE-----------------*
00001BE2= 44 41 54 41 00          1413  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
00001BE7                          1414  
00001BE7                          1415  
00001BE7  =00000004               1416  WORD_LENGTH EQU $04
00001BE7  =00000008               1417  LONG_LENGTH EQU $08
00001BE7= 31 30 30 32 30 30 ...   1418  TEST_VAL DC.B '10020009'
00001BEF  =0000000A               1419  LF EQU $0A
00001BEF  =0000000D               1420  CR EQU $0D
00001BEF  =00000009               1421  HT  EQU  $09 
00001BEF= 20 0D 0A 00             1422  NEW_LINE DC.B ' ',CR,LF,0
00001BF3                          1423  SIMHALT             ; halt simulator
00001BF3                          1424  * Put variables and constants here
00001BF3                          1425  
00001BF3                          1426  
00001BF3                          1427  
00001BF3                          1428  
00001BF3                          1429  
00001BF3                          1430  
00001BF3= 50 6C 65 61 73 65 ...   1431  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001C22= 50 6C 65 61 73 65 ...   1432  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
00001C4F= 50 72 65 73 73 20 ...   1433  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00001C69                          1434      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 17E4
ADDA                1760
ADDA_AN_MASKING     E00
ADDA_END            17E2
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             18B4
ADD_FROM_D          1840
ADD_TO_D            187A
ASCII_TO_HEX        1590
ASCII_TO_HEX_CHECK_GT_0  15BC
ASCII_TO_HEX_CHECK_GT_A  15D0
ASCII_TO_HEX_CHECK_LT_9  15C4
ASCII_TO_HEX_CHECK_LT_F  15DC
ASCII_TO_HEX_CONVERT_LETTER  1602
ASCII_TO_HEX_CONVERT_NUMBER  15E8
ASCII_TO_HEX_END_LOOP  161C
ASCII_TO_HEX_FAILED_0  1622
ASCII_TO_HEX_FAILED_2  1628
ASCII_TO_HEX_LOOP   15B0
ASCII_TO_HEX_RETURN_OK  1
BRA                 19D0
BRA_END             19EC
BRA_M               6000
BRA_OPCODE          6000
BRA_SIZE_M          FF
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  1562
CHECK_VALUE_IS_ODD_FAILED  158A
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  125A
CONTINUE_PRINT_RE_NUMBER  1276
CONVERT_OPMODE_SIZE_B  1916
CONVERT_OPMODE_SIZE_W  191C
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          1C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_CONVERT        1922
DONE_PRINT_NUMBER   1294
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  1588
END_FETCH_OPCODES   164C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1554
END_JUMP_TABLE      168E
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       14FC
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12BE
END_PRINT_TAB       10CA
FETCH_OPCODES       163A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  14EA
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1516
HEX_MASKING         F
HEX_TO_ASCII        14FE
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  154A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   151E
HEX_TO_ASCII_NUMBER  1540
HEX_TO_ASCII_ROR    155E
HEX_TO_ASCII_SWAP   155A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  162E
JSR                 16A6
JSR_END             16F0
JSR_OPCODE          4E80
JUMP_TABLE          164E
LEA                 16F2
LEA_END             175E
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVEA               18B6
MOVEA_END           196A
MOVEA_REGISTER_OK   18D6
NEG                 196C
NEG_END             19CE
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1BEF
NOP                 1692
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
ORI                 19EE
ORI_CONT            1A38
ORI_END             1A86
ORI_M               0
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OUTPUT_ADDRESS      7010
PRINT_A             14CC
PRINT_AB_LONG       13E8
PRINT_AB_SHORT      1386
PRINT_ADD           1B32
PRINT_ADDA          1B24
PRINT_BRA           1AAA
PRINT_BYTE          1164
PRINT_CLOSE         147E
PRINT_CLOSE_PLUS    1498
PRINT_COMMA         10D2
PRINT_D             14B2
PRINT_DATA          113A
PRINT_DOLLAR_SIGN   10EA
PRINT_HASH_SIGN     1102
PRINT_HEX           14E6
PRINT_IMMEDIATE     12C0
PRINT_IMMEDIATE_BYTE  12FC
PRINT_IMMEDIATE_LONG  1352
PRINT_IMMEDIATE_WORD  1326
PRINT_JSR           1B00
PRINT_LEA           1B12
PRINT_LONG          117C
PRINT_MINUS_OPEN    1464
PRINT_MOVEA         1B40
PRINT_NEG           1A9C
PRINT_NEW_LINE      111A
PRINT_NOP           1AB8
PRINT_OPEN          144A
PRINT_OR            1AC8
PRINT_ORI           1AD6
PRINT_PC            1188
PRINT_REGISTER      1212
PRINT_ROL           1AE4
PRINT_ROR           1AF2
PRINT_RTS           1A88
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1B4E
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  1C4F
PROMT_INPUT_END     1C22
PROMT_INPUT_START   1BF3
P_ADD               1B75
P_ADDA              1B79
P_ASL               1BB0
P_ASR               1BAC
P_BCLR              1BBC
P_BCS               1BCA
P_BGE               1BCE
P_BLT               1BD2
P_BRA               1BDA
P_BVC               1BD6
P_CMP               1BC1
P_CMPI              1BC5
P_DATA              1BE2
P_DIVS              1B8C
P_EOR               1BA0
P_JSR               1BDE
P_LEA               1B91
P_LSL               1BA8
P_LSR               1BA4
P_MOVE              1B64
P_MOVEA             1B69
P_MOVEM             1B6F
P_MULS              1B87
P_NEG               1B9C
P_NOP               1B60
P_OR                1B95
P_ORI               1B98
P_ROL               1BB4
P_ROR               1BB8
P_RTS               1B5C
P_SUB               1B7E
P_SUBQ              1B82
RETURN_ADDRESS      9000
RTS                 169C
SIMHALT             1BF3
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
TEST_VAL            1BE7
UNSUPPORT_REGISTER  11DE
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
