00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/25/2018 10:43:44 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : 
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  * OUTPUT_ADDRESS STORES BUFFER FOR PRINTING
00001000  =00007010                  9  OUTPUT_ADDRESS EQU $7010
00001000                            10  * RETURN_ADDRESS USES FOR PRINTING AND RETURN VALUE FROM BRANCHES
00001000  =00009000                 11  RETURN_ADDRESS EQU $9000
00001000                            12  * LOCATION TO STORE START_ADDRESS
00001000  =00009100                 13  START_ADDRESS EQU $09100
00001000                            14  * LOCATION TO STORE END_ADDRESS
00001000  =00007004                 15  END_ADDRESS EQU $7004
00001000                            16  * LOCATION TO STORE CURRENT 16 BITS OPCODE
00001000  =00007006                 17  OPCODE_ADDRESS EQU $7006
00001000                            18  * LOCATION TO STORE CURRENT OFFSET FROM OPCODE OF A INSTRUCTION, FOR EXAMPLE:
00001000                            19  *       MOVE.L #$500, D3 and the instruction(MOVE.L known data register as d3 and immediate data) location at 10000.
00001000                            20  *       THIS OFFSET WILL HANDLE BY PRINT_REGISTER. IT WILL PRINT OUT #$500 AND ADD THE NEXT OFFSET FROM THE ORIGINAL OPCODE IN THIS LOCATION, 
00001000                            21  *       THE OFFSET SHOULD SET = 2 WHEN FETCH_OPCODE 
00001000  =00007008                 22  OFFSET_OPC_ADDRES EQU $7008 
00001000                            23  ; SIZE OF A OPCODE WORD BYTE LONG TO A JUST THE PC 
00001000  =0000700A                 24  SIZE_OPCODE EQU $700A
00001000                            25  * LOCATION TO STORE REGISTERS FOR MOVEM
00001000  =0000700C                 26  STORE_REGISTER_ADDRESS EQU $700C
00001000                            27  * LOCATiON TO STORE STACK ADDRESS VALUE
00001000  =00008000                 28  STACK_ADDRESS EQU $8000
00001000                            29  START:                  ; first instruction of program
00001000                            30      * MOVE.L #$10AF241B, -(SP)
00001000                            31      * MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001000                            32      * JSR PRINT_HEX
00001000                            33      * ADDQ.L #$08, SP
00001000                            34  
00001000                            35      * JSR PRINT_NEW_LINE
00001000                            36  
00001000                            37      * JSR PRINT_TAB
00001000                            38      * A0
00001000                            39  *     MOVE.L #%0000011100000100, D1
00001000                            40  *     MOVE.L D1, -(SP)
00001000                            41  *     JSR PRINT_REGISTER
00001000                            42  *     ADDQ.L #4, SP
00001000                            43  *     * A1
00001000                            44  *     MOVE.W #%0100, D1
00001000                            45  *     SWAP D1
00001000                            46  *     MOVE.W #$1, D1
00001000                            47  *     MOVE.L D1, -(SP)
00001000                            48  *     JSR PRINT_REGISTER
00001000                            49  *     ADDQ.L #4, SP
00001000                            50  * * A2
00001000                            51  *     MOVE.W #%0011, D1
00001000                            52  *     SWAP D1
00001000                            53  *     MOVE.W #$2, D1
00001000                            54  *     MOVE.L D1, -(SP)
00001000                            55  *     JSR PRINT_REGISTER
00001000                            56  *     ADDQ.L #4, SP
00001000                            57  * * A3
00001000                            58  *     MOVE.W #%0011, D1
00001000                            59  *     SWAP D1
00001000                            60  *     MOVE.W #$3, D1
00001000                            61  *     MOVE.L D1, -(SP)
00001000                            62  *     JSR PRINT_REGISTER
00001000                            63  *     ADDQ.L #4, SP
00001000                            64  * * A4
00001000                            65  *     MOVE.W #%0011, D1
00001000                            66  *     SWAP D1
00001000                            67  *     MOVE.W #$4, D1
00001000                            68  *     MOVE.L D1, -(SP)
00001000                            69  *     JSR PRINT_REGISTER
00001000                            70  *     ADDQ.L #4, SP
00001000                            71  * * A5
00001000                            72  *     MOVE.W #%0011, D1
00001000                            73  *     SWAP D1
00001000                            74  *     MOVE.W #$5, D1
00001000                            75  *     MOVE.L D1, -(SP)
00001000                            76  *     JSR PRINT_REGISTER
00001000                            77  *     ADDQ.L #4, SP
00001000                            78  * * A6
00001000                            79  *     MOVE.W #%0011, D1
00001000                            80  *     SWAP D1
00001000                            81  *     MOVE.W #$6, D1
00001000                            82  *     MOVE.L D1, -(SP)
00001000                            83  *     JSR PRINT_REGISTER
00001000                            84  *     ADDQ.L #4, SP
00001000                            85  * * A7
00001000                            86  *     MOVE.W #%0011, D1
00001000                            87  *     SWAP D1
00001000                            88  *     MOVE.W #$7, D1
00001000                            89  *     MOVE.L D1, -(SP)
00001000                            90  *     JSR PRINT_REGISTER
00001000                            91  *     ADDQ.L #4, SP
00001000                            92  
00001000                            93      * JSR PRINT_COMMA
00001000                            94      * JSR PRINT_DOLLAR_SIGN
00001000                            95      * JSR PRINT_HASH_SIGN
00001000                            96      * MOVE.B #$01, -(SP)
00001000                            97      * JSR PRINT_DATA
00001000                            98      * ADDQ.L #$2,SP
00001000                            99      * MOVE.B #$02, -(SP)
00001000                           100      * JSR PRINT_DATA
00001000                           101      * ADDQ.L #$2, SP
00001000                           102      * MOVE.B #$03, -(SP)
00001000                           103      * JSR PRINT_DATA
00001000                           104      * ADDQ.L #$2,SP
00001000                           105   
00001000  4207                     106      CLR.B D7 ; use d7 for counter main loop
00001002  207C 00009100            107      MOVE.L #START_ADDRESS, A0 
00001008  2C7C 00007006            108      MOVE.L #OPCODE_ADDRESS, A6  * USE FOR TESTING ORI ATM
0000100E  20BC 00010000            109      MOVE.L #$010000, (A0)
00001014                           110  LOOP_START:
00001014  2E7C 00008000            111      MOVE.L #STACK_ADDRESS, SP
0000101A  2F39 00009100            112      MOVE.L (START_ADDRESS), -(SP)
00001020  2F3C 00007006            113      MOVE.L #OPCODE_ADDRESS, -(SP)
00001026  4EB9 0000167A            114      JSR FETCH_OPCODES
0000102C  508F                     115      ADDQ.L #8, SP
0000102E  4EB9 000010B4            116      JSR PRINT_TAB
00001034  4EB9 00001188            117      JSR PRINT_PC
0000103A  207C 00007006            118      MOVE.L #OPCODE_ADDRESS, A0
00001040  3F10                     119      MOVE.W (A0), -(SP)
00001042  4EB9 0000168E            120      JSR JUMP_TABLE
00001048                           121  FINISH_OPCODE:
00001048  4280                     122      CLR.L D0
0000104A  23FC 00000000 00009000   123      MOVE.L #$0, (RETURN_ADDRESS) ; SET ALL THE FLAG IN RETURN ADDRESS  TO ZERO 
00001054  3038 7008                124      MOVE.W (OFFSET_OPC_ADDRES), D0
00001058  D1B9 00009100            125      ADD.L D0, (START_ADDRESS)
0000105E  4EB9 0000111A            126      JSR PRINT_NEW_LINE
00001064  5207                     127      ADDQ.B #1, D7 
00001066  0C07 001D                128      CMPI.B #29, D7 
0000106A  6700 0004                129      BEQ CLR_SCREEN
0000106E  60A4                     130      BRA LOOP_START
00001070                           131  
00001070                           132  CLR_SCREEN:
00001070  43F9 00001EBF            133      LEA PROMT_INPUT_CONTINUE, A1 
00001076  103C 000D                134      MOVE.B #13, D0 
0000107A  4E4F                     135      TRAP #15 
0000107C  4207                     136      CLR.B D7
0000107E  103C 0005                137      MOVE.B #5, D0 
00001082  4E4F                     138      TRAP #15 
00001084  0C01 000D                139      CMPI.B #$0D, D1 
00001088  678A                     140      BEQ LOOP_START
0000108A  6000 0002                141      BRA END_MAIN
0000108E                           142  
0000108E                           143  * Put program code here
0000108E                           144  MAIN:
0000108E                           145  
0000108E                           146  END_MAIN:
0000108E  103C 0009                147      MOVE.B #9, D0
00001092  4E4F                     148      TRAP #15
00001094  103C 000E                149      MOVE.B #14,D0
00001098  4E4F                     150      TRAP #15
0000109A                           151  * get user input 
0000109A                           152  GET_INPUT:
0000109A  43F9 00001E63            153      LEA PROMT_INPUT_START, A1
000010A0  103C 000D                154      MOVE.B #13, D0
000010A4  4E4F                     155      TRAP #15
000010A6  227C 00002000            156      MOVEA.L #$2000,A1
000010AC  103C 0002                157      MOVE.B #2, D0
000010B0  4E4F                     158      TRAP #15
000010B2                           159  END_GET_INPUT:
000010B2  4E75                     160      RTS   
000010B4                           161  
000010B4                           162  *--------------------------------------------------------------------
000010B4                           163  * PRINT_TAB 
000010B4                           164  PRINT_TAB: 
000010B4  227C 00007010            165      MOVE.L #OUTPUT_ADDRESS, A1
000010BA  22FC 20202020            166      MOVE.L #'    ', (A1)+
000010C0  12FC 0000                167      MOVE.B #0, (A1)+
000010C4  227C 00007010            168      MOVE.L #OUTPUT_ADDRESS, A1
000010CA                           169  END_PRINT_TAB:
000010CA  103C 000E                170      MOVE.B #14, D0
000010CE  4E4F                     171      TRAP #15
000010D0  4E75                     172      RTS
000010D2                           173  *--------------------------------------------------------------------
000010D2                           174  * PRINT_COMMA
000010D2                           175  PRINT_COMMA:
000010D2  227C 00007010            176      MOVE.L #OUTPUT_ADDRESS, A1
000010D8  32FC 2C20                177      MOVE.W #', ', (A1)+
000010DC  12BC 0000                178      MOVE.B #0, (A1)
000010E0  5589                     179      SUBQ.L #2, A1
000010E2                           180  END_PRINT_COMMA:
000010E2  103C 000E                181      MOVE.B #14, D0
000010E6  4E4F                     182      TRAP #15
000010E8  4E75                     183      RTS
000010EA                           184  *--------------------------------------------------------------------
000010EA                           185  * PRINT_DOLLAR_SIGN
000010EA                           186  PRINT_DOLLAR_SIGN:
000010EA  227C 00007010            187      MOVE.L #OUTPUT_ADDRESS, A1
000010F0  12BC 0024                188      MOVE.B #'$', (A1)
000010F4  137C 0000 0001           189      MOVE.B #0, 1(A1) 
000010FA                           190  END_PRINT_DOLLAR_SIGN:
000010FA  103C 000E                191      MOVE.B #14, D0
000010FE  4E4F                     192      TRAP #15
00001100  4E75                     193      RTS
00001102                           194  *--------------------------------------------------------------------
00001102                           195  * PRINT_HASH_SIGN
00001102                           196  PRINT_HASH_SIGN:
00001102  227C 00007010            197      MOVE.L #OUTPUT_ADDRESS, A1
00001108  12BC 0023                198      MOVE.B #'#', (A1)
0000110C  137C 0000 0001           199      MOVE.B #0, 1(A1) 
00001112                           200  END_PRINT_HASH_SIGN:
00001112  103C 000E                201      MOVE.B #14, D0
00001116  4E4F                     202      TRAP #15
00001118  4E75                     203      RTS
0000111A                           204  
0000111A                           205  *--------------------------------------------------------------------
0000111A                           206  * PRINT A NEW LINE 
0000111A                           207  PRINT_NEW_LINE: 
0000111A  227C 00007010            208      MOVE.L #OUTPUT_ADDRESS, A1
00001120  12FC 000D                209      MOVE.B #CR, (A1)+ 
00001124  12FC 000A                210      MOVE.B #LF, (A1)+
00001128  12FC 0000                211      MOVE.B #0, (A1)+
0000112C                           212  END_PRINT_NEW_LINE:
0000112C  227C 00007010            213      MOVE.L #OUTPUT_ADDRESS, A1
00001132  103C 000E                214      MOVE.B #14, D0
00001136  4E4F                     215      TRAP #15 
00001138  4E75                     216      RTS
0000113A                           217  
0000113A                           218  
0000113A                           219  
0000113A                           220  
0000113A                           221  *--------------------------------------------------------------------
0000113A                           222  * PRINT DATA TYPE FOR EXAMPLE: .B .W .L
0000113A                           223  * PARAMETERS: 
0000113A                           224   *   1- (4(sp)): WHAT DATA TYPE (1 BYTE)
0000113A                           225  *       00 - byte
0000113A                           226  *       01 - word
0000113A                           227  *       10 - long
0000113A                           228  * NOTE:
0000113A                           229  *   A1 USE FOR PRINT
0000113A                           230  *   d1 USES TO STORE DATA TYPE OF PARAMETER ABOVE
0000113A                           231  PRINT_DATA:
0000113A  227C 00007010            232      MOVE.L #OUTPUT_ADDRESS, A1
00001140  122F 0004                233      MOVE.B 4(SP), D1
00001144  0C01 0000                234      CMPI.B #$00, D1
00001148  6700 001A                235      BEQ PRINT_BYTE
0000114C  0C01 0001                236      CMPI.B #$01, D1
00001150  6700 001E                237      BEQ PRINT_WORD
00001154  0C01 0002                238      CMPI.B #$02, D1 
00001158  6700 0022                239      BEQ PRINT_LONG
0000115C                           240  END_PRINT_DATA:
0000115C  103C 000E                241      MOVE.B #14, D0
00001160  4E4F                     242      TRAP #15
00001162  4E75                     243      RTS 
00001164                           244  
00001164                           245  PRINT_BYTE: 
00001164  32BC 2E42                246      MOVE.W #'.B', (A1)
00001168  137C 0000 0002           247      MOVE.B #0, 2(A1)
0000116E  60EC                     248      BRA END_PRINT_DATA
00001170                           249  PRINT_WORD: 
00001170  32BC 2E57                250      MOVE.W #'.W', (A1)
00001174  137C 0000 0002           251      MOVE.B #0, 2(A1)
0000117A  60E0                     252      BRA END_PRINT_DATA
0000117C                           253  PRINT_LONG: 
0000117C  32BC 2E4C                254      MOVE.W #'.L', (A1)
00001180  137C 0000 0002           255      MOVE.B #0, 2(A1)
00001186  60D4                     256      BRA END_PRINT_DATA
00001188                           257  *--------------------------------------------------------------------
00001188                           258  * PRINT CURRENT PROGRAM COUNTER IN HEX 
00001188                           259  * WILL GET THE CURRENT PC IN START ADDRESS AND PRINT IT OUT
00001188                           260  * PARAMETERS:
00001188                           261  *   NONE
00001188                           262  * NOTES: 
00001188                           263  * A1 USE TO PRINT 
00001188                           264  * D0 FOR TRAP AND CONVERSION 
00001188                           265  PRINT_PC:
00001188  2039 00009100            266      MOVE.L (START_ADDRESS), D0 
0000118E  2F00                     267      MOVE.L D0, -(SP)
00001190  2F3C 00000008            268      MOVE.L #HEX_TO_ASCII_LONG, -(SP)
00001196  4EB9 00001526            269      JSR PRINT_HEX 
0000119C  508F                     270      ADDQ.L #8, SP 
0000119E  4EB8 10B4                271      JSR PRINT_TAB
000011A2  4EB8 10B4                272      JSR PRINT_TAB 
000011A6  4EB8 10B4                273      JSR PRINT_TAB
000011AA  4E75                     274      RTS 
000011AC                           275  
000011AC                           276  CHECK_SUPPORT_REGISTER:
000011AC  33FC 0000 00009000       277      MOVE.W #0, (RETURN_ADDRESS) ; reset return address 
000011B4  322F 0004                278      MOVE.W 4(SP), D1 
000011B8  3801                     279      MOVE.W D1,D4 
000011BA                           280     ; check to make sure we dont support the register 
000011BA  =00000028                281  DISPLACEMENT_REGISTER EQU %00101000
000011BA  =00000030                282  ADDRESS_WITH_INDEX EQU %00110000
000011BA  =0000003B                283  COUNTER_INDEX EQU %00111011 
000011BA  =0000003A                284  COUNTER_DISPLACEMENT EQU %00111010
000011BA  C83C 0038                285      AND.B #%00111000, D4 
000011BE  0C04 0028                286      CMPI.B #DISPLACEMENT_REGISTER, D4
000011C2  6700 0056                287      BEQ UNSUPPORT_REGISTER
000011C6  0C04 0030                288      CMPI.B #ADDRESS_WITH_INDEX, D4
000011CA  6700 004E                289      BEQ UNSUPPORT_REGISTER 
000011CE  3801                     290      MOVE D1, D4
000011D0  C83C 003F                291      AND.B #%00111111,D4
000011D4  0C04 003B                292      CMPI.B #COUNTER_INDEX, D4
000011D8  6700 0040                293      BEQ UNSUPPORT_REGISTER 
000011DC  0C04 003A                294      CMPI.B #COUNTER_DISPLACEMENT, D4
000011E0  6700 0038                295      BEQ UNSUPPORT_REGISTER
000011E4  4E75                     296      RTS
000011E6                           297  
000011E6                           298  UNSUPPORT_OPCODE: 
000011E6  267C 00009000            299      MOVE.L #RETURN_ADDRESS, A3
000011EC  4EB9 00001DBE            300      JSR PRINT_UNSUPPORTED
000011F2  4EB8 10B4                301      JSR PRINT_TAB 
000011F6  4EB8 1102                302      JSR PRINT_HASH_SIGN 
000011FA  4EB8 10EA                303      JSR PRINT_DOLLAR_SIGN 
000011FE  4281                     304      CLR.L D1 
00001200  3238 7006                305      MOVE.W (OPCODE_ADDRESS), D1 
00001204  2F01                     306      MOVE.L D1, -(SP) 
00001206  2F3C 00000004            307      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
0000120C  4EB9 00001526            308      JSR PRINT_HEX 
00001212  508F                     309      ADDQ.L #8, SP 
00001214  36BC 0002                310      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
00001218  4E75                     311      RTS 
0000121A                           312  UNSUPPORT_REGISTER:
0000121A  =00000002                313  C_UNSUPPORT_REGISTER EQU $2
0000121A  267C 00009000            314      MOVE.L #RETURN_ADDRESS, A3
00001220  4EB9 00001DBE            315      JSR PRINT_UNSUPPORTED
00001226  4EB8 10B4                316      JSR PRINT_TAB 
0000122A  4EB8 1102                317      JSR PRINT_HASH_SIGN 
0000122E  4EB8 10EA                318      JSR PRINT_DOLLAR_SIGN 
00001232  4281                     319      CLR.L D1 
00001234  3238 7006                320      MOVE.W (OPCODE_ADDRESS), D1 
00001238  2F01                     321      MOVE.L D1, -(SP) 
0000123A  2F3C 00000004            322      MOVE.L #HEX_TO_ASCII_WORD, -(SP)
00001240  4EB9 00001526            323      JSR PRINT_HEX 
00001246  508F                     324      ADDQ.L #8, SP 
00001248  36BC 0002                325      MOVE.W #C_UNSUPPORT_REGISTER, (A3)
0000124C  5478 7008                326      ADDQ.W #2, (OFFSET_OPC_ADDRES)
00001250  4E75                     327      RTS 
00001252                           328  
00001252                           329  
00001252                           330  *--------------------------------------------------------------------
00001252                           331  * PRINT_REGISTER
00001252                           332  * PARAMETERS: what register 1 byte 4 msb indicate dn(0) or an(1), 4 lsb for number of that register
00001252                           333  * 1 - (6(sp)) 3 bits msb for mode, 3 bits lsb for which register
00001252                           334  * 2 - (4(sp)) byte value for how many byte for immediate value
00001252                           335  *      0 for a byte value
00001252                           336  *      1 for word value
00001252                           337  *      2 for long value 
00001252                           338  * RETURN 2 IN RETURN ADDRESS IF THE MODE DOESNT SUPPORT 
00001252                           339  * NOTE: 
00001252                           340  *   D1 FOR STORE THE PARAMETER
00001252                           341  *   D2 FOR STORE HOW MANY BYTE FOR IMMEDIATE VALUE, AND ABSOLUTE VALUE
00001252                           342  PRINT_REGISTER:
00001252  322F 0006                343     MOVE.W 6(SP), D1 
00001256                           344     
00001256  3401                     345     MOVE.W D1,D2
00001258  0C01 003C                346     CMPI.B #%00111100, D1
0000125C  6700 00A2                347     BEQ PRINT_IMMEDIATE
00001260  0C01 0038                348     CMPI.B #%00111000, D1
00001264  6700 0160                349     BEQ PRINT_AB_SHORT
00001268  0C01 0039                350     CMPI.B #%00111001, D1
0000126C  6700 01BA                351     BEQ PRINT_AB_LONG 
00001270                           352  
00001270  1401                     353     MOVE.B D1,D2
00001272  C43C 0038                354     AND.B #%00111000, D2
00001276  0C02 0010                355     CMPI.B #%00010000, D2
0000127A  6700 020E                356     BEQ PRINT_OPEN
0000127E                           357  
0000127E  1401                     358     MOVE.B D1,D2
00001280  C43C 0038                359     AND.B #%00111000, D2
00001284  0C02 0018                360     CMPI.B #%00011000, D2
00001288  6700 0200                361     BEQ PRINT_OPEN
0000128C                           362  
0000128C  1401                     363     MOVE.B D1,D2
0000128E  C43C 0038                364     AND.B #%00111000, D2
00001292  0C02 0020                365     CMPI.B #%00100000, D2
00001296  6700 020C                366     BEQ PRINT_MINUS_OPEN
0000129A                           367  
0000129A                           368  CONTINUE_PRINT_REGISTER:
0000129A  1401                     369     MOVE.B D1,D2
0000129C  C43C 0038                370     AND.B #%00111000, D2
000012A0  0C02 0000                371     CMPI.B #%00000000, D2
000012A4  6700 024C                372     BEQ PRINT_D
000012A8                           373  
000012A8  1401                     374     MOVE.B D1,D2
000012AA  C43C 0038                375     AND.B #%00111000, D2
000012AE  0C02 0008                376     CMPI.B #%00001000, D2
000012B2  6700 0258                377     BEQ PRINT_A 
000012B6                           378  
000012B6                           379  CONTINUE_PRINT_RE_NUMBER:
000012B6  227C 00007010            380      MOVE.L #OUTPUT_ADDRESS, A1
000012BC  1401                     381      MOVE.B D1,D2
000012BE  C43C 0007                382      AND.B #%00000111, D2
000012C2  0602 0030                383      ADD.B #48, D2 
000012C6  1282                     384      MOVE.B D2, (A1) 
000012C8  137C 0000 0001           385      MOVE.B #$0, 1(A1)
000012CE  103C 000E                386      MOVE.B #14, D0
000012D2  4E4F                     387      TRAP #15
000012D4                           388  DONE_PRINT_NUMBER:
000012D4  1401                     389     MOVE.B D1,D2
000012D6  C43C 0038                390     AND.B #%00111000, D2
000012DA  0C02 0010                391     CMPI.B #%00010000, D2
000012DE  6700 01DE                392     BEQ PRINT_CLOSE
000012E2                           393  
000012E2  1401                     394     MOVE.B D1,D2
000012E4  C43C 0038                395     AND.B #%00111000, D2
000012E8  0C02 0018                396     CMPI.B #%00011000, D2
000012EC  6700 01EA                397     BEQ PRINT_CLOSE_PLUS
000012F0                           398  
000012F0  1401                     399     MOVE.B D1,D2
000012F2  C43C 0038                400     AND.B #%00111000, D2
000012F6  0C02 0020                401     CMPI.B #%00100000, D2
000012FA  6700 01C2                402     BEQ PRINT_CLOSE
000012FE                           403  
000012FE                           404  END_PRINT_REGISTER:
000012FE  4E75                     405      RTS
00001300                           406  
00001300                           407  PRINT_IMMEDIATE:
00001300  227C 00007010            408      MOVE.L #OUTPUT_ADDRESS, A1
00001306  12BC 0023                409      MOVE.B #'#', (A1)
0000130A  137C 0000 0001           410      MOVE.B #$0, 1(A1)
00001310  103C 000E                411      MOVE.B #14, D0
00001314  4E4F                     412      TRAP #15
00001316  4EB8 10EA                413      JSR PRINT_DOLLAR_SIGN
0000131A  3038 7008                414      MOVE.W (OFFSET_OPC_ADDRES),D0
0000131E  342F 0004                415      MOVE.W 4(SP), D2 ; HOW MANY BYTE
00001322  0C02 0000                416      CMPI.B #$00, D2
00001326  6700 0014                417      BEQ PRINT_IMMEDIATE_BYTE ; THIS CASE NEVER HAPPEN BECAUSE IMMEDATE VALUE MINIMUM IS 16 bits
0000132A  0C02 0001                418      CMPI.B #$01, D2
0000132E  6700 0036                419      BEQ PRINT_IMMEDIATE_WORD
00001332  0C02 0002                420      CMPI.B #$02, D2
00001336  6700 005A                421      BEQ PRINT_IMMEDIATE_LONG
0000133A  60C2                     422      BRA END_PRINT_REGISTER
0000133C                           423  
0000133C                           424  PRINT_IMMEDIATE_BYTE:
0000133C  2479 00009100            425      MOVE.L (START_ADDRESS), A2
00001342  3432 0000                426      MOVE.W (A2, D0), D2 ; 
00001346  48E7 E0C0                427      MOVEM.L D0-D2/A0-A1, -(SP)
0000134A  2F02                     428      MOVE.L D2, -(SP)
0000134C  2F3C 00000004            429      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
00001352  4EB9 00001526            430      JSR PRINT_HEX
00001358  508F                     431       ADDQ.L #$08, SP
0000135A  4CDF 0307                432      MOVEM.L (SP)+, D0-D2/A0-A1
0000135E  5440                     433      ADDQ.W #$2, D0
00001360  31C0 7008                434      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001364  6098                     435      BRA END_PRINT_REGISTER
00001366                           436  PRINT_IMMEDIATE_WORD:
00001366  2479 00009100            437      MOVE.L (START_ADDRESS), A2
0000136C  3432 0000                438      MOVE.W (A2, D0), D2 ; 
00001370  48E7 E0C0                439      MOVEM.L D0-D2/A0-A1, -(SP)
00001374  2F02                     440      MOVE.L D2, -(SP)
00001376  2F3C 00000004            441      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
0000137C  4EB9 00001526            442      JSR PRINT_HEX
00001382  508F                     443      ADDQ.L #$08, SP
00001384  4CDF 0307                444      MOVEM.L (SP)+, D0-D2/A0-A1
00001388  5440                     445      ADDQ.W #$2, D0
0000138A  31C0 7008                446      MOVE.W D0, (OFFSET_OPC_ADDRES)
0000138E  6000 FF6E                447      BRA END_PRINT_REGISTER
00001392                           448  PRINT_IMMEDIATE_LONG:
00001392  3038 7008                449      MOVE.W (OFFSET_OPC_ADDRES),D0
00001396  2479 00009100            450      MOVE.L (START_ADDRESS), A2
0000139C  2432 0000                451      MOVE.L (A2, D0), D2 ; 
000013A0  48E7 E0C0                452      MOVEM.L D0-D2/A0-A1, -(SP)
000013A4  2F02                     453      MOVE.L D2, -(SP)
000013A6                           454      ; offset to get immediate value from opcode
000013A6  3038 7008                455      MOVE.W (OFFSET_OPC_ADDRES),D0
000013AA  2F3C 00000008            456      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
000013B0  4EB9 00001526            457      JSR PRINT_HEX
000013B6  508F                     458      ADDQ.L #$08, SP
000013B8  4CDF 0307                459      MOVEM.L (SP)+, D0-D2/A0-A1
000013BC  5840                     460      ADDQ.W #$4, D0
000013BE  31C0 7008                461      MOVE.W D0, (OFFSET_OPC_ADDRES)
000013C2  6000 FF3A                462      BRA END_PRINT_REGISTER
000013C6                           463  PRINT_AB_SHORT:
000013C6  227C 00007010            464      MOVE.L #OUTPUT_ADDRESS, A1
000013CC  32BC 2824                465      MOVE.W #'($', (A1)
000013D0  137C 0000 0002           466      MOVE.B #0, 2(A1)
000013D6  103C 000E                467      MOVE.B #14, D0
000013DA  4E4F                     468      TRAP #15
000013DC                           469      ; offset to get immediate value from opcode
000013DC  2479 00009100            470      MOVE.L (START_ADDRESS), A2
000013E2  3038 7008                471      MOVE.W (OFFSET_OPC_ADDRES),D0
000013E6  3432 0000                472      MOVE.W (A2, D0), D2 ; 
000013EA  48E7 E0C0                473      MOVEM.L D0-D2/A0-A1, -(SP)
000013EE  2F02                     474      MOVE.L D2, -(SP)
000013F0  2F3C 00000004            475      MOVE.L #HEX_TO_ASCII_WORD, -(SP) 
000013F6  4EB9 00001526            476      JSR PRINT_HEX
000013FC  508F                     477      ADDQ.L #$08, SP
000013FE  4CDF 0307                478      MOVEM.L (SP)+, D0-D2/A0-A1
00001402  5440                     479      ADDQ.W #$2, D0
00001404  31C0 7008                480      MOVE.W D0, (OFFSET_OPC_ADDRES)
00001408                           481      ; print close parathesis with W
00001408  227C 00007010            482      MOVE.L #OUTPUT_ADDRESS, A1
0000140E  32BC 292E                483      MOVE.W #').', (A1)
00001412  137C 0057 0002           484      MOVE.B #'W',2(A1)
00001418  137C 0000 0003           485      MOVE.B #0, 3(A1)
0000141E  103C 000E                486      MOVE.B #14, D0
00001422  4E4F                     487      TRAP #15
00001424  6000 FED8                488      BRA END_PRINT_REGISTER
00001428                           489  PRINT_AB_LONG:
00001428                           490      ;print open parathesis
00001428  227C 00007010            491      MOVE.L #OUTPUT_ADDRESS, A1
0000142E  32BC 2824                492      MOVE.W #'($', (A1)
00001432  137C 0000 0002           493      MOVE.B #0, 2(A1)
00001438  103C 000E                494      MOVE.B #14, D0
0000143C  4E4F                     495      TRAP #15
0000143E                           496      ; print value in long
0000143E  2479 00009100            497      MOVE.L (START_ADDRESS), A2
00001444                           498      ; offset to get value from opcode
00001444  3038 7008                499      MOVE.W (OFFSET_OPC_ADDRES),D0
00001448  2432 0000                500      MOVE.L (A2, D0), D2 ; 
0000144C  48E7 E0C0                501      MOVEM.L D0-D2/A0-A1, -(SP)
00001450  2F02                     502      MOVE.L D2, -(SP)
00001452  2F3C 00000008            503      MOVE.L #HEX_TO_ASCII_LONG, -(SP) 
00001458  4EB9 00001526            504      JSR PRINT_HEX
0000145E  508F                     505      ADDQ.L #$08, SP
00001460  4CDF 0307                506      MOVEM.L (SP)+, D0-D2/A0-A1
00001464  5840                     507      ADDQ.W #$4, D0
00001466  31C0 7008                508      MOVE.W D0, (OFFSET_OPC_ADDRES) ; align offset 
0000146A                           509      ; print close parathesis with W
0000146A  227C 00007010            510      MOVE.L #OUTPUT_ADDRESS, A1
00001470  32BC 292E                511      MOVE.W #').', (A1)
00001474  137C 004C 0002           512      MOVE.B #'L',2(A1)
0000147A  137C 0000 0003           513      MOVE.B #0, 3(A1)
00001480  103C 000E                514      MOVE.B #14, D0
00001484  4E4F                     515      TRAP #15
00001486  6000 FE76                516      BRA END_PRINT_REGISTER
0000148A                           517  
0000148A                           518  PRINT_OPEN:
0000148A  227C 00007010            519      MOVE.L #OUTPUT_ADDRESS, A1
00001490  12BC 0028                520      MOVE.B #'(', (A1)
00001494  137C 0000 0001           521      MOVE.B #$0, 1(A1)
0000149A  103C 000E                522      MOVE.B #14, D0
0000149E  4E4F                     523      TRAP #15
000014A0  6000 006A                524      BRA PRINT_A
000014A4                           525  PRINT_MINUS_OPEN: 
000014A4  227C 00007010            526      MOVE.L #OUTPUT_ADDRESS, A1
000014AA  32BC 2D28                527      MOVE.W #'-(', (A1)
000014AE  137C 0000 0002           528      MOVE.B #$0, 2(A1)
000014B4  103C 000E                529      MOVE.B #14, D0
000014B8  4E4F                     530      TRAP #15
000014BA  6000 0050                531      BRA PRINT_A
000014BE                           532  
000014BE                           533  PRINT_CLOSE:
000014BE  227C 00007010            534      MOVE.L #OUTPUT_ADDRESS, A1
000014C4  12BC 0029                535      MOVE.B #')', (A1)
000014C8  137C 0000 0001           536      MOVE.B #$0, 1(A1)
000014CE  103C 000E                537      MOVE.B #14, D0
000014D2  4E4F                     538      TRAP #15
000014D4  6000 FE28                539      BRA END_PRINT_REGISTER
000014D8                           540  PRINT_CLOSE_PLUS:
000014D8  227C 00007010            541      MOVE.L #OUTPUT_ADDRESS, A1
000014DE  32BC 292B                542      MOVE.W #')+', (A1)
000014E2  137C 0000 0002           543      MOVE.B #$0, 2(A1)
000014E8  103C 000E                544      MOVE.B #14, D0
000014EC  4E4F                     545      TRAP #15
000014EE  6000 FE0E                546      BRA END_PRINT_REGISTER
000014F2                           547  PRINT_D:
000014F2  227C 00007010            548      MOVE.L #OUTPUT_ADDRESS, A1 
000014F8  12BC 0044                549      MOVE.B #'D', (A1)
000014FC  137C 0000 0001           550      MOVE.B #$0, 1(A1)
00001502  103C 000E                551      MOVE.B #14, D0
00001506  4E4F                     552      TRAP #15
00001508  6000 FDAC                553      BRA CONTINUE_PRINT_RE_NUMBER
0000150C                           554  PRINT_A: 
0000150C  227C 00007010            555      MOVE.L #OUTPUT_ADDRESS, A1 
00001512  12BC 0041                556      MOVE.B #'A', (A1)
00001516  137C 0000 0001           557      MOVE.B #$0, 1(A1)
0000151C  103C 000E                558      MOVE.B #14, D0
00001520  4E4F                     559      TRAP #15
00001522  6000 FD92                560      BRA CONTINUE_PRINT_RE_NUMBER
00001526                           561  
00001526                           562  *-----------------------------------------------------------
00001526                           563  * PRINT HEX 
00001526                           564  * PARAMETERS:
00001526                           565  *   1- (8(SP)): VALUE IN HEX
00001526                           566  *   2- (4(SP)): HOW MANY BYTES
00001526                           567  * RETURN NULL
00001526                           568  *-----------------------------------------------------------
00001526                           569  PRINT_HEX:
00001526  6000 0016                570      BRA HEX_TO_ASCII
0000152A                           571  GET_ASCII_FROM_HEX:
0000152A  227C 00007010            572      MOVE.L #OUTPUT_ADDRESS, A1
00001530  103C 000E                573      MOVE.B #14, D0
00001534  4E4F                     574      TRAP #15
00001536  227C 00007010            575      MOVE.L #OUTPUT_ADDRESS, A1
0000153C                           576  END_PRINT_HEX:
0000153C  4E75                     577      RTS
0000153E                           578  *-----------------------------------------------------------
0000153E                           579  * CONVERT HEX TO ASCII 
0000153E                           580  * PARAMATERS:
0000153E                           581  *   1- (8(SP)): VALUE IN HEX
0000153E                           582  *   2- (4(SP)): HOW MANY BYTES
0000153E                           583  * RETURN:
0000153E                           584  *   8 CHARS IN ASCII, STORE IN RETURN ADDRESS (a1)
0000153E                           585  * D0 STORES HEX VALUE
0000153E                           586  * D4 HOW MAY BYTES TO DISPLAY (2-byte 4-hex 8-long)
0000153E                           587  * D1 COUNT LOOP
0000153E                           588  * D2 CONVERT TO ASCII
0000153E                           589  * D3 USE TO CALCULATE SHIFT
0000153E                           590  HEX_TO_ASCII: 
0000153E  202F 0008                591      MOVE.L 8(SP), D0 
00001542  282F 0004                592      MOVE.L 4(SP), D4
00001546  0C44 0004                593      CMPI #HEX_TO_ASCII_WORD, D4 
0000154A  6700 004E                594      BEQ HEX_TO_ASCII_SWAP
0000154E  0C44 0002                595      CMPI #HEX_TO_ASCII_BYTE, D4
00001552  6700 EAAE                596      BEQ HEX_TO_ASCII_BYTE
00001556                           597  HEX2ASCII_DONE_CONVERT:
00001556  4201                     598      CLR.B D1
00001558  227C 00007010            599      MOVE.L #OUTPUT_ADDRESS, A1
0000155E  =0000000F                600  HEX_MASKING EQU $0000000F
0000155E  =00000002                601  HEX_TO_ASCII_BYTE EQU $02
0000155E  =00000004                602  HEX_TO_ASCII_WORD EQU $04
0000155E  =00000008                603  HEX_TO_ASCII_LONG EQU $08
0000155E                           604  
0000155E                           605  HEX_TO_ASCII_LOOP:
0000155E  B204                     606      CMP.B D4, D1
00001560  6700 0032                607      BEQ END_HEX_TO_ASCII ; branch if d1 > d4
00001564                           608  
00001564  E998                     609      ROL.L #4, D0 ; shift left 4 bits to get a hex value
00001566  2600                     610      MOVE.L D0,D3 ; copy the value to mask
00001568  C6BC 0000000F            611      AND.L #HEX_MASKING, D3  ; mask
0000156E                           612  
0000156E  0C03 000A                613      CMPI.B #10, D3 ; compare masked value with 10 if less than than convert to ascii number
00001572  6D00 000C                614      BLT HEX_TO_ASCII_NUMBER ; let convert to number ascii
00001576                           615  
00001576  0C03 0048                616      CMPI.B #72, D3 ; compare masked value with F letter in ascii
0000157A  6D00 000E                617      BLT HEX_TO_ASCII_LETTER
0000157E                           618  
0000157E  60DE                     619      BRA HEX_TO_ASCII_LOOP
00001580                           620  HEX_TO_ASCII_NUMBER:
00001580  0603 0030                621      ADD.B #48, D3  ; convert number to letter
00001584  12C3                     622      MOVE.B D3, (A1)+ ; push to return memory
00001586  5201                     623      ADDQ.B #$1, D1 ; add for loop count
00001588  60D4                     624      BRA HEX_TO_ASCII_LOOP ; loop back
0000158A                           625  HEX_TO_ASCII_LETTER:
0000158A  0603 0037                626      ADD.B #55, D3 ; convert A-F in ascii
0000158E  12C3                     627      MOVE.B D3, (A1)+ ; push to return memory
00001590  5201                     628      ADDQ.B #$1, D1 ; add to for loop count
00001592  60CA                     629      BRA HEX_TO_ASCII_LOOP ;loop back
00001594                           630  END_HEX_TO_ASCII:
00001594  12FC 0000                631      MOVE.B #0, (A1)+ ; add null terminated value
00001598  6090                     632      BRA GET_ASCII_FROM_HEX
0000159A                           633  HEX_TO_ASCII_SWAP:
0000159A  4840                     634      SWAP D0
0000159C  60B8                     635      BRA HEX2ASCII_DONE_CONVERT
0000159E                           636     
0000159E                           637  HEX_TO_ASCII_ROR:
0000159E  E098                     638      ROR.L #$08, D0
000015A0  60B4                     639      BRA HEX2ASCII_DONE_CONVERT
000015A2                           640  
000015A2                           641  
000015A2                           642  *-----------------------------------------------------------
000015A2                           643  * CHECK IF THE VALUE IN HEX IS ODD 
000015A2                           644  * PARAMETER;* 1(4(SP))- HEX VALUE (LONG)
000015A2                           645  * RETURN:
000015A2                           646  *   0: IF IT IS EVEN
000015A2                           647  *   1: IF IT IS ODD
000015A2                           648  * NOTE:
000015A2                           649  *   A0 IS FOR RETURN ADDRESS
000015A2                           650  *   D0 IS FOR HEX VALUE
000015A2                           651  CHECK_VALUE_IS_ODD:
000015A2  =00000000                652  VALUE_IS_EVEN EQU $0
000015A2  =00000001                653  VALUE_IS_ODD EQU $1
000015A2  41F9 00009000            654      LEA RETURN_ADDRESS, A0
000015A8  202F 0004                655      MOVE.L 4(SP), D0
000015AC  C0BC 0000FFFF            656      AND.L #$0000FFFF, D0
000015B2  80FC 0002                657      DIVU.W #2, D0
000015B6  4840                     658      SWAP D0      
000015B8  0C40 0000                659      CMPI.W #0, D0
000015BC  6700 000C                660      BEQ CHECK_VALUE_IS_ODD_FAILED
000015C0  30BC 0001                661      MOVE.W #VALUE_IS_ODD, (A0)
000015C4  6000 0002                662      BRA END_CHECK_VALUE_IS_ODD
000015C8                           663  END_CHECK_VALUE_IS_ODD:   
000015C8  4E75                     664      RTS
000015CA                           665  
000015CA                           666  CHECK_VALUE_IS_ODD_FAILED:
000015CA  30BC 0000                667      MOVE.W #VALUE_IS_EVEN, (A0)
000015CE  60F8                     668      BRA END_CHECK_VALUE_IS_ODD
000015D0                           669  *-----------------------------------------------------------
000015D0                           670  * CONVERT ASCII TO HEX
000015D0                           671  * PARAMETERS:
000015D0                           672  *   1. LOCATION OF THE ASCII
000015D0                           673  *   2. LENGTH OF THE ASCII
000015D0                           674  *   3. MAXIMUM LENGTH (hex/ byte / long)
000015D0                           675  * RETURN:
000015D0                           676  * [0=FAILED](2BYTE) (BECAUSE LENGTH > MAXIMUM_LENGTH)
000015D0                           677  * [1=OK](2BYTE)[VALUE IN HEX(4BYTES)]
000015D0                           678  * [2= FAILED](2BYTE)(BEACUSE IT IS NOT A NUMBER IN HEX)
000015D0                           679  * NOTE:
000015D0                           680  *    D0 FOR LENGTH OF ASCII
000015D0                           681  *    D1 FOR LOOPING
000015D0                           682  ; CURRENT INDEX
000015D0                           683  *    D2 FOR THE VALUE IN ASCII OF THE DATA
000015D0                           684  *    D3 FOR CONVERT FINAL RESULT
000015D0                           685  *    D4 FOR CALCULATE NUMBER OF BIT TO SHIFT
000015D0                           686  *    A0 LOCATION OF THE DATA   
000015D0                           687  *    A2 CURRENT POINTER AT CONVERT_HEX_RETURN_ADDRESS
000015D0                           688  ASCII_TO_HEX:
000015D0  =00000001                689  ASCII_TO_HEX_RETURN_OK EQU $1
000015D0  45F9 00009000            690      LEA RETURN_ADDRESS, A2
000015D6  4252                     691      CLR.W (A2)
000015D8  42AA 0002                692      CLR.L 2(A2)
000015DC  206F 000C                693      MOVE.L 12(SP),A0
000015E0                           694   ; LOCATION OF THE DATA
000015E0  202F 0008                695      MOVE.L 8(SP), D0  ; LENGTH OF ASCII
000015E4  222F 0004                696      MOVE.L 4(SP), D1  ; MAX LENGTH
000015E8  B280                     697      CMP.L D0,D1 ; CHECK IF THE LENGTH IS GREATER THAN MAX LENGTH
000015EA  6D00 0076                698      BLT ASCII_TO_HEX_FAILED_0
000015EE  4281                     699      CLR.L D1 ; FOR LOOPING
000015F0                           700  ASCII_TO_HEX_LOOP:
000015F0  B081                     701     CMP.L D1, D0 ;COMPARE FOR LOOPING
000015F2  6700 0068                702     BEQ ASCII_TO_HEX_END_LOOP
000015F6                           703     ; D2 USE FOR STORE DATA 
000015F6  1418                     704      MOVE.B (A0)+, D2
000015F8  0C02 002F                705      CMPI.B #47, D2
000015FC                           706  ASCII_TO_HEX_CHECK_GT_0
000015FC  6E00 0006                707      BGT ASCII_TO_HEX_CHECK_LT_9 ; GREATER THAN LET COMPARE WITH LESS THAN 9
00001600  6000 0066                708      BRA ASCII_TO_HEX_FAILED_2 ;ERROR NOT A HEX VALUE
00001604                           709  ASCII_TO_HEX_CHECK_LT_9:
00001604  0C02 003A                710      CMPI.B #58, D2 ; CHECK IF IT IS LESS THAN NUMBER '9'
00001608  6D00 001E                711      BLT ASCII_TO_HEX_CONVERT_NUMBER ; LET CONVERT TO NUMBER
0000160C                           712      ; IF IT IT IS NOT GREATHER THAN ZERO AND LESS THAN 9 THAN CHECK A-F
0000160C  6000 0002                713      BRA ASCII_TO_HEX_CHECK_GT_A
00001610                           714  ASCII_TO_HEX_CHECK_GT_A:
00001610  0C02 0040                715      CMPI.B #64, D2
00001614  6E00 0006                716      BGT ASCII_TO_HEX_CHECK_LT_F ; LET CHECK IF IT IS LESS THAN F
00001618  6000 004E                717      BRA ASCII_TO_HEX_FAILED_2  ; OTHERWISE THE VALUE IS NOT IN HEX
0000161C                           718  ASCII_TO_HEX_CHECK_LT_F
0000161C  0C02 0047                719      CMPI.B #71, D2
00001620  6D00 0020                720      BLT ASCII_TO_HEX_CONVERT_LETTER
00001624  6000 0042                721      BRA ASCII_TO_HEX_FAILED_2
00001628                           722  * CONVERT THE NUMBER '0' - '9' IN HEX AND PUT IT IN D4
00001628                           723  ASCII_TO_HEX_CONVERT_NUMBER:
00001628  2800                     724       MOVE.L D0,D4 ; MOVE NUMBER OF LENGTH ASCII TO D4
0000162A  0402 0030                725       SUB.B #48, D2 ; MINUS THE NUMBER FROM ASCII TO GET IN HEX
0000162E  9881                     726       SUB.L D1,D4 ; TOTAL LENGTH - CURRENT INDEX OF VALUE IN A0
00001630  5344                     727       SUBQ #1, D4 ; SUB 1 TO FOR SHIFT
00001632  C8FC 0004                728       MULU #4, D4 ; MULTIPLY NUMBER OF BITS TO SHIFT
00001636  E9A2                     729       ASL.L D4, D2 ; SHIFT DATA
00001638  D5AA 0002                730       ADD.L D2, 2(A2) ; ADD THE DATA TO CURRENT VALUE IN A2 
0000163C  4282                     731       CLR.L D2
0000163E  5241                     732       ADDQ #1, D1  ; INCRASE LOOP COUNT INDEX
00001640  60AE                     733       BRA ASCII_TO_HEX_LOOP
00001642                           734  ASCII_TO_HEX_CONVERT_LETTER:
00001642  2800                     735      MOVE.L D0, D4
00001644  0402 0037                736      SUB.B #55, D2
00001648  9881                     737      SUB.L D1,D4
0000164A  5344                     738      SUBQ #1, D4
0000164C  C8FC 0004                739      MULU #4, D4
00001650  E9A2                     740      ASL.L D4,D2
00001652  D5AA 0002                741      ADD.L D2, 2(A2)
00001656  4282                     742      CLR.L D2 
00001658  5241                     743      ADDQ #1, D1
0000165A  6094                     744      BRA ASCII_TO_HEX_LOOP
0000165C                           745  ASCII_TO_HEX_END_LOOP:
0000165C  34BC 0001                746      MOVE.W #1, (A2)
00001660  4E75                     747      RTS
00001662                           748      
00001662                           749  ASCII_TO_HEX_FAILED_0:
00001662  34BC 0002                750      MOVE.W #2, (A2)
00001666  4E75                     751      RTS
00001668                           752  ASCII_TO_HEX_FAILED_2:
00001668  34BC 0002                753      MOVE.W #2, (A2)
0000166C  4E75                     754      RTS 
0000166E                           755  * THIS METHOD USES TO INCRASE START ADDRESS TO N VALUE 
0000166E                           756  * PARAMETERS:
0000166E                           757  *   1 (8(SP)) LONG VALUE: WHERE IS THE START ADDRESS
0000166E                           758  *   2 (4(SP)) LONG VALUE: HOW MANY OFFSET
0000166E                           759  * RETURN:
0000166E                           760  *   NULL
0000166E                           761  * NOTE:
0000166E                           762  *   A0 USE TO POINT TO THE ADDRESS
0000166E                           763  *   d1 USE TO MATH 
0000166E                           764  INCRASE_POINTER_START_ADDRESS: 
0000166E  206F 0008                765      MOVE.L 8(SP), A0
00001672  222F 0004                766      MOVE.L 4(SP), D1
00001676  D390                     767      ADD.L D1, (A0)
00001678  4E75                     768      RTS
0000167A                           769  
0000167A                           770  * FETCH 16 BIT FROM START_ADDRESS
0000167A                           771  * PARAMTERS: 
0000167A                           772  *   1- (8(SP)): WHERE IS OPCODE LOCATION
0000167A                           773  *   2- (4(SP)): WHERE TO STORE THE RESULT
0000167A                           774  * RETURN:
0000167A                           775  *   NULL
0000167A                           776  * NOTE:
0000167A                           777  *     A0 USE TO STORE THE OPCODE LOCATION
0000167A                           778  *     A2 USES TO RETURN THE OPCODE
0000167A                           779  FETCH_OPCODES:
0000167A  206F 0008                780      MOVE.L 8(SP), A0 ; LOCATION
0000167E  246F 0004                781      MOVE.L 4(SP), A2 ; OPCODE WILL BE RETURNED
00001682  3050                     782      MOVE.W (A0), A0
00001684  3488                     783      MOVE.W A0,(A2)
00001686  31FC 0002 7008           784      MOVE.W #$2, (OFFSET_OPC_ADDRES)
0000168C                           785  END_FETCH_OPCODES:
0000168C  4E75                     786      RTS
0000168E                           787  *------------------------------------------------------------------------------------------------------------------------------------------------------
0000168E                           788  * LETS DECODE
0000168E                           789  * jump table uses to jump to decode subroutine
0000168E                           790  * PARAMATERS:
0000168E                           791  * 1-(4(Sp)) Word - opcode
0000168E                           792  * NOTE: 
0000168E                           793  *   D1 USES TO STORE OPCODE
0000168E                           794  JUMP_TABLE:
0000168E  322F 0004                795      MOVE.W 4(SP), D1
00001692  4EB9 00001700            796      JSR RTS
00001698  4EB9 000016F6            797      JSR NOP
0000169E  4EB9 0000170A            798      JSR JSR
000016A4  4EB9 00001848            799      JSR ADD 
000016AA  4EB9 00001756            800      JSR LEA
000016B0  4EB9 00001B36            801      JSR OR
000016B6  4EB9 00001C04            802      JSR ORI
000016BC  4EB9 00001C5A            803      JSR EOR
000016C2  4EB9 00001A94            804      JSR NEG
000016C8  4EB9 0000170A            805      JSR JSR
000016CE  4EB9 000017C4            806      JSR ADDA
000016D4  4EB9 00001848            807      JSR ADD 
000016DA  4EB9 0000191A            808      JSR MOVEA 
000016E0  4EB9 000019D0            809      JSR MOVE
000016E6  4EB9 00001A94            810      JSR MOVEM 
000016EC  4EB9 00001AF8            811      JSR BRA
000016F2                           812  ; IF THE OPCODES DONT MATCH THE OPCODE ABOVE THAN PRINT DATA OPCODE
000016F2                           813  END_JUMP_TABLE:
000016F2  4EB8 11E6                814      JSR UNSUPPORT_OPCODE
000016F6                           815  
000016F6                           816  NOP:
000016F6                           817  * constant for NOP 
000016F6  =00004E71                818  C_NOP EQU $4E71
000016F6  B27C 4E71                819      CMP.W #C_NOP, D1
000016FA  6700 0610                820      BEQ PRINT_NOP
000016FE  4E75                     821      RTS
00001700                           822  
00001700                           823  RTS:
00001700                           824  * constant for RTS 
00001700  =00004E75                825  C_RTS EQU $4E75
00001700  B27C 4E75                826      CMP.W #C_RTS, D1
00001704  6700 05D6                827      BEQ PRINT_RTS
00001708  4E75                     828      RTS
0000170A                           829  
0000170A                           830  JSR:
0000170A  =00004E80                831  JSR_OPCODE EQU %0100111010000000
0000170A  3401                     832      MOVE.W D1,D2 
0000170C                           833  * MASKING WITH UNIQUE OPCODE
0000170C  C47C FFC0                834      AND.W #%1111111111000000, D2
00001710  B47C 4E80                835      CMP.W #JSR_OPCODE, D2
00001714  6600 003E                836      BNE JSR_END 
00001718                           837      ; check to make sure we support this register 
00001718  3401                     838      MOVE.W D1, D2 
0000171A  C43C 003F                839      AND.B #%00111111, D2 
0000171E  3F02                     840      MOVE.W D2, -(SP)
00001720  4EB8 11AC                841      JSR CHECK_SUPPORT_REGISTER 
00001724  544F                     842      ADDQ #2, SP 
00001726                           843      ; check return value
00001726                           844      *  from print_register to see if it is unsupported register 
00001726  3439 00009000            845      MOVE.W (RETURN_ADDRESS), D2 
0000172C  0C42 0002                846      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001730  6700 0022                847      BEQ JSR_END
00001734                           848      ; done checking 
00001734  4EB9 00001D62            849      JSR PRINT_JSR
0000173A                           850  * MASKING TO GET MODE AND REGISTER
0000173A  1401                     851      MOVE.B D1,D2
0000173C  C43C 003F                852      AND.B #%00111111, D2
00001740  48A7 4000                853      MOVEM.W D1, -(SP)
00001744  3F02                     854      MOVE.W D2, -(SP)
00001746  3F3C 0000                855      MOVE.W #$0, -(SP)
0000174A  4EB8 1252                856      JSR PRINT_REGISTER
0000174E  5882                     857      ADDQ.L #4, D2
00001750  4C9F 0002                858      MOVEM.W (SP)+, D1
00001754                           859  JSR_END:
00001754  4E75                     860      RTS
00001756                           861  
00001756                           862  LEA:
00001756  3401                     863      MOVE.W D1,D2 
00001758  C47C F1C0                864      AND.W  #%1111000111000000, D2
0000175C  0C42 41C0                865      CMPI.W #%0100000111000000, D2
00001760  6600 0060                866      BNE LEA_END
00001764                           867  
00001764                           868      ; CHECK TO MAKE SURE WE SUPPORT THE EA
00001764  3401                     869      MOVE.W D1, D2 
00001766  C43C 003F                870      AND.B #%00111111, D2 
0000176A  3F02                     871      MOVE.W D2, -(SP)
0000176C  4EB8 11AC                872      JSR CHECK_SUPPORT_REGISTER
00001770  544F                     873      ADDQ #2, SP 
00001772                           874      ; check return value
00001772                           875      *  from print_register to see if it is unsupported register 
00001772  3439 00009000            876      MOVE.W (RETURN_ADDRESS), D2 
00001778  0C42 0002                877      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000177C  6700 F8CA                878      BEQ FINISH_OPCODE
00001780                           879      * END CHECKING
00001780  4EB9 00001D74            880      JSR PRINT_LEA
00001786  1401                     881      MOVE.B D1,D2 
00001788                           882      ; MASK TO GET MODE AND REGISTER
00001788  C43C 003F                883      AND.B #%0000000000111111, D2
0000178C  48A7 4000                884      MOVEM.W D1, -(SP)
00001790  3F02                     885      MOVE.W D2, -(SP)
00001792  3F3C 0000                886      MOVE.W #$0, -(SP)
00001796  4EB8 1252                887      JSR PRINT_REGISTER
0000179A  588F                     888      ADDQ.L #$4, SP
0000179C  4C9F 0002                889      MOVEM.W (SP)+, D1
000017A0  4EB8 10D2                890      JSR PRINT_COMMA
000017A4                           891      ; MASK TO GET DESTINATION REGISTER
000017A4  3401                     892      MOVE.W D1,D2
000017A6  C47C 0E00                893      AND.W #%0000111000000000, D2
000017AA  E04A                     894      LSR.W #$08, D2
000017AC  E24A                     895      LSR.W #$01, D2
000017AE  843C 0008                896      OR.B #%00001000, D2 ; OR TO PASS TO PRINT_REGISTER
000017B2  3F02                     897      MOVE.W D2, -(SP)
000017B4  3F3C 0000                898      MOVE.W #$0, -(SP) 
000017B8  4EB8 1252                899      JSR PRINT_REGISTER
000017BC  588F                     900      ADDQ.L #$04, SP
000017BE  6000 F888                901      BRA FINISH_OPCODE
000017C2                           902  LEA_END:
000017C2  4E75                     903      RTS
000017C4                           904  
000017C4                           905  ADDA:
000017C4  =0000D0C0                906  C_ADDA EQU       %1101000011000000
000017C4  =0000F0C0                907  ADDA_MASKING EQU %1111000011000000
000017C4  =00000100                908  ADDA_SIZE_MASKING EQU %0000000100000000
000017C4  =00000E00                909  ADDA_AN_MASKING EQU %0000111000000000
000017C4  3401                     910      MOVE.W D1, D2
000017C6  C47C F0C0                911      AND.W #ADDA_MASKING, D2 ; GET PATTERN
000017CA  0C42 D0C0                912      CMPI.W #C_ADDA, D2 ; COMPARE WITH THE PATTERN
000017CE  6600 0076                913      BNE ADDA_END 
000017D2                           914      ; CHECK TO MAKE SURE WE SUPPORT THE EA
000017D2  3401                     915      MOVE.W D1, D2 
000017D4  C43C 003F                916      AND.B #%00111111, D2 
000017D8  3F02                     917      MOVE.W D2, -(SP)
000017DA  4EB8 11AC                918      JSR CHECK_SUPPORT_REGISTER
000017DE  544F                     919      ADDQ #2, SP 
000017E0                           920      ; check return value
000017E0                           921      *  from print_register to see if it is unsupported register 
000017E0  3439 00009000            922      MOVE.W (RETURN_ADDRESS), D2 
000017E6  0C42 0002                923      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
000017EA  6700 F85C                924      BEQ FINISH_OPCODE
000017EE  4EB9 00001D86            925      JSR PRINT_ADDA
000017F4  3401                     926      MOVE.W D1, D2  ; START TO MASK SIZE 
000017F6  C47C 0100                927      AND.W #ADDA_SIZE_MASKING,D2 
000017FA  E04A                     928      LSR.W #8, D2 
000017FC  3C02                     929      MOVE.W D2 , D6 ; FOR SIZE TO PRINT REGISTER 
000017FE  5246                     930      ADDQ #$1, D6
00001800  1F06                     931      MOVE.B D6 , -(SP)
00001802  4EB8 113A                932      JSR PRINT_DATA
00001806  548F                     933      ADDQ.L #$2, SP 
00001808  4EB8 10B4                934      JSR PRINT_TAB
0000180C                           935      ; GET MODE AND REGISTER
0000180C  3238 7006                936      MOVE.W (OPCODE_ADDRESS), D1 
00001810  1401                     937      MOVE.B D1, D2 
00001812  C43C 003F                938      AND.B #%00111111, D2 
00001816  3F02                     939      MOVE.W D2, -(SP)
00001818  3F06                     940      MOVE.W D6, -(SP)
0000181A  4EB8 1252                941      JSR PRINT_REGISTER 
0000181E  588F                     942      ADDQ.L #$04, SP 
00001820  4EB8 10D2                943      JSR PRINT_COMMA
00001824  3238 7006                944      MOVE.W (OPCODE_ADDRESS), D1  ; get back the opcode just in case
00001828  3401                     945      MOVE.W D1, D2
0000182A  C47C 0E00                946      AND.W #ADDA_AN_MASKING, D2
0000182E  E04A                     947      LSR.W #8, D2 
00001830  E24A                     948      LSR.W #1, D2 
00001832  843C 0008                949      OR.B #%00001000, D2 ; TO APPEND MODE FOR PRINT REGISTER 
00001836  3F02                     950      MOVE.W D2, -(SP)
00001838  3F3C 0000                951      MOVE.W #$0, -(SP)
0000183C  4EB8 1252                952      JSR PRINT_REGISTER 
00001840  588F                     953      ADDQ.L #$4, SP 
00001842  6000 F804                954      BRA FINISH_OPCODE
00001846                           955  ADDA_END:
00001846  4E75                     956      RTS
00001848                           957  
00001848                           958  ADD: 
00001848  =0000D000                959  C_ADD EQU           %1101000000000000 ; PATTERN
00001848  =0000F000                960  C_ADD_MASKING EQU   %1111000000000000 ; MASKING TO CHECK PATTERN
00001848  =0000003F                961  C_ADD_EA EQU        %00111111 ; EFFECTIVE ADDRESS MASKING
00001848  =00000E00                962  C_ADD_REGISTER EQU  %0000111000000000 ; WHICH REGISTER
00001848  =000000C0                963  C_ADD_SIZE EQU      %0000000011000000  ; SIZE 
00001848  =00000100                964  C_ADD_DIRECTION EQU %0000000100000000
00001848  =00000000                965  C_ADD_TO_D EQU      %0000000000000000
00001848  =00000100                966  C_ADD_FROM_D EQU    %0000000100000000
00001848  3401                     967      MOVE.W D1, D2 
0000184A                           968      ; CHECK PATTERN 
0000184A  C47C F000                969      AND.W #C_ADD_MASKING, D2 
0000184E  0C42 D000                970      CMPI.W #C_ADD, D2 
00001852  6600 00C4                971      BNE ADD_END 
00001856                           972      ; CHECK SUPPORT REGISTER 
00001856  3401                     973      MOVE.W D1, D2 
00001858  C43C 003F                974      AND.B #%00111111, D2 
0000185C  3F02                     975      MOVE.W D2, -(SP)
0000185E  4EB8 11AC                976      JSR CHECK_SUPPORT_REGISTER
00001862  544F                     977      ADDQ #2, SP 
00001864                           978      ; check return value
00001864                           979      *  from print_register to see if it is unsupported register 
00001864  3439 00009000            980      MOVE.W (RETURN_ADDRESS), D2 
0000186A  0C42 0002                981      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
0000186E  6700 F7D8                982      BEQ FINISH_OPCODE
00001872                           983      
00001872  4EB9 00001D94            984      JSR PRINT_ADD 
00001878  3238 7006                985      MOVE.W (OPCODE_ADDRESS), D1 
0000187C  3401                     986      MOVE.W D1, D2 
0000187E  C47C 00C0                987      AND.W #C_ADD_SIZE, D2 
00001882  EC4A                     988      LSR.W #6, D2
00001884  1C02                     989      MOVE.B D2, D6 ; SAVE FOR IMMEDIATE VALUE AND SIZE OF AN OPCODE  
00001886                           990  
00001886  1F02                     991      MOVE.B D2, -(SP)
00001888  4EB8 113A                992      JSR PRINT_DATA
0000188C  548F                     993      ADDQ.L #$02, SP 
0000188E  4EB8 10B4                994      JSR PRINT_TAB 
00001892                           995      ; CHECK DIRECTION
00001892  3238 7006                996      MOVE.W (OPCODE_ADDRESS), D1 
00001896  3401                     997      MOVE.W D1, D2  
00001898  C47C 0100                998      AND.W #C_ADD_DIRECTION, D2 
0000189C  0C42 0000                999      CMPI.W #C_ADD_TO_D, D2 
000018A0  6700 003C               1000      BEQ ADD_TO_D ; DN <EA> -> DN
000018A4                          1001      ; otherwise from d 
000018A4                          1002  ADD_FROM_D:
000018A4  3238 7006               1003      MOVE.W (OPCODE_ADDRESS), D1 
000018A8  3401                    1004      MOVE.W D1, D2 
000018AA  C47C 0E00               1005      AND.W #C_ADD_REGISTER, D2 
000018AE  E08A                    1006      LSR.L #8, D2 
000018B0  E28A                    1007      LSR.L #1, D2 
000018B2  843C 0000               1008      OR.B #%00000000, D2
000018B6  3F02                    1009      MOVE.W D2, -(SP)
000018B8  3F3C 0000               1010      MOVE.W #$0, -(SP)
000018BC  4EB8 1252               1011      JSR PRINT_REGISTER 
000018C0  5882                    1012      ADDQ.L #4, D2 
000018C2  4EB8 10D2               1013      JSR PRINT_COMMA 
000018C6                          1014      
000018C6  3238 7006               1015      MOVE.W (OPCODE_ADDRESS), D1 
000018CA  3401                    1016      MOVE.W D1, D2 
000018CC  C43C 003F               1017      AND.B #C_ADD_EA, D2 
000018D0  3F02                    1018      MOVE.W D2, -(SP)
000018D2  3F06                    1019      MOVE.W D6, -(SP)
000018D4  4EB8 1252               1020      JSR PRINT_REGISTER
000018D8  588F                    1021      ADDQ.L #4, SP 
000018DA  6000 F76C               1022      BRA FINISH_OPCODE
000018DE                          1023      
000018DE                          1024  ADD_TO_D:
000018DE  3238 7006               1025      MOVE.W (OPCODE_ADDRESS), D1 
000018E2  3401                    1026      MOVE.W D1, D2 
000018E4                          1027      ; GET SOURCE REGISTER 
000018E4  C43C 003F               1028      AND.B #C_ADD_EA, D2 
000018E8  3F02                    1029      MOVE.W D2, -(SP)
000018EA  3F06                    1030      MOVE.W D6, -(SP)
000018EC  4EB8 1252               1031      JSR PRINT_REGISTER
000018F0  588F                    1032      ADDQ.L #4, SP 
000018F2  4EB8 10D2               1033      JSR PRINT_COMMA 
000018F6                          1034      ; PRINT DATA REGISTER 
000018F6  3238 7006               1035      MOVE.W (OPCODE_ADDRESS), D1 
000018FA  3401                    1036      MOVE.W D1, D2 
000018FC  C47C 0E00               1037      AND.W #C_ADD_REGISTER, D2 
00001900  E04A                    1038      LSR.W #8, D2 
00001902  E24A                    1039      LSR.W #1, D2 
00001904                          1040      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001904  843C 0000               1041      OR.B #%00000000, D2 
00001908  3F02                    1042      MOVE.W D2, -(SP)
0000190A  3F3C 0000               1043      MOVE.W #$0, -(SP)
0000190E  4EB8 1252               1044      JSR PRINT_REGISTER
00001912  588F                    1045      ADDQ.L #4, SP 
00001914  6000 F732               1046      BRA FINISH_OPCODE
00001918                          1047  ADD_END:
00001918  4E75                    1048      RTS
0000191A                          1049  
0000191A                          1050  MOVEA: 
0000191A  =00001040               1051  C_MOVEA_PATTERN1 EQU  %0001000001000000
0000191A  =00003040               1052  C_MOVEA_PATTERN2 EQU  %0011000001000000
0000191A  =00002040               1053  C_MOVEA_PATTERN3 EQU  %0010000001000000
0000191A  =0000F1C0               1054  C_MOVEA_P_MASKING EQU %1111000111000000
0000191A  =00003000               1055  C_MOVEA_SIZE      EQU %0011000000000000
0000191A  =00000E00               1056  C_MOVEA_AN        EQU %0000111000000000
0000191A  =0000003F               1057  C_MOVEA_REGISTER  EQU %00111111
0000191A  3401                    1058      MOVE.W D1, D2 
0000191C  0242 F1C0               1059      ANDI.W #C_MOVEA_P_MASKING, D2 
00001920  0C42 1040               1060      CMPI.W #C_MOVEA_PATTERN1, D2 
00001924  6700 0014               1061      BEQ MOVEA_REGISTER_OK
00001928  0C42 3040               1062      CMPI.W #C_MOVEA_PATTERN2, D2 
0000192C  6700 000C               1063      BEQ MOVEA_REGISTER_OK
00001930  0C42 2040               1064      CMPI.W #C_MOVEA_PATTERN3, D2 
00001934  6700 0004               1065      BEQ MOVEA_REGISTER_OK
00001938  4E75                    1066      RTS
0000193A                          1067  MOVEA_REGISTER_OK:
0000193A                          1068      ; CHECK SUPPORT THE REGISTER 
0000193A  3401                    1069      MOVE.W D1, D2 
0000193C  C43C 003F               1070      AND.B #C_MOVEA_REGISTER, D2 
00001940  3F02                    1071      MOVE.W D2, -(SP) 
00001942  4EB8 11AC               1072      JSR CHECK_SUPPORT_REGISTER
00001946  548F                    1073      ADDQ.L #2, SP 
00001948  3439 00009000           1074      MOVE.W (RETURN_ADDRESS), D2 
0000194E  0C42 0002               1075      CMPI.W #C_UNSUPPORT_REGISTER, D2 
00001952  6700 F6F4               1076      BEQ FINISH_OPCODE
00001956                          1077      ; DONE CHECKING, NOW DECODE 
00001956  4EB9 00001DA2           1078      JSR PRINT_MOVEA 
0000195C                          1079      ; GET SIZE 
0000195C  3401                    1080      MOVE.W D1, D2 
0000195E  C47C 3000               1081      AND.W #C_MOVEA_SIZE, D2 
00001962                          1082      ; SHIFT TO LSB 
00001962  E04A                    1083      LSR.W #8, D2 
00001964  E84A                    1084      LSR.W #4, D2 
00001966  0C02 0001               1085      CMPI.B #%00000001, D2
0000196A  6700 000E               1086      BEQ CONVERT_OPMODE_SIZE_B
0000196E  0C02 0003               1087      CMPI.B #%00000011, D2 
00001972  6700 000C               1088      BEQ CONVERT_OPMODE_SIZE_W
00001976  6000 000E               1089      BRA MOVEA_DONE_CONVERT
0000197A                          1090  CONVERT_OPMODE_SIZE_B:
0000197A  5302                    1091      SUBQ.B #1, D2 
0000197C  6000 0008               1092      BRA MOVEA_DONE_CONVERT
00001980                          1093  CONVERT_OPMODE_SIZE_W: 
00001980  5502                    1094      SUBQ.B #2, D2 
00001982  6000 0002               1095      BRA MOVEA_DONE_CONVERT
00001986                          1096  
00001986                          1097  MOVEA_DONE_CONVERT:
00001986  3C02                    1098      MOVE.W D2, D6 ; COPY THE SIZE FOR LATTER USE 
00001988  1F06                    1099      MOVE.B D6, -(SP)
0000198A  4EB8 113A               1100      JSR PRINT_DATA 
0000198E  548F                    1101      ADDQ.L #2, SP 
00001990  4EB8 10B4               1102      JSR PRINT_TAB
00001994                          1103      ; GET SOURCE REGISTER 
00001994  3238 7006               1104      MOVE.W (OPCODE_ADDRESS), D1 
00001998  3401                    1105      MOVE.W D1, D2 
0000199A  C43C 003F               1106      AND.B #C_MOVEA_REGISTER,D2 
0000199E  3F02                    1107      MOVE.W D2, -(SP)
000019A0  3F06                    1108      MOVE.W D6, -(SP)
000019A2  4EB8 1252               1109      JSR PRINT_REGISTER
000019A6  588F                    1110      ADDQ.L #4, SP 
000019A8  4EB8 10D2               1111      JSR PRINT_COMMA
000019AC                          1112  
000019AC  3238 7006               1113      MOVE.W (OPCODE_ADDRESS), D1 ; GET BACK THE OPCODE  
000019B0  3401                    1114      MOVE.W D1, D2 ; MOVE TO D2 FOR LATER USE, NO NEED TO GET FROM MEMORY ANYMORE
000019B2  C47C 0E00               1115      AND.W #C_MOVEA_AN, D2 
000019B6  E04A                    1116      LSR.W #8, D2 
000019B8  E24A                    1117      LSR.W #1, D2 
000019BA                          1118      ; ADD MODE FOR PRINT_REGISTER 
000019BA  0002 0008               1119      ORI.B #%00001000, D2 
000019BE  3F02                    1120      MOVE.W D2, -(SP)
000019C0  3F3C 0000               1121      MOVE.W #0, -(SP)
000019C4  4EB8 1252               1122      JSR PRINT_REGISTER ; PRINT AN 
000019C8  588F                    1123      ADDQ.L #4, SP 
000019CA  6000 F67C               1124      BRA FINISH_OPCODE   
000019CE                          1125  
000019CE                          1126  MOVEA_END: 
000019CE  4E75                    1127      RTS 
000019D0                          1128  
000019D0                          1129  MOVE: 
000019D0  =00001000               1130  C_MOVE_PATTERN EQU   %0001000000000000
000019D0  =00003000               1131  C_MOVE_PATTERN1 EQU  %0011000000000000
000019D0  =00002000               1132  C_MOVE_PATTERN2 EQU  %0010000000000000
000019D0  =0000F000               1133  C_MOVE_MASKING EQU   %1111000000000000
000019D0  =00003000               1134  C_MOVE_SIZE EQU      %0011000000000000
000019D0  =00000E00               1135  C_MOVE_DES_XN EQU    %0000111000000000
000019D0  =000001C0               1136  C_MOVE_DES_MOD EQU   %0000000111000000
000019D0  =0000003F               1137  C_MOVE_SRC_RE EQU    %00111111 
000019D0  3401                    1138      MOVE.W D1, D2 
000019D2  C47C F000               1139      AND.W #C_MOVE_MASKING, D2 
000019D6  0C42 1000               1140      CMPI.W #C_MOVE_PATTERN, D2 
000019DA  6700 0014               1141      BEQ MOVE_MATCH_PATTERN 
000019DE  0C42 3000               1142      CMPI.W #C_MOVE_PATTERN1, D2 
000019E2  6700 000C               1143      BEQ MOVE_MATCH_PATTERN 
000019E6  0C42 2000               1144      CMPI.W #C_MOVE_PATTERN2, D2 
000019EA  6700 0004               1145      BEQ MOVE_MATCH_PATTERN
000019EE                          1146  MOVE_END:
000019EE  4E75                    1147      RTS
000019F0                          1148  MOVE_MATCH_PATTERN: 
000019F0  3401                    1149      MOVE.W D1, D2 
000019F2                          1150      ; CHECK IF WE SUPPORT THE REGISTER 
000019F2                          1151      ; SOURCE REGISTER 
000019F2  C43C 003F               1152      AND.B #C_MOVE_SRC_RE, D2
000019F6  3A42                    1153      MOVE.W D2, A5 ; COPY FOR LATER USE
000019F8  3F02                    1154      MOVE.W D2, -(SP)
000019FA  4EB8 11AC               1155      JSR CHECK_SUPPORT_REGISTER 
000019FE  548F                    1156      ADDQ.L #2, SP 
00001A00  0C79 0002 00009000      1157      CMPI.W #C_UNSUPPORT_REGISTER, (RETURN_ADDRESS)
00001A08  6700 F63E               1158      BEQ FINISH_OPCODE
00001A0C                          1159      ; DES REGISTER 
00001A0C                          1160      ;GET XN 
00001A0C  3238 7006               1161      MOVE.W (OPCODE_ADDRESS), D1 
00001A10  3401                    1162      MOVE.W D1,D2 
00001A12  C47C 0E00               1163      AND.W #C_MOVE_DES_XN, D2 
00001A16  EC4A                    1164      LSR.W #6, D2 
00001A18  C27C 01C0               1165      AND.W #C_MOVE_DES_MOD, D1 
00001A1C  8441                    1166      OR.W D1, D2 
00001A1E  E64A                    1167      LSR.W #3, D2 
00001A20  3842                    1168      MOVE.W D2, A4 ; COPY FOR LATER USE 
00001A22  3F02                    1169      MOVE.W D2, -(SP)
00001A24  4EB8 11AC               1170      JSR CHECK_SUPPORT_REGISTER
00001A28  548F                    1171      ADDQ.L #2, SP 
00001A2A  0C79 11AC 00009000      1172      CMPI.W #CHECK_SUPPORT_REGISTER, (RETURN_ADDRESS)
00001A32  6700 F614               1173      BEQ FINISH_OPCODE
00001A36                          1174      ; EVERYTHING IS OK 
00001A36                          1175      
00001A36  4EB9 00001DB0           1176      JSR PRINT_MOVE
00001A3C  3238 7006               1177      MOVE.W (OPCODE_ADDRESS), D1 
00001A40  3401                    1178      MOVE.W D1, D2 
00001A42  C47C 3000               1179      AND.W #C_MOVE_SIZE, D2 
00001A46  E04A                    1180      LSR.W #8, D2 
00001A48  E80A                    1181      LSR.B #4, D2 
00001A4A  0C02 0001               1182      CMPI.B #1, D2 
00001A4E  6700 000E               1183      BEQ MOVE_OPMODE_BYTE
00001A52  0C02 0003               1184      CMPI.B #3, D2 
00001A56  6700 000C               1185      BEQ MOVE_OPMODE_WORD
00001A5A  6000 000E               1186      BRA MOVE_DONE_CONVERT
00001A5E                          1187  MOVE_OPMODE_BYTE:
00001A5E  5302                    1188      SUBQ.B #1, D2
00001A60  6000 0008               1189      BRA MOVE_DONE_CONVERT
00001A64                          1190  MOVE_OPMODE_WORD:
00001A64  5502                    1191      SUBQ.B #2, D2 
00001A66  6000 0002               1192      BRA MOVE_DONE_CONVERT
00001A6A                          1193  MOVE_DONE_CONVERT:
00001A6A  3C02                    1194      MOVE.W D2, D6 ; COPY THE SIZE FOR LATER USE
00001A6C  1F06                    1195      MOVE.B D6, -(SP) 
00001A6E  4EB8 113A               1196      JSR PRINT_DATA 
00001A72  548F                    1197      ADDQ.L #2, SP
00001A74  4EB8 10B4               1198      JSR PRINT_TAB 
00001A78                          1199      ; PRINT SOURCE
00001A78  3F0D                    1200      MOVE.W A5, -(SP) ; MODE-REGISTER FOR SOURCE
00001A7A  3F06                    1201      MOVE.W D6, -(SP) ; SIZE 
00001A7C  4EB8 1252               1202      JSR PRINT_REGISTER
00001A80  588F                    1203      ADDQ.L #4, SP 
00001A82                          1204      ; PRINT DES 
00001A82  4EB8 10D2               1205      JSR PRINT_COMMA 
00001A86  3F0C                    1206      MOVE.W A4, -(SP) ; MODE-REGISTER FOR DES 
00001A88  3F06                    1207      MOVE.W D6, -(SP) ; SIZE 
00001A8A  4EB8 1252               1208      JSR PRINT_REGISTER 
00001A8E  588F                    1209      ADDQ.L #4, SP 
00001A90  6000 F5B6               1210      BRA FINISH_OPCODE 
00001A94                          1211  
00001A94                          1212  MOVEM: 
00001A94  =00004880               1213  C_MOVEM_PATTERN EQU %0100100010000000
00001A94  =0000FB80               1214  C_MOVEM_MASKING EQU %1111101110000000
00001A94  =00000400               1215  C_MOVEM_DIR EQU     %0000010000000000
00001A94  =00000040               1216  C_MOVEM_SIZE EQU    %0000000001000000
00001A94                          1217  * C_MOVEM_REGISTER EQU
00001A94                          1218  
00001A94                          1219  
00001A94                          1220  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001A94                          1221  NEG:
00001A94                          1222  * CONSTANT FOR NEG OPCODE
00001A94  =00004400               1223  NEG_OPCODE EQU %0100010000000000
00001A94  =0000FF00               1224  NEG_M      EQU %1111111100000000
00001A94  =0000003F               1225  NEG_REG_M  EQU %0000000000111111
00001A94  =000000C0               1226  NEG_SIZE_M EQU %0000000011000000
00001A94  3401                    1227      MOVE.W D1, D2
00001A96                          1228  * MASKING WITH NEG UNIQUE CODE
00001A96  C47C FF00               1229      AND.W #NEG_M, D2
00001A9A  B47C 4400               1230      CMP.W #NEG_OPCODE, D2
00001A9E  6600 0056               1231      BNE NEG_END
00001AA2                          1232  
00001AA2                          1233  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001AA2  3401                    1234      MOVE.W D1, D2 
00001AA4  C43C 003F               1235      AND.B #NEG_REG_M, D2 
00001AA8  3F02                    1236      MOVE.W D2, -(SP)
00001AAA  4EB8 11AC               1237      JSR CHECK_SUPPORT_REGISTER
00001AAE  544F                    1238      ADDQ #2, SP 
00001AB0                          1239  * from print_register to see if it is unsupported register 
00001AB0  3439 00009000           1240      MOVE.W (RETURN_ADDRESS), D2 
00001AB6  0C42 0002               1241      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001ABA  6700 F58C               1242      BEQ FINISH_OPCODE
00001ABE                          1243  
00001ABE  4EB9 00001CF0           1244      JSR PRINT_NEG
00001AC4  3238 7006               1245      MOVE.W (OPCODE_ADDRESS), D1 
00001AC8  3401                    1246      MOVE.W D1, D2
00001ACA                          1247  * MASKING TO GET NEG SIZE
00001ACA  C47C 00C0               1248      AND.W #NEG_SIZE_M, D2
00001ACE  EC42                    1249      ASR.W #6, D2
00001AD0  1C02                    1250      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001AD2  1F06                    1251      MOVE.B D6, -(SP)
00001AD4  4EB8 113A               1252      JSR PRINT_DATA
00001AD8  548F                    1253      ADDQ.L #2, SP
00001ADA  4EB8 10B4               1254      JSR PRINT_TAB
00001ADE                          1255  
00001ADE  3238 7006               1256      MOVE.W (OPCODE_ADDRESS), D1     
00001AE2  3401                    1257      MOVE.W D1, D2
00001AE4                          1258  * MASKING TO GET MODE AND REGISTER
00001AE4  C47C 003F               1259      AND.W #NEG_REG_M, D2
00001AE8  3F02                    1260      MOVE.W D2, -(SP)
00001AEA  3F06                    1261      MOVE.W D6, -(SP)
00001AEC  4EB8 1252               1262      JSR PRINT_REGISTER
00001AF0  588F                    1263      ADDQ.L #$04, SP
00001AF2  6000 F554               1264      BRA FINISH_OPCODE
00001AF6                          1265  NEG_END: 
00001AF6  4E75                    1266      RTS
00001AF8                          1267  
00001AF8                          1268  BRA:
00001AF8                          1269  * CONSTANT FOR BRA OPCODE
00001AF8  =00006000               1270  BRA_OPCODE EQU %0110000000000000
00001AF8  =0000FF00               1271  BRA_M      EQU %1111111100000000
00001AF8  =000000FF               1272  BRA_DISP_M EQU %0000000011111111
00001AF8  3401                    1273      MOVE.W D1, D2
00001AFA                          1274  * MASKING WITH BRA UNIQUE CODE
00001AFA  C47C FF00               1275      AND.W #BRA_M, D2
00001AFE  B47C 6000               1276      CMP.W #BRA_OPCODE, D2
00001B02  6600 0030               1277      BNE BRA_END
00001B06                          1278  
00001B06                          1279  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B06  3401                    1280      MOVE.W D1, D2 
00001B08  C43C 00FF               1281      AND.B #BRA_DISP_M, D2 
00001B0C  3F02                    1282      MOVE.W D2, -(SP)
00001B0E  4EB8 11AC               1283      JSR CHECK_SUPPORT_REGISTER
00001B12  544F                    1284      ADDQ #2, SP 
00001B14                          1285  * from print_register to see if it is unsupported register 
00001B14  3439 00009000           1286      MOVE.W (RETURN_ADDRESS), D2 
00001B1A  0C42 0002               1287      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B1E                          1288  
00001B1E  4EB9 00001CFE           1289      JSR PRINT_BRA
00001B24  3238 7006               1290      MOVE.W (OPCODE_ADDRESS), D1 
00001B28  3401                    1291      MOVE.W D1, D2
00001B2A                          1292  * MASKING TO GET DISPLACEMENT OF BRA
00001B2A  C47C 00FF               1293      AND.W #BRA_DISP_M, D2
00001B2E  3F02                    1294      MOVE.W D2, -(SP)       *-------------in progress-----------------*
00001B30  6000 F516               1295      BRA FINISH_OPCODE
00001B34                          1296  BRA_END:
00001B34  4E75                    1297      RTS
00001B36                          1298  
00001B36                          1299  OR:
00001B36                          1300  * CONSTANT FOR OR OPCODE
00001B36  =00008000               1301  OR_OPCODE EQU %1000000000000000
00001B36  =0000F000               1302  OR_M      EQU %1111000000000000
00001B36  =00000E00               1303  OR_DREG_M EQU %0000111000000000
00001B36  =000000C0               1304  OR_SIZE_M EQU %0000000011000000
00001B36  =0000003F               1305  OR_REG_M  EQU %0000000000111111
00001B36  =00000100               1306  OR_DIREC  EQU %0000000100000000
00001B36                          1307  
00001B36  3401                    1308      MOVE.W D1, D2
00001B38                          1309  * MASKING WITH OR UNIQUE CODE
00001B38  C47C F000               1310      AND.W #OR_M, D2
00001B3C  0C42 8000               1311      CMPI.W #OR_OPCODE, D2
00001B40  6600 00C0               1312      BNE OR_END
00001B44                          1313  
00001B44                          1314  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001B44  3401                    1315      MOVE.W D1, D2 
00001B46  C43C 003F               1316      AND.B #OR_REG_M, D2 
00001B4A  3F02                    1317      MOVE.W D2, -(SP)
00001B4C  4EB8 11AC               1318      JSR CHECK_SUPPORT_REGISTER
00001B50  544F                    1319      ADDQ #2, SP 
00001B52                          1320  * from print_register to see if it is unsupported register 
00001B52  3439 00009000           1321      MOVE.W (RETURN_ADDRESS), D2 
00001B58  0C42 0002               1322      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001B5C                          1323  
00001B5C  4EB9 00001D1C           1324      JSR PRINT_OR
00001B62  3238 7006               1325      MOVE.W (OPCODE_ADDRESS), D1
00001B66  3401                    1326      MOVE.W D1, D2
00001B68                          1327  * MASKING TO GET SIZE OF OR
00001B68  C47C 00C0               1328      AND.W #OR_SIZE_M, D2
00001B6C  EC42                    1329      ASR.W #6, D2
00001B6E  1C02                    1330      MOVE.B D2, D6
00001B70  1F02                    1331      MOVE.B D2, -(SP)
00001B72  4EB8 113A               1332      JSR PRINT_DATA
00001B76  548F                    1333      ADDQ.L #$02, SP 
00001B78  4EB8 10B4               1334      JSR PRINT_TAB
00001B7C                          1335  * MASKING TO GET DIRECTION OF THIS OR
00001B7C  3238 7006               1336      MOVE.W (OPCODE_ADDRESS), D1 
00001B80  3401                    1337      MOVE.W D1, D2  
00001B82  C47C 0100               1338      AND.W #OR_DIREC, D2 
00001B86  0C42 0100               1339      CMPI.W #OR_DIREC, D2 
00001B8A  6600 003C               1340      BNE OR_TO_D  * DN V <EA> -> DN
00001B8E                          1341  
00001B8E                          1342  OR_TO_EA:  * DN V <EA> -> <EA>
00001B8E  3238 7006               1343      MOVE.W (OPCODE_ADDRESS), D1 
00001B92  3401                    1344      MOVE.W D1, D2 
00001B94  C47C 0E00               1345      AND.W #OR_DREG_M, D2 
00001B98  E08A                    1346      LSR.L #8, D2 
00001B9A  E28A                    1347      LSR.L #1, D2 
00001B9C  843C 0000               1348      OR.B #%00000000, D2
00001BA0  3F02                    1349      MOVE.W D2, -(SP)
00001BA2  3F3C 0000               1350      MOVE.W #$0, -(SP)
00001BA6  4EB8 1252               1351      JSR PRINT_REGISTER 
00001BAA  5882                    1352      ADDQ.L #4, D2 
00001BAC  4EB8 10D2               1353      JSR PRINT_COMMA 
00001BB0                          1354      
00001BB0  3238 7006               1355      MOVE.W (OPCODE_ADDRESS), D1 
00001BB4  3401                    1356      MOVE.W D1, D2 
00001BB6  C43C 003F               1357      AND.B #OR_REG_M, D2 
00001BBA  3F02                    1358      MOVE.W D2, -(SP)
00001BBC  3F06                    1359      MOVE.W D6, -(SP)
00001BBE  4EB8 1252               1360      JSR PRINT_REGISTER
00001BC2  588F                    1361      ADDQ.L #4, SP 
00001BC4  6000 F482               1362      BRA FINISH_OPCODE
00001BC8                          1363  
00001BC8                          1364  OR_TO_D:   * <EA> V DN -> DN
00001BC8  3238 7006               1365      MOVE.W (OPCODE_ADDRESS), D1 
00001BCC  3401                    1366      MOVE.W D1, D2 
00001BCE                          1367  * MASKING TO GET THE EFFECTIVE ADDRESS
00001BCE  C43C 003F               1368      AND.B #OR_REG_M, D2 
00001BD2  3F02                    1369      MOVE.W D2, -(SP)
00001BD4  3F06                    1370      MOVE.W D6, -(SP)
00001BD6  4EB8 1252               1371      JSR PRINT_REGISTER
00001BDA  588F                    1372      ADDQ.L #4, SP 
00001BDC  4EB8 10D2               1373      JSR PRINT_COMMA 
00001BE0                          1374  * MASKING TO GET THE DATA REGISTER 
00001BE0  3238 7006               1375      MOVE.W (OPCODE_ADDRESS), D1 
00001BE4  3401                    1376      MOVE.W D1, D2 
00001BE6  C47C 0E00               1377      AND.W #OR_DREG_M, D2 
00001BEA  E04A                    1378      LSR.W #8, D2 
00001BEC  E24A                    1379      LSR.W #1, D2 
00001BEE                          1380      ; APPEND MODE TO D2 FOR PRINT_REGISTER
00001BEE  843C 0000               1381      OR.B #%00000000, D2 
00001BF2  3F02                    1382      MOVE.W D2, -(SP)
00001BF4  3F3C 0000               1383      MOVE.W #$0, -(SP)
00001BF8  4EB8 1252               1384      JSR PRINT_REGISTER
00001BFC  588F                    1385      ADDQ.L #4, SP 
00001BFE  6000 F448               1386      BRA FINISH_OPCODE
00001C02                          1387  OR_END:
00001C02  4E75                    1388      RTS
00001C04                          1389  
00001C04                          1390  ORI:
00001C04                          1391  * CONSTANT FOR ORI OPCODE
00001C04  =00000000               1392  ORI_OPCODE EQU %0000000000000000
00001C04  =0000FF00               1393  ORI_M      EQU %1111111100000000
00001C04  =0000003F               1394  ORI_REG_M  EQU %0000000000111111
00001C04  =000000C0               1395  ORI_SIZE_M EQU %0000000011000000
00001C04  3401                    1396      MOVE.W D1, D2
00001C06                          1397  * MASKING WITH ORI UNIQUE CODE
00001C06  C47C FF00               1398      AND.W #ORI_M, D2
00001C0A  B47C 0000               1399      CMP.W #ORI_OPCODE, D2
00001C0E  6600 0048               1400      BNE ORI_END
00001C12                          1401  
00001C12                          1402  * CHECK TO MAKE SURE WE SUPPORT THE EA
00001C12  3401                    1403      MOVE.W D1, D2 
00001C14  C43C 003F               1404      AND.B #ORI_REG_M, D2 
00001C18  3F02                    1405      MOVE.W D2, -(SP)
00001C1A  4EB8 11AC               1406      JSR CHECK_SUPPORT_REGISTER
00001C1E  544F                    1407      ADDQ #2, SP 
00001C20                          1408  * from print_register to see if it is unsupported register 
00001C20  3439 00009000           1409      MOVE.W (RETURN_ADDRESS), D2 
00001C26  0C42 0002               1410      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C2A  6700 F41C               1411      BEQ FINISH_OPCODE
00001C2E                          1412  
00001C2E  4EB9 00001D38           1413      JSR PRINT_ORI
00001C34  3238 7006               1414      MOVE.W (OPCODE_ADDRESS), D1
00001C38  3401                    1415      MOVE.W D1, D2
00001C3A                          1416  * MASKING TO GET SIZE OF ORI
00001C3A  C47C 00C0               1417      AND.W #ORI_SIZE_M, D2 
00001C3E  EC42                    1418      ASR.W #6, D2
00001C40  1C02                    1419      MOVE.B D2 , D6 * COPY SHIFTED SIZE FOR PRINT REGISTER 
00001C42  1F06                    1420      MOVE.B D6, -(SP)
00001C44  4EB8 113A               1421      JSR PRINT_DATA
00001C48  548F                    1422      ADDQ.L #$02, SP
00001C4A  4EB8 10B4               1423      JSR PRINT_TAB
00001C4E                          1424   
00001C4E  3238 7006               1425      MOVE.W (OPCODE_ADDRESS), D1     
00001C52  3401                    1426      MOVE.W D1, D2
00001C54                          1427      *------------------------------------
00001C54                          1428      * AND.W #ORI_REG_M, D2 
00001C54                          1429      * LSR.L #8, D2 
00001C54                          1430      * LSR.L #1, D2 
00001C54                          1431      * OR.B #%00000000, D2
00001C54                          1432      * MOVE.W D2, -(SP)
00001C54                          1433      * MOVE.W #$0, -(SP)
00001C54                          1434      * JSR PRINT_REGISTER 
00001C54                          1435      * ADDQ.L #4, D2 
00001C54                          1436      * JSR PRINT_COMMA 
00001C54                          1437      
00001C54                          1438      * AND.B #ORI_REG_M, D2 
00001C54                          1439      * MOVE.W D2, -(SP)
00001C54                          1440      * MOVE.W D6, -(SP)
00001C54                          1441      * JSR PRINT_REGISTER
00001C54                          1442      * ADDQ.L #4, SP 
00001C54                          1443      *------------------------------------
00001C54  6000 F3F2               1444      BRA FINISH_OPCODE
00001C58                          1445  ORI_END:
00001C58  4E75                    1446      RTS
00001C5A                          1447  
00001C5A                          1448  EOR:
00001C5A                          1449  * CONSTANT FEOR EOR OPCODE
00001C5A  =0000B000               1450  EOR_OPCODE EQU %1011000000000000
00001C5A  =0000B000               1451  EOR_M      EQU %1011000000000000
00001C5A  =00000E00               1452  EOR_DREG_M EQU %0000111000000000
00001C5A  =000000C0               1453  EOR_SIZE_M EQU %0000000011000000
00001C5A  =0000003F               1454  EOR_REG_M  EQU %0000000000111111
00001C5A  =00000100               1455  EOR_DIREC  EQU %0000000100000000
00001C5A                          1456  
00001C5A  3401                    1457      MOVE.W D1, D2
00001C5C                          1458  * MASKING WITH EOR UNIQUE CODE
00001C5C  C47C B000               1459      AND.W #EOR_M, D2
00001C60  B47C B000               1460      CMP.W #EOR_OPCODE, D2
00001C64  6600 0074               1461      BNE EOR_END
00001C68                          1462  
00001C68                          1463  * CHECK TO MAKE SURE WE SUPPEORT THE EA
00001C68  3401                    1464      MOVE.W D1, D2 
00001C6A  C43C 003F               1465      AND.B #EOR_REG_M, D2 
00001C6E  3F02                    1466      MOVE.W D2, -(SP)
00001C70  4EB8 11AC               1467      JSR CHECK_SUPPORT_REGISTER
00001C74  544F                    1468      ADDQ #2, SP 
00001C76                          1469  * from print_register to see if it is unsuppEorted register 
00001C76  3439 00009000           1470      MOVE.W (RETURN_ADDRESS), D2 
00001C7C  0C42 0002               1471      CMPI.W #C_UNSUPPORT_REGISTER, D2 ; IF EQUAL RETURN TO FETCH NEXT OPCODE 
00001C80                          1472  
00001C80  4EB9 00001D2A           1473      JSR PRINT_EOR
00001C86  3238 7006               1474      MOVE.W (OPCODE_ADDRESS), D1
00001C8A  3401                    1475      MOVE.W D1, D2
00001C8C                          1476  * MASKING TO GET SIZE OF EOR
00001C8C  C47C 00C0               1477      AND.W #EOR_SIZE_M, D2
00001C90  EC42                    1478      ASR.W #6, D2
00001C92  1C02                    1479      MOVE.B D2, D6
00001C94  1F02                    1480      MOVE.B D2, -(SP)
00001C96  4EB8 113A               1481      JSR PRINT_DATA
00001C9A  548F                    1482      ADDQ.L #$02, SP 
00001C9C  4EB8 10B4               1483      JSR PRINT_TAB
00001CA0                          1484  
00001CA0                          1485  EOR_TO_EA:  * <EA> EOR DN -> <EA>
00001CA0  3238 7006               1486      MOVE.W (OPCODE_ADDRESS), D1 
00001CA4  3401                    1487      MOVE.W D1, D2 
00001CA6  C47C 0E00               1488      AND.W #EOR_DREG_M, D2 
00001CAA  E08A                    1489      LSR.L #8, D2 
00001CAC  E28A                    1490      LSR.L #1, D2 
00001CAE  0A02 0000               1491      EOR.B #%00000000, D2
00001CB2  3F02                    1492      MOVE.W D2, -(SP)
00001CB4  3F3C 0000               1493      MOVE.W #$0, -(SP)
00001CB8  4EB8 1252               1494      JSR PRINT_REGISTER 
00001CBC  5882                    1495      ADDQ.L #4, D2 
00001CBE  4EB8 10D2               1496      JSR PRINT_COMMA 
00001CC2                          1497      
00001CC2  3238 7006               1498      MOVE.W (OPCODE_ADDRESS), D1 
00001CC6  3401                    1499      MOVE.W D1, D2 
00001CC8  C43C 003F               1500      AND.B #EOR_REG_M, D2 
00001CCC  3F02                    1501      MOVE.W D2, -(SP)
00001CCE  3F06                    1502      MOVE.W D6, -(SP)
00001CD0  4EB8 1252               1503      JSR PRINT_REGISTER
00001CD4  588F                    1504      ADDQ.L #4, SP 
00001CD6  6000 F370               1505      BRA FINISH_OPCODE
00001CDA                          1506  
00001CDA                          1507  EOR_END:
00001CDA  4E75                    1508      RTS
00001CDC                          1509  
00001CDC                          1510  * ROR:
00001CDC                          1511  * * CONSTANT FOR ROR OPCODE
00001CDC                          1512  * ROR_OPCODE EQU %
00001CDC                          1513  * ROR_M      EQU %
00001CDC                          1514  * ROR_SIZE_M EQU %
00001CDC                          1515  *     CLR.W D2
00001CDC                          1516  *     MOVE.W D1, D2
00001CDC                          1517  * * MASKING WITH ROR UNIQUE CODE
00001CDC                          1518  *     AND.W #ROR_M, D2
00001CDC                          1519  *     CMP.W #ROR_OPCODE, D2
00001CDC                          1520  *     BNE ROR_END
00001CDC                          1521  *     JSR PRINT_ROR
00001CDC                          1522  *     MOVE.W D1, D2
00001CDC                          1523  *     MOVE.W D1, D3
00001CDC                          1524  * * MASKING TO GET SIZE OF ROR
00001CDC                          1525  *     CMP.W #ROR_SIZE_M, D2 
00001CDC                          1526  * ROR_END:
00001CDC                          1527  *     RTS
00001CDC                          1528  
00001CDC                          1529  * ROL:
00001CDC                          1530  * * CONSTANT FROR ROL OPCODE
00001CDC                          1531  * ROL_OPCODE EQU %
00001CDC                          1532  * ROL_M      EQU %
00001CDC                          1533  * ROL_SIZE_M EQU %
00001CDC                          1534  *     CLR.W D2
00001CDC                          1535  *     MOVE.W D1, D2
00001CDC                          1536  * * MASKING WITH ROL UNIQUE CODE
00001CDC                          1537  *     AND.W #ROL_M, D2
00001CDC                          1538  *     CMP.W #ROL_OPCODE, D2
00001CDC                          1539  *     BNE ROL_END
00001CDC                          1540  *     JSR PRINT_ROL
00001CDC                          1541  *     MOVE.W D1, D2
00001CDC                          1542  *     MOVE.W D1, D3
00001CDC                          1543  * * MASKING TO GET SIZE OF ROL
00001CDC                          1544  *     CMP.W #ROL_SIZE_M, D2 
00001CDC                          1545  * ROL_END:
00001CDC                          1546  *     RTS
00001CDC                          1547  * ------------ LEO ------------ *          * ------------ LEO ------------ *          * ------------ LEO ------------ *
00001CDC                          1548  
00001CDC                          1549  
00001CDC                          1550  PRINT_RTS:
00001CDC  43F9 00001DCC           1551      LEA P_RTS, A1
00001CE2  103C 000E               1552      MOVE.B #14, D0
00001CE6  4E4F                    1553      TRAP #15
00001CE8  4EB8 10B4               1554      JSR PRINT_TAB
00001CEC  6000 F35A               1555      BRA FINISH_OPCODE
00001CF0                          1556  PRINT_NEG:
00001CF0  43F9 00001E0C           1557      LEA P_NEG, A1
00001CF6  103C 000E               1558      MOVE.B #14, D0
00001CFA  4E4F                    1559      TRAP #15
00001CFC  4E75                    1560      RTS 
00001CFE                          1561  PRINT_BRA:
00001CFE  43F9 00001E4A           1562      LEA P_BRA, A1
00001D04  103C 000E               1563      MOVE.B #14, D0
00001D08  4E4F                    1564      TRAP #15
00001D0A  4E75                    1565      RTS 
00001D0C                          1566  PRINT_NOP:
00001D0C  43F9 00001DD0           1567      LEA P_NOP, A1
00001D12  103C 000E               1568      MOVE.B #14, D0
00001D16  4E4F                    1569      TRAP #15
00001D18  6000 F32E               1570      BRA FINISH_OPCODE
00001D1C                          1571  PRINT_OR:
00001D1C  43F9 00001E05           1572      LEA P_OR, A1
00001D22  103C 000E               1573      MOVE.B #14, D0
00001D26  4E4F                    1574      TRAP #15
00001D28  4E75                    1575      RTS 
00001D2A                          1576  PRINT_EOR:
00001D2A  43F9 00001E10           1577      LEA P_EOR, A1
00001D30  103C 000E               1578      MOVE.B #14, D0
00001D34  4E4F                    1579      TRAP #15
00001D36  4E75                    1580      RTS 
00001D38                          1581  PRINT_ORI:
00001D38  43F9 00001E08           1582      LEA P_ORI, A1
00001D3E  103C 000E               1583      MOVE.B #14, D0
00001D42  4E4F                    1584      TRAP #15
00001D44  4E75                    1585      RTS
00001D46                          1586  PRINT_ROL:
00001D46  43F9 00001E24           1587      LEA P_ROL, A1
00001D4C  103C 000E               1588      MOVE.B #14, D0
00001D50  4E4F                    1589      TRAP #15
00001D52  4E75                    1590      RTS 
00001D54                          1591  PRINT_ROR:
00001D54  43F9 00001E28           1592      LEA P_ROR, A1
00001D5A  103C 000E               1593      MOVE.B #14, D0
00001D5E  4E4F                    1594      TRAP #15
00001D60  4E75                    1595      RTS 
00001D62                          1596  PRINT_JSR:
00001D62  43F9 00001E4E           1597      LEA P_JSR, A1
00001D68  103C 000E               1598      MOVE.B #14, D0
00001D6C  4E4F                    1599      TRAP #15
00001D6E  4EB8 10B4               1600      JSR PRINT_TAB
00001D72  4E75                    1601      RTS 
00001D74                          1602  PRINT_LEA:
00001D74  43F9 00001E01           1603      LEA P_LEA, A1
00001D7A  103C 000E               1604      MOVE.B #14, D0
00001D7E  4E4F                    1605      TRAP #15
00001D80  4EB8 10B4               1606      JSR PRINT_TAB
00001D84  4E75                    1607      RTS 
00001D86                          1608  PRINT_ADDA: 
00001D86  43F9 00001DE9           1609      LEA P_ADDA, A1 
00001D8C  103C 000E               1610      MOVE.B #14, D0
00001D90  4E4F                    1611      TRAP #15 
00001D92  4E75                    1612      RTS
00001D94                          1613  PRINT_ADD:
00001D94  43F9 00001DE5           1614      LEA P_ADD, A1 
00001D9A  103C 000E               1615      MOVE.B #14, D0 
00001D9E  4E4F                    1616      TRAP #15
00001DA0  4E75                    1617      RTS
00001DA2                          1618  PRINT_MOVEA: 
00001DA2  43F9 00001DD9           1619      LEA P_MOVEA, A1 
00001DA8  103C 000E               1620      MOVE.B #14, D0 
00001DAC  4E4F                    1621      TRAP #15 
00001DAE  4E75                    1622      RTS 
00001DB0                          1623  PRINT_MOVE: 
00001DB0  43F9 00001DD4           1624      LEA P_MOVE, A1 
00001DB6  103C 000E               1625      MOVE.B #14, D0 
00001DBA  4E4F                    1626      TRAP #15 
00001DBC  4E75                    1627      RTS 
00001DBE                          1628  PRINT_UNSUPPORTED: 
00001DBE  43F9 00001E52           1629      LEA P_DATA, A1 
00001DC4  103C 000E               1630      MOVE.B #14, D0 
00001DC8  4E4F                    1631      TRAP #15 
00001DCA  4E75                    1632      RTS 
00001DCC                          1633  
00001DCC                          1634  
00001DCC                          1635  
00001DCC                          1636  
00001DCC                          1637  
00001DCC                          1638  
00001DCC                          1639  
00001DCC                          1640  
00001DCC                          1641  
00001DCC= 52 54 53 00             1642  P_RTS DC.B 'RTS',0        *-----------------DONE-----------------*
00001DD0= 4E 4F 50 00             1643  P_NOP DC.B 'NOP',0        *-----------------DONE-----------------*
00001DD4= 4D 4F 56 45 00          1644  P_MOVE DC.B 'MOVE',0
00001DD9= 4D 4F 56 45 41 00       1645  P_MOVEA DC.B 'MOVEA', 0
00001DDF= 4D 4F 56 45 4D 00       1646  P_MOVEM DC.B 'MOVEM', 0
00001DE5= 41 44 44 00             1647  P_ADD DC.B 'ADD', 0        *-----------------DONE-----------------*
00001DE9= 41 44 44 41 00          1648  P_ADDA DC.B 'ADDA',0        *-----------------DONE-----------------*
00001DEE= 53 55 42 00             1649  P_SUB DC.B 'SUB', 0
00001DF2= 53 55 42 51 00          1650  P_SUBQ DC.B 'SUBQ',0
00001DF7= 4D 55 4C 53 00          1651  P_MULS DC.B 'MULS',0
00001DFC= 44 49 56 53 00          1652  P_DIVS DC.B 'DIVS',0
00001E01= 4C 45 41 00             1653  P_LEA DC.B 'LEA',0        *-----------------DONE-----------------*
00001E05= 4F 52 00                1654  P_OR DC.B 'OR',0
00001E08= 4F 52 49 00             1655  P_ORI DC.B 'ORI', 0
00001E0C= 4E 45 47 00             1656  P_NEG DC.B 'NEG', 0        *-----------------DONE-----------------*
00001E10= 45 4F 52 00             1657  P_EOR DC.B 'EOR', 0
00001E14= 4C 53 52 00             1658  P_LSR DC.B 'LSR',0
00001E18= 4C 53 4C 00             1659  P_LSL DC.B 'LSL', 0
00001E1C= 41 53 52 00             1660  P_ASR DC.B 'ASR', 0
00001E20= 41 53 4C 00             1661  P_ASL DC.B 'ASL',0 
00001E24= 52 4F 4C 00             1662  P_ROL DC.B 'ROL', 0
00001E28= 52 4F 52 00             1663  P_ROR DC.B 'ROR', 0
00001E2C= 42 43 4C 52 00          1664  P_BCLR DC.B 'BCLR',0
00001E31= 43 4D 50 00             1665  P_CMP DC.B 'CMP', 0
00001E35= 43 4D 50 49 00          1666  P_CMPI DC.B 'CMPI', 0
00001E3A= 42 43 53 00             1667  P_BCS DC.B 'BCS', 0
00001E3E= 42 47 45 00             1668  P_BGE DC.B 'BGE', 0
00001E42= 42 4C 54 00             1669  P_BLT DC.B 'BLT',0
00001E46= 42 56 43 00             1670  P_BVC DC.B 'BVC', 0
00001E4A= 42 52 41 00             1671  P_BRA DC.B 'BRA',0
00001E4E= 4A 53 52 00             1672  P_JSR DC.B 'JSR',0        *-----------------DONE-----------------*
00001E52= 44 41 54 41 00          1673  P_DATA DC.B 'DATA',0        *-----------------DONE-----------------*
00001E57                          1674  
00001E57                          1675  
00001E57  =00000004               1676  WORD_LENGTH EQU $04
00001E57  =00000008               1677  LONG_LENGTH EQU $08
00001E57= 31 30 30 32 30 30 ...   1678  TEST_VAL DC.B '10020009'
00001E5F  =0000000A               1679  LF EQU $0A
00001E5F  =0000000D               1680  CR EQU $0D
00001E5F  =00000009               1681  HT  EQU  $09 
00001E5F= 20 0D 0A 00             1682  NEW_LINE DC.B ' ',CR,LF,0
00001E63                          1683  SIMHALT             ; halt simulator
00001E63                          1684  * Put variables and constants here
00001E63                          1685  
00001E63                          1686  
00001E63                          1687  
00001E63                          1688  
00001E63                          1689  
00001E63                          1690  
00001E63= 50 6C 65 61 73 65 ...   1691  PROMT_INPUT_START DC.B 'Please enter starting address(capitalized):  $',0 
00001E92= 50 6C 65 61 73 65 ...   1692  PROMT_INPUT_END DC.B 'Please enter ending address(cappitalized): $',0
00001EBF= 50 72 65 73 73 20 ...   1693  PROMT_INPUT_CONTINUE DC.B 'Press enter to continue',CR,LF,0
00001ED9                          1694      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1848
ADDA                17C4
ADDA_AN_MASKING     E00
ADDA_END            1846
ADDA_MASKING        F0C0
ADDA_SIZE_MASKING   100
ADDRESS_WITH_INDEX  30
ADD_END             1918
ADD_FROM_D          18A4
ADD_TO_D            18DE
ASCII_TO_HEX        15D0
ASCII_TO_HEX_CHECK_GT_0  15FC
ASCII_TO_HEX_CHECK_GT_A  1610
ASCII_TO_HEX_CHECK_LT_9  1604
ASCII_TO_HEX_CHECK_LT_F  161C
ASCII_TO_HEX_CONVERT_LETTER  1642
ASCII_TO_HEX_CONVERT_NUMBER  1628
ASCII_TO_HEX_END_LOOP  165C
ASCII_TO_HEX_FAILED_0  1662
ASCII_TO_HEX_FAILED_2  1668
ASCII_TO_HEX_LOOP   15F0
ASCII_TO_HEX_RETURN_OK  1
BRA                 1AF8
BRA_DISP_M          FF
BRA_END             1B34
BRA_M               FF00
BRA_OPCODE          6000
CHECK_SUPPORT_REGISTER  11AC
CHECK_VALUE_IS_ODD  15A2
CHECK_VALUE_IS_ODD_FAILED  15CA
CLR_SCREEN          1070
CONTINUE_PRINT_REGISTER  129A
CONTINUE_PRINT_RE_NUMBER  12B6
CONVERT_OPMODE_SIZE_B  197A
CONVERT_OPMODE_SIZE_W  1980
COUNTER_DISPLACEMENT  3A
COUNTER_INDEX       3B
CR                  D
C_ADD               D000
C_ADDA              D0C0
C_ADD_DIRECTION     100
C_ADD_EA            3F
C_ADD_FROM_D        100
C_ADD_MASKING       F000
C_ADD_REGISTER      E00
C_ADD_SIZE          C0
C_ADD_TO_D          0
C_MOVEA_AN          E00
C_MOVEA_PATTERN1    1040
C_MOVEA_PATTERN2    3040
C_MOVEA_PATTERN3    2040
C_MOVEA_P_MASKING   F1C0
C_MOVEA_REGISTER    3F
C_MOVEA_SIZE        3000
C_MOVEM_DIR         400
C_MOVEM_MASKING     FB80
C_MOVEM_PATTERN     4880
C_MOVEM_SIZE        40
C_MOVE_DES_MOD      1C0
C_MOVE_DES_XN       E00
C_MOVE_MASKING      F000
C_MOVE_PATTERN      1000
C_MOVE_PATTERN1     3000
C_MOVE_PATTERN2     2000
C_MOVE_SIZE         3000
C_MOVE_SRC_RE       3F
C_NOP               4E71
C_RTS               4E75
C_UNSUPPORT_REGISTER  2
DISPLACEMENT_REGISTER  28
DONE_PRINT_NUMBER   12D4
END_ADDRESS         7004
END_CHECK_VALUE_IS_ODD  15C8
END_FETCH_OPCODES   168C
END_GET_INPUT       10B2
END_HEX_TO_ASCII    1594
END_JUMP_TABLE      16F2
END_MAIN            108E
END_PRINT_COMMA     10E2
END_PRINT_DATA      115C
END_PRINT_DOLLAR_SIGN  10FA
END_PRINT_HASH_SIGN  1112
END_PRINT_HEX       153C
END_PRINT_NEW_LINE  112C
END_PRINT_REGISTER  12FE
END_PRINT_TAB       10CA
EOR                 1C5A
EOR_DIREC           100
EOR_DREG_M          E00
EOR_END             1CDA
EOR_M               B000
EOR_OPCODE          B000
EOR_REG_M           3F
EOR_SIZE_M          C0
EOR_TO_EA           1CA0
FETCH_OPCODES       167A
FINISH_OPCODE       1048
GET_ASCII_FROM_HEX  152A
GET_INPUT           109A
HEX2ASCII_DONE_CONVERT  1556
HEX_MASKING         F
HEX_TO_ASCII        153E
HEX_TO_ASCII_BYTE   2
HEX_TO_ASCII_LETTER  158A
HEX_TO_ASCII_LONG   8
HEX_TO_ASCII_LOOP   155E
HEX_TO_ASCII_NUMBER  1580
HEX_TO_ASCII_ROR    159E
HEX_TO_ASCII_SWAP   159A
HEX_TO_ASCII_WORD   4
HT                  9
INCRASE_POINTER_START_ADDRESS  166E
JSR                 170A
JSR_END             1754
JSR_OPCODE          4E80
JUMP_TABLE          168E
LEA                 1756
LEA_END             17C2
LF                  A
LONG_LENGTH         8
LOOP_START          1014
MAIN                108E
MOVE                19D0
MOVEA               191A
MOVEA_DONE_CONVERT  1986
MOVEA_END           19CE
MOVEA_REGISTER_OK   193A
MOVEM               1A94
MOVE_DONE_CONVERT   1A6A
MOVE_END            19EE
MOVE_MATCH_PATTERN  19F0
MOVE_OPMODE_BYTE    1A5E
MOVE_OPMODE_WORD    1A64
NEG                 1A94
NEG_END             1AF6
NEG_M               FF00
NEG_OPCODE          4400
NEG_REG_M           3F
NEG_SIZE_M          C0
NEW_LINE            1E5F
NOP                 16F6
OFFSET_OPC_ADDRES   7008
OPCODE_ADDRESS      7006
OR                  1B36
ORI                 1C04
ORI_END             1C58
ORI_M               FF00
ORI_OPCODE          0
ORI_REG_M           3F
ORI_SIZE_M          C0
OR_DIREC            100
OR_DREG_M           E00
OR_END              1C02
OR_M                F000
OR_OPCODE           8000
OR_REG_M            3F
OR_SIZE_M           C0
OR_TO_D             1BC8
OR_TO_EA            1B8E
OUTPUT_ADDRESS      7010
PRINT_A             150C
PRINT_AB_LONG       1428
PRINT_AB_SHORT      13C6
PRINT_ADD           1D94
PRINT_ADDA          1D86
PRINT_BRA           1CFE
PRINT_BYTE          1164
PRINT_CLOSE         14BE
PRINT_CLOSE_PLUS    14D8
PRINT_COMMA         10D2
PRINT_D             14F2
PRINT_DATA          113A
PRINT_DOLLAR_SIGN   10EA
PRINT_EOR           1D2A
PRINT_HASH_SIGN     1102
PRINT_HEX           1526
PRINT_IMMEDIATE     1300
PRINT_IMMEDIATE_BYTE  133C
PRINT_IMMEDIATE_LONG  1392
PRINT_IMMEDIATE_WORD  1366
PRINT_JSR           1D62
PRINT_LEA           1D74
PRINT_LONG          117C
PRINT_MINUS_OPEN    14A4
PRINT_MOVE          1DB0
PRINT_MOVEA         1DA2
PRINT_NEG           1CF0
PRINT_NEW_LINE      111A
PRINT_NOP           1D0C
PRINT_OPEN          148A
PRINT_OR            1D1C
PRINT_ORI           1D38
PRINT_PC            1188
PRINT_REGISTER      1252
PRINT_ROL           1D46
PRINT_ROR           1D54
PRINT_RTS           1CDC
PRINT_TAB           10B4
PRINT_UNSUPPORTED   1DBE
PRINT_WORD          1170
PROMT_INPUT_CONTINUE  1EBF
PROMT_INPUT_END     1E92
PROMT_INPUT_START   1E63
P_ADD               1DE5
P_ADDA              1DE9
P_ASL               1E20
P_ASR               1E1C
P_BCLR              1E2C
P_BCS               1E3A
P_BGE               1E3E
P_BLT               1E42
P_BRA               1E4A
P_BVC               1E46
P_CMP               1E31
P_CMPI              1E35
P_DATA              1E52
P_DIVS              1DFC
P_EOR               1E10
P_JSR               1E4E
P_LEA               1E01
P_LSL               1E18
P_LSR               1E14
P_MOVE              1DD4
P_MOVEA             1DD9
P_MOVEM             1DDF
P_MULS              1DF7
P_NEG               1E0C
P_NOP               1DD0
P_OR                1E05
P_ORI               1E08
P_ROL               1E24
P_ROR               1E28
P_RTS               1DCC
P_SUB               1DEE
P_SUBQ              1DF2
RETURN_ADDRESS      9000
RTS                 1700
SIMHALT             1E63
SIZE_OPCODE         700A
STACK_ADDRESS       8000
START               1000
START_ADDRESS       9100
STORE_REGISTER_ADDRESS  700C
TEST_VAL            1E57
UNSUPPORT_OPCODE    11E6
UNSUPPORT_REGISTER  121A
VALUE_IS_EVEN       0
VALUE_IS_ODD        1
WORD_LENGTH         4
